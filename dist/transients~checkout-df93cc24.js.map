{"version":3,"sources":["webpack://checkout/../../../src/common/http-request/payload-transformer.js","webpack://checkout/../../../src/common/http-request/request-factory.js","webpack://checkout/../../src/payment/client-token-generator.js","webpack://checkout/../../../../src/payment/v2/payment-mappers/client-token-mapper.js","webpack://checkout/../../../../src/payment/v2/payment-mappers/cart-mapper.js","webpack://checkout/../../../../src/payment/v2/payment-mappers/gateway-mapper.js","webpack://checkout/../../../../src/payment/v2/payment-mappers/quote-mapper.js","webpack://checkout/../../../../src/payment/v2/payment-mappers/store-mapper.js","webpack://checkout/../../src/store/store-request-sender.js","webpack://checkout/../../src/store/url-helper.js","webpack://checkout/../../../../src/store/v2/mappers/index.js","webpack://checkout/../../src/client/default-config.js","webpack://checkout/../src/index.ts","webpack://checkout/../src/timeout.ts","webpack://checkout/../../../src/common/utils/is-nil.js","webpack://checkout/../../../src/common/utils/omit-property.js","webpack://checkout/../../../src/payment/payment-method-mappers/payment-method-id-mapper.js","webpack://checkout/../../src/payment/url-helper.js","webpack://checkout/../../../src/common/http-request/request-sender.js","webpack://checkout/../../../src/common/http-request/method-types.js","webpack://checkout/../src/request-sender.ts","webpack://checkout/../../../src/common/utils/index.js","webpack://checkout/../src/data-store.ts","webpack://checkout/../src/deep-freeze.ts","webpack://checkout/../src/combine-reducers.ts","webpack://checkout/../src/create-action.ts","webpack://checkout/../src/script-loader.ts","webpack://checkout/../src/create-script-loader.ts","webpack://checkout/../src/form-poster.ts","webpack://checkout/../../src/payment/payment-types.js","webpack://checkout/../../../src/common/utils/is-object.js","webpack://checkout/../../../src/common/http-request/content-types.js","webpack://checkout/webpack://checkoutKit/webpack/bootstrap","webpack://checkout/webpack://checkoutKit/external \"tslib\"","webpack://checkout/webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkout/webpack://checkoutKit/external \"lodash\"","webpack://checkout/webpack://checkoutKit/external \"rxjs\"","webpack://checkout/webpack://checkoutKit/src/shipping/consignment-actions.ts","webpack://checkout/webpack://checkoutKit/external \"@bigcommerce/memoize\"","webpack://checkout/webpack://checkoutKit/src/customer/customer-strategy-actions.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-strategy-actions.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-strategy-actions.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/missing-data-error.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-actions.ts","webpack://checkout/webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkout/webpack://checkoutKit/src/coupon/coupon-actions.ts","webpack://checkout/webpack://checkoutKit/src/billing/billing-address-actions.ts","webpack://checkout/webpack://checkoutKit/src/order/order-actions.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-method-actions.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/checkout-button-actions.ts","webpack://checkout/webpack://checkoutKit/src/coupon/gift-certificate-actions.ts","webpack://checkout/webpack://checkoutKit/src/payment/instrument/instrument-actions.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/embedded-checkout-events.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/standard-error.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/set-prototype-of.ts","webpack://checkout/webpack://checkoutKit/src/remote-checkout/remote-checkout-actions.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/request-error.ts","webpack://checkout/webpack://checkoutKit/src/store-credit/store-credit-actions.ts","webpack://checkout/webpack://checkoutKit/src/config/config-actions.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/is-plain-object.ts","webpack://checkout/webpack://checkoutKit/src/geography/country-actions.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-country-actions.ts","webpack://checkout/webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkout/webpack://checkoutKit/src/payment/payment-status-types.ts","webpack://checkout/webpack://checkoutKit/src/payment/errors/payment-method-client-unavailable-error.ts","webpack://checkout/webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkout/webpack://checkoutKit/src/common/http-request/content-type.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-actions.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/invalid-argument-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-method-types.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/is-iframe-event.ts","webpack://checkout/webpack://checkoutKit/external \"shallowequal\"","webpack://checkout/webpack://checkoutKit/src/common/utility/is-equal.ts","webpack://checkout/webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkout/webpack://checkoutKit/external \"local-storage-fallback\"","webpack://checkout/webpack://checkoutKit/external \"reselect\"","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/iframe-event-poster.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-actions.ts","webpack://checkout/webpack://checkoutKit/src/order/spam-protection/spam-protection-actions.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/not-initialized-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/errors/payment-method-invalid-error.ts","webpack://checkout/webpack://checkoutKit/src/common/selector/with-memoized-combiner.ts","webpack://checkout/webpack://checkoutKit/src/common/error/error-actions.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-method-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-method-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/iframe-event-listener.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-default-includes.ts","webpack://checkout/webpack://checkoutKit/src/cart/map-to-internal-line-items.ts","webpack://checkout/webpack://checkoutKit/src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkout/webpack://checkoutKit/src/common/http-request/internal-api-headers.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-params.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkout/webpack://checkoutKit/src/cart/map-to-internal-line-item.ts","webpack://checkout/webpack://checkoutKit/src/common/error/throw-error-action.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/amount-transformer.ts","webpack://checkout/webpack://checkoutKit/src/common/url/parse-url.ts","webpack://checkout/webpack://checkoutKit/src/common/data-store/cache-action.ts","webpack://checkout/webpack://checkoutKit/src/common/data-store/is-action-options.ts","webpack://checkout/webpack://checkoutKit/src/common/data-store/cachable-action-decorator.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/bind-decorator.ts","webpack://checkout/webpack://checkoutKit/external \"iframe-resizer\"","webpack://checkout/webpack://checkoutKit/external \"iframe-resizer/js/iframeResizer.contentWindow\"","webpack://checkout/webpack://checkoutKit/src/common/utility/omit-deep.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/shipping/consignment-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/shipping/consignment-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/masterpass/get-callback-url.ts","webpack://checkout/webpack://checkoutKit/src/shipping/map-to-internal-shipping-option.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/is-private.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/unrecoverable-error.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/map-from-internal-error-response.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/map-from-payment-error-response.ts","webpack://checkout/webpack://checkoutKit/src/common/error/request-error-factory.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/map-from-storefront-error-response.ts","webpack://checkout/webpack://checkoutKit/src/common/error/clear-error-reducer.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/replace.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/object-set.ts","webpack://checkout/webpack://checkoutKit/src/billing/billing-address-state.ts","webpack://checkout/webpack://checkoutKit/src/billing/billing-address-reducer.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/array-replace.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/object-merge.ts","webpack://checkout/webpack://checkoutKit/src/cart/cart-state.ts","webpack://checkout/webpack://checkoutKit/src/cart/cart-reducer.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/checkout-button-state.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/checkout-button-reducer.ts","webpack://checkout/webpack://checkoutKit/src/config/config-state.ts","webpack://checkout/webpack://checkoutKit/src/config/config-reducer.ts","webpack://checkout/webpack://checkoutKit/src/coupon/coupon-state.ts","webpack://checkout/webpack://checkoutKit/src/coupon/coupon-reducer.ts","webpack://checkout/webpack://checkoutKit/src/coupon/gift-certificate-state.ts","webpack://checkout/webpack://checkoutKit/src/coupon/gift-certificate-reducer.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-state.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-reducer.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-strategy-state.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-strategy-reducer.ts","webpack://checkout/webpack://checkoutKit/src/geography/country-state.ts","webpack://checkout/webpack://checkoutKit/src/geography/country-reducer.ts","webpack://checkout/webpack://checkoutKit/src/order/order-state.ts","webpack://checkout/webpack://checkoutKit/src/order/order-reducer.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-reducer.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-method-state.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-method-reducer.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/merge-or-push.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-strategy-state.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-strategy-reducer.ts","webpack://checkout/webpack://checkoutKit/src/payment/instrument/instrument-state.ts","webpack://checkout/webpack://checkoutKit/src/payment/instrument/instrument-reducer.ts","webpack://checkout/webpack://checkoutKit/src/remote-checkout/remote-checkout-state.ts","webpack://checkout/webpack://checkoutKit/src/remote-checkout/remote-checkout-reducer.ts","webpack://checkout/webpack://checkoutKit/src/shipping/consignment-state.ts","webpack://checkout/webpack://checkoutKit/src/shipping/consignment-reducer.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-country-state.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-country-reducer.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-strategy-state.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-strategy-reducer.ts","webpack://checkout/webpack://checkoutKit/src/store-credit/store-credit-reducer.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-state.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-reducer.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/create-freeze-proxy.ts","webpack://checkout/webpack://checkoutKit/src/address/is-address-equal.ts","webpack://checkout/webpack://checkoutKit/src/store-credit/store-credit-state.ts","webpack://checkout/webpack://checkoutKit/src/checkout/create-internal-checkout-selectors.ts","webpack://checkout/webpack://checkoutKit/src/billing/billing-address-selector.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/checkout-button-selector.ts","webpack://checkout/webpack://checkoutKit/src/coupon/coupon-selector.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-selector.ts","webpack://checkout/webpack://checkoutKit/src/remote-checkout/remote-checkout-selector.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-address-selector.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-selector.ts","webpack://checkout/webpack://checkoutKit/src/cart/cart-selector.ts","webpack://checkout/webpack://checkoutKit/src/config/config-selector.ts","webpack://checkout/webpack://checkoutKit/src/geography/country-selector.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-strategy-selector.ts","webpack://checkout/webpack://checkoutKit/src/coupon/gift-certificate-selector.ts","webpack://checkout/webpack://checkoutKit/src/payment/instrument/instrument-selector.ts","webpack://checkout/webpack://checkoutKit/src/form/form-selector.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-method-selector.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-strategy-selector.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-country-selector.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-strategy-selector.ts","webpack://checkout/webpack://checkoutKit/src/shipping/consignment-selector.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-selector.ts","webpack://checkout/webpack://checkoutKit/src/order/order-selector.ts","webpack://checkout/webpack://checkoutKit/src/store-credit/store-credit-selector.ts","webpack://checkout/webpack://checkoutKit/src/checkout/create-checkout-store.ts","webpack://checkout/webpack://checkoutKit/src/checkout/create-action-transformer.ts","webpack://checkout/webpack://checkoutKit/src/common/error/create-request-error-factory.ts","webpack://checkout/webpack://checkoutKit/src/checkout/create-checkout-store-reducer.ts","webpack://checkout/webpack://checkoutKit/src/checkout/errors/checkout-not-available-error.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/coupon/map-to-internal-coupon.ts","webpack://checkout/webpack://checkoutKit/src/address/map-to-internal-address.ts","webpack://checkout/webpack://checkoutKit/src/billing/is-billing-address-like.ts","webpack://checkout/webpack://checkoutKit/src/common/selector/selector-decorator.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/checkout-button-initializer.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack://checkout/webpack://checkoutKit/src/common/dom/is-element-id.ts","webpack://checkout/webpack://checkoutKit/src/common/dom/set-unique-element-id.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkout/webpack://checkoutKit/src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/errors/not-embeddable-error.ts","webpack://checkout/webpack://checkoutKit/src/common/storage/browser-storage.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/errors/invalid-login-token-error.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/embedded-checkout.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/loading-indicator.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/resizable-iframe-creator.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/embed-checkout.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/cache-key-maps.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/cache-key-resolver.ts","webpack://checkout/webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkout/webpack://checkoutKit/external \"messageformat\"","webpack://checkout/webpack://checkoutKit/src/common/error/errors/timeout-error.ts","webpack://checkout/webpack://checkoutKit/src/common/selector/create-selector.ts","webpack://checkout/webpack://checkoutKit/src/common/http-request/join-includes.ts","webpack://checkout/webpack://checkoutKit/src/config/config-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/config/config-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/billing/billing-address-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/common/registry/registry.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://checkout/webpack://checkoutKit/src/customer/map-to-internal-customer.ts","webpack://checkout/webpack://checkoutKit/src/coupon/map-to-internal-gift-certificate.ts","webpack://checkout/webpack://checkoutKit/src/order/map-to-internal-order.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/common/iframe/iframe-resizer.ts","webpack://checkout/webpack://checkoutKit/src/common/error/error-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/get-environment.ts","webpack://checkout/webpack://checkoutKit/src/common/log/create-logger.ts","webpack://checkout/webpack://checkoutKit/src/common/log/console-logger.ts","webpack://checkout/webpack://checkoutKit/src/common/log/noop-logger.ts","webpack://checkout/webpack://checkoutKit/src/common/log/get-default-logger.ts","webpack://checkout/webpack://checkoutKit/src/coupon/coupon-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/coupon/coupon-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/coupon/gift-certificate-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/coupon/gift-certificate-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-strategy-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-strategy-type.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/customer/customer-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/not-implemented-error.ts","webpack://checkout/webpack://checkoutKit/src/customer/strategies/amazon/amazon-pay-customer-strategy.ts","webpack://checkout/webpack://checkoutKit/src/customer/strategies/braintree/braintree-visacheckout-customer-strategy.ts","webpack://checkout/webpack://checkoutKit/src/customer/strategies/chasepay/chasepay-customer-strategy.ts","webpack://checkout/webpack://checkoutKit/src/customer/strategies/default/default-customer-strategy.ts","webpack://checkout/webpack://checkoutKit/src/customer/strategies/googlepay/googlepay-customer-strategy.ts","webpack://checkout/webpack://checkoutKit/src/customer/strategies/masterpass/masterpass-customer-strategy.ts","webpack://checkout/webpack://checkoutKit/src/customer/strategies/square/square-customer-strategy.ts","webpack://checkout/webpack://checkoutKit/src/geography/country-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/geography/country-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/order/order-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/order/order-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/common/dom/mutation-observer.ts","webpack://checkout/webpack://checkoutKit/src/order/spam-protection/errors/spam-protection-failed-error.ts","webpack://checkout/webpack://checkoutKit/src/order/spam-protection/errors/spam-protection-not-completed-error.ts","webpack://checkout/webpack://checkoutKit/src/order/spam-protection/google-recaptcha.ts","webpack://checkout/webpack://checkoutKit/src/order/spam-protection/google-recaptcha-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/order/spam-protection/spam-protection-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/order/errors/order-finalization-not-required-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-strategy-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/cart/cart-comparator.ts","webpack://checkout/webpack://checkoutKit/src/cart/errors/cart-changed-error.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-validator.ts","webpack://checkout/webpack://checkoutKit/src/store-credit/store-credit-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/store-credit/store-credit-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/payment/is-vaulted-instrument.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-request-transformer.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/adyenv2/adyenv2.ts","webpack://checkout/webpack://checkoutKit/src/payment/payment-strategy-registry.ts","webpack://checkout/webpack://checkoutKit/src/payment/errors/payment-argument-invalid-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/adyenv2/adyenv2-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/order/order-params.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/adyenv2/adyenv2-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/errors/payment-method-cancelled-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/affirm/affirm-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/affirm/affirmJs.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/affirm/affirm-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/address/is-internal-address-equal.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/omit-private.ts","webpack://checkout/webpack://checkoutKit/src/address/map-from-internal-address.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/common/overlay/overlay.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/cancellable-promise.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkout/webpack://checkoutKit/src/payment/errors/payment-method-failed-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/is-credit-card-like.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/cardinal/cardinal.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/is-braintree-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/cardinal/cardinal-three-d-secure-flow.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/cardinal/cardinal-client.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/chasepay/chasepay.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/cardinal/cardinal-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/square/square-form.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/converge/converge-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/credit-card/credit-card-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/cybersource/cybersource-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/legacy/legacy-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/no-payment/no-payment-data-required-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/offline/offline-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/offsite/offsite-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/sage-pay/sage-pay-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/unsupported-browser-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/square/square-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/square/square-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/stripev3/stripev3-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/stripev3/stripev3-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/errors/payment-method-declined-error.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/zip/zip-payment-strategy.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/zip/zip-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/common/data-store/create-data-store-projection.ts","webpack://checkout/webpack://checkoutKit/src/payment/instrument/instrument-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/common/date-time/is-future.ts","webpack://checkout/webpack://checkoutKit/src/common/date-time/add-minutes.ts","webpack://checkout/webpack://checkoutKit/src/payment/instrument/instrument-response-transformer.ts","webpack://checkout/webpack://checkoutKit/src/payment/instrument/instrument-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-country-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-country-request-sender.ts","webpack://checkout/webpack://checkoutKit/src/shipping/shipping-strategy-action-creator.ts","webpack://checkout/webpack://checkoutKit/src/shipping/strategies/amazon/amazon-pay-shipping-strategy.ts","webpack://checkout/webpack://checkoutKit/src/shipping/strategies/default/default-shipping-strategy.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/clone-result.ts","webpack://checkout/webpack://checkoutKit/src/common/selector/create-shallow-equal-selector.ts","webpack://checkout/webpack://checkoutKit/src/checkout/create-checkout-selectors.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-store-selector.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-store-error-selector.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-store-status-selector.ts","webpack://checkout/webpack://checkoutKit/src/common/error/error-message-transformer.ts","webpack://checkout/webpack://checkoutKit/src/common/utility/to-single-line.ts","webpack://checkout/webpack://checkoutKit/src/checkout/checkout-service.ts","webpack://checkout/webpack://checkoutKit/src/checkout/create-checkout-service-error-transformer.ts","webpack://checkout/webpack://checkoutKit/src/checkout/create-checkout-service.ts","webpack://checkout/webpack://checkoutKit/src/order/spam-protection/create-spam-protection.ts","webpack://checkout/webpack://checkoutKit/src/payment/create-payment-client.ts","webpack://checkout/webpack://checkoutKit/src/customer/create-customer-strategy-registry.ts","webpack://checkout/webpack://checkoutKit/src/payment/create-payment-strategy-registry.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkout/webpack://checkoutKit/src/shipping/create-shipping-strategy-registry.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/iframe-content/handle-frame-loaded-event.ts","webpack://checkout/webpack://checkoutKit/src/common/error/errors/custom-error.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack://checkout/webpack://checkoutKit/src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack://checkout/webpack://checkoutKit/src/locale/language-service.ts","webpack://checkout/webpack://checkoutKit/src/locale/create-language-service.ts","webpack://checkout/webpack://checkoutKit/src/currency/currency-formatter.ts","webpack://checkout/webpack://checkoutKit/src/currency/currency-service.ts","webpack://checkout/webpack://checkoutKit/src/currency/create-currency-service.ts","webpack://checkout/webpack://checkoutKit/src/index.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/googlepay/googlepay.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkout/webpack://checkoutKit/src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://checkout/webpack://checkoutKit/src/cart/map-to-internal-cart.ts","webpack://checkout/webpack://checkoutKit/src/promotion/map-to-discount-notifications.ts","webpack://checkout/webpack://checkoutKit/src/billing/errors/unable-to-continue-as-guest-error.ts","webpack://checkout/webpack://checkoutKit/src/billing/billing-address-action-creator.ts","webpack://checkout/../src/create-request-sender.ts","webpack://checkout/../src/payload-transformer.ts","webpack://checkout/../src/to-form-url-encoded.ts","webpack://checkout/../src/request-factory.ts","webpack://checkout/./node_modules/@bigcommerce/request-sender/node_modules/query-string/index.js","webpack://checkout/../src/is-promise.ts","webpack://checkout/../src/create-timeout.ts","webpack://checkout/../src/is-observable-action-like.ts","webpack://checkout/../src/noop-action-transformer.ts","webpack://checkout/../src/noop-state-transformer.ts","webpack://checkout/../src/compose-reducers.ts","webpack://checkout/../src/create-data-store.ts","webpack://checkout/../src/create-error-action.ts","webpack://checkout/../src/memoize.ts","webpack://checkout/../src/cache-key-resolver.ts","webpack://checkout/../src/cache-key-maps.ts","webpack://checkout/../src/get-script-loader.ts","webpack://checkout/../src/create-form-poster.ts","webpack://checkout/../src/form-builder.ts","webpack://checkout/../src/url-utils.ts","webpack://checkout/../src/index.js","webpack://checkout/../../src/client/client.js","webpack://checkout/../../src/payment/offsite-payment-initializer.js","webpack://checkout/../../../src/payment/offsite-payment-mappers/payload-mapper.js","webpack://checkout/../../../src/common/utils/includes.js","webpack://checkout/../../../src/common/utils/omit-emptystring-and-nil.js","webpack://checkout/../../../src/common/utils/is-emptystring-or-nil.js","webpack://checkout/../../../src/common/utils/is-empty-string.js","webpack://checkout/../../../src/common/utils/omit-nil.js","webpack://checkout/../../../src/common/utils/to-number.js","webpack://checkout/../../../src/common/utils/to-snake-case.js","webpack://checkout/../../../src/common/utils/to-string.js","webpack://checkout/../../../src/payment/offsite-payment-mappers/address-mapper.js","webpack://checkout/../../../src/payment/offsite-payment-mappers/customer-mapper.js","webpack://checkout/../../../src/payment/offsite-payment-mappers/meta-mapper.js","webpack://checkout/../../src/payment/payment-method-types.js","webpack://checkout/../../src/payment/payment-method-ids.js","webpack://checkout/../../../src/payment/offsite-payment-mappers/store-mapper.js","webpack://checkout/../../src/payment/payment-submitter.js","webpack://checkout/../../../../src/payment/v1/payment-mappers/payload-mapper.js","webpack://checkout/../../../../src/payment/v1/payment-mappers/customer-mapper.js","webpack://checkout/../../../../src/payment/v1/payment-mappers/order-mapper.js","webpack://checkout/../../../../src/payment/v1/payment-mappers/payment-mapper.js","webpack://checkout/../../../../src/payment/v1/payment-mappers/store-mapper.js","webpack://checkout/../../../src/common/http-request/default-options.js"],"names":["_objectAssign2","__webpack_require__","_contentTypes","_utils","PayloadTransformer","data","contentType","arguments","length","undefined","APPLICATION_JSON","includes","JSON","stringify","xhr","headers","this","parseResponseHeaders","getAllResponseHeaders","getResponseHeader","status","statusText","response","responseText","parse","rawHeaders","replace","split","reduce","line","parts","key","shift","trim","_objectAssign3","default","_defineProperty","toLowerCase","join","RequestFactory","url","options","callback","XMLHttpRequest","onerror","Error","onload","open","method","setOptions","Object","keys","forEach","value","setRequestHeader","withCredentials","setHeaders","ClientTokenGenerator","urlHelper","requestSender","clientTokenMapper","_classCallCheck","config","UrlHelper","create","RequestSender","ClientTokenMapper","getGenerateClientTokenUrl","payload","mapToClientToken","postRequest","cartMapper","gatewayMapper","quoteMapper","storeMapper","CartMapper","GatewayMapper","QuoteMapper","StoreMapper","omitNil","cart","mapToCart","gateway","mapToGateway","quote","mapToQuote","store","mapToStore","_data$cart","currency_code","currency","items","mapToItems","totals","mapToOrderTotals","_this","_data$cart2","map","itemData","discount_amount","integerDiscount","name","price","integerAmount","quantity","sku","tax_amount","integerTax","amount","integerAmountAfterDiscount","type","mapToType","_data$cart3","discount_total","discount","grand_total","grandTotal","shipping_total","shipping","subtotal","surcharge_total","handling","tax_total","taxTotal","ItemPhysicalEntity","ItemDigitalEntity","ItemGiftCertificateEntity","_paymentMethodIdMapper","paymentMethodIdMapper","PaymentMethodIdMapper","_data$paymentMethod","paymentMethod","mapToId","billing_address","mapToAddress","shipping_address","addressKey","_data$customer","customer","address","address_line_1","addressLine1","address_line_2","addressLine2","city","company","country_code","countryCode","email","first_name","firstName","last_name","lastName","phone","postal_code","postCode","state","province","locale","mapToLocale","store_identity","mapToIdentity","urls","mapToUrls","_data$store","currencyCode","language_code","storeLanguage","_data$store2","id","storeId","toNumber","storeName","_data$store3","cartLink","checkout","checkoutLink","confirmation","orderConfirmationLink","home","shopPath","_methodTypes","_mappers","StoreRequestSender","getInstrumentsUrl","customerId","mapToHeaders","sendRequest","getTrustedShippingAddressUrl","mapToTrustedShippingAddressPayload","POST","mapToInstrumentPayload","getInstrumentByIdUrl","instrumentId","DELETE","host","providerName","default_instrument","defaultInstrument","provider","credit_card","_ref2","_ref2$creditCard","creditCard","threeDSecure","cardholder_name","cardholderName","number","month","year","verification_code","verificationCode","issue_month","issueMonth","issue_year","issueYear","issue_number","issueNumber","track_data","trackData","is_manual_entry","isManualEntry","icc_data","iccData","fallback_reason","fallbackReason","is_contactless","isContactless","encrypted_pin_cryptogram","encryptedPinCryptogram","encrypted_pin_ksn","encryptedPinKsn","three_d_secure","billingAddress","shippingAddress","Authorization","authToken","code","provinceCode","create_request_sender_1","exports","createRequestSender","create_timeout_1","createTimeout","request_sender_1","timeout_1","Timeout","_delay","_resolve","_promise","Promise","resolve","prototype","onComplete","then","complete","_timeoutToken","window","clearTimeout","start","setTimeout","object","predicateFn","_isObject2","result","_isObject","_paymentMethodTypes","_paymentMethodIds","MULTI_OPTION","BRAINTREE_PAYPAL","BRAINTREE_PAYPAL_CREDIT","BRAINTREE_VISACHECKOUT","BRAINTREE_GOOGLEPAY","isBraintreePaymentMethod","BRAINTREE","requestFactory","payloadTransformer","mergedOptions","_deepAssign2","DEFAULT_OPTIONS","createRequest","error","fromResponse","isSuccessfulRequest","toRequest","send","GET","merge_1","tslib_1","__importDefault","is_promise_1","_requestFactory","_payloadTransformer","_cookie","_options","requestOptions","_mergeDefaultOptions","request","_prependHost","reject","requestHandler","toResponse","onabort","ontimeout","timeout","abort","toRequestBody","get","__assign","post","put","patch","delete","defaultOptions","credentials","Accept","csrfToken","body","test","lodash_1","rxjs_1","operators_1","shallowEqual","deep_freeze_1","is_observable_action_like_1","noop_action_transformer_1","noop_state_transformer_1","DataStore","reducer","initialState","_reducer","actionTransformer","equalityCheck","shouldWarnMutation","stateTransformer","_state$","BehaviorSubject","_notification$","Subject","_dispatchers","_dispatchQueue$","_errors","pipe","mergeMap","dispatcher$","concatMap","action$","filter","action","scan","states","_transformStates","transformedState","getValue","distinctUntilChanged","_a","_b","stateA","stateB","subscribe","dispatch","_dispatchObservableAction","_dispatchThunkAction","_dispatchAction","getState","notifyState","next","subscriber","args","_i","filters","state$","every","filterFn","initial","skip","subscriptions","subscription","unsubscribe","newState","previousValue","_getDispatchError","meta","queueId","throwError","of","error$","transformedAction$","from","merge","_getDispatcher","index","first","catchError","tap","thunkAction","defer","deepFreeze","equalityCheck_1","_c","previousValue_1","isFrozen","Array","isArray","isPlainObject","freeze","getOwnPropertyNames","hasOwnProperty","TypeError","reducers","currentState","assign","omitBy","ScriptLoader","_scripts","loadScript","src","script","document","createElement","event","onreadystatechange","async","appendChild","script_loader_1","create_form_poster_1","createFormPoster","form_poster_1","FormPoster","url_utils_1","_formBuilder","postForm","form","build","addEventListener","handleUnload","removeEventListener","submit","removeChild","isAbsoluteUrl","joinPaths","API","HOSTED","OFFLINE","_typeof","memoize_1","memoize","memoizeOne","installedModules","moduleId","module","i","l","modules","call","m","c","d","getter","o","defineProperty","enumerable","r","Symbol","toStringTag","t","mode","__esModule","ns","bind","n","property","p","s","require","ConsignmentActionType","e","CreateConsignmentsRequested","CreateConsignmentsSucceeded","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentSucceeded","UpdateConsignmentFailed","DeleteConsignmentRequested","DeleteConsignmentSucceeded","DeleteConsignmentFailed","UpdateShippingOptionRequested","UpdateShippingOptionSucceeded","UpdateShippingOptionFailed","LoadShippingOptionsRequested","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","CustomerStrategyActionType","SignInFailed","SignInRequested","SignInSucceeded","SignOutFailed","SignOutRequested","SignOutSucceeded","InitializeFailed","InitializeRequested","InitializeSucceeded","DeinitializeFailed","DeinitializeRequested","DeinitializeSucceeded","WidgetInteractionStarted","WidgetInteractionFinished","WidgetInteractionFailed","PaymentStrategyActionType","ExecuteFailed","ExecuteRequested","ExecuteSucceeded","FinalizeFailed","FinalizeRequested","FinalizeSucceeded","ShippingStrategyActionType","UpdateAddressFailed","UpdateAddressRequested","UpdateAddressSucceeded","SelectOptionFailed","SelectOptionRequested","SelectOptionSucceeded","MissingDataErrorType","MissingBillingAddress","MissingCart","MissingCheckout","MissingConsignments","MissingCheckoutConfig","MissingOrder","MissingOrderConfig","MissingOrderId","MissingPayment","MissingPaymentMethod","MissingPaymentToken","MissingShippingAddress","MissingSpamProtectionToken","a","subtype","__extends","CheckoutActionType","LoadCheckoutRequested","LoadCheckoutSucceeded","LoadCheckoutFailed","UpdateCheckoutRequested","UpdateCheckoutSucceeded","UpdateCheckoutFailed","CouponActionType","ApplyCouponRequested","ApplyCouponSucceeded","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponSucceeded","RemoveCouponFailed","BillingAddressActionType","UpdateBillingAddressRequested","UpdateBillingAddressSucceeded","UpdateBillingAddressFailed","ContinueAsGuestRequested","ContinueAsGuestSucceeded","ContinueAsGuestFailed","OrderActionType","LoadOrderRequested","LoadOrderSucceeded","LoadOrderFailed","LoadOrderPaymentsRequested","LoadOrderPaymentsSucceeded","LoadOrderPaymentsFailed","SubmitOrderRequested","SubmitOrderSucceeded","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderSucceeded","FinalizeOrderFailed","PaymentMethodActionType","LoadPaymentMethodRequested","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","LoadPaymentMethodsRequested","LoadPaymentMethodsSucceeded","LoadPaymentMethodsFailed","CheckoutButtonActionType","InitializeButtonFailed","InitializeButtonRequested","InitializeButtonSucceeded","DeinitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonSucceeded","GiftCertificateActionType","ApplyGiftCertificateRequested","ApplyGiftCertificateSucceeded","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateSucceeded","RemoveGiftCertificateFailed","InstrumentActionType","LoadInstrumentsRequested","LoadInstrumentsSucceeded","LoadInstrumentsFailed","DeleteInstrumentRequested","DeleteInstrumentSucceeded","DeleteInstrumentFailed","EmbeddedCheckoutEventType","CheckoutComplete","CheckoutError","CheckoutLoaded","FrameError","FrameLoaded","SignedOut","message","setPrototypeOf","__proto__","captureStackTrace","stack","RemoteCheckoutActionType","InitializeRemoteBillingRequested","InitializeRemoteBillingSucceeded","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingSucceeded","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsSucceeded","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","UpdateRemoteCheckout","DEFAULT_RESPONSE","errors","StoreCreditActionType","ApplyStoreCreditRequested","ApplyStoreCreditSucceeded","ApplyStoreCreditFailed","ConfigActionType","LoadConfigRequested","LoadConfigSucceeded","LoadConfigFailed","CountryActionType","LoadCountriesRequested","LoadCountriesSucceeded","LoadCountriesFailed","ShippingCountryActionType","LoadShippingCountriesRequested","LoadShippingCountriesSucceeded","LoadShippingCountriesFailed","ACKNOWLEDGE","FINALIZE","ContentType","Json","JsonV1","PaymentActionType","SubmitPaymentRequested","SubmitPaymentSucceeded","SubmitPaymentFailed","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","isIframeEvent","isEqual","objectA","objectB","Date","getTime","RegExp","toString","keyFilter","keysA","keysB","targetOrigin","_targetWindow","_targetOrigin","origin","postMessage","setTarget","CustomerActionType","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","SignOutCustomerRequested","SignOutCustomerSucceeded","SignOutCustomerFailed","SpamProtectionActionType","Completed","SubmitFailed","NotInitializedErrorType","CheckoutButtonNotInitialized","CustomerNotInitialized","PaymentNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","withMemoizedCombiner","creator","combiner","pop","apply","__spreadArrays","combinerArgs","ErrorActionType","ClearError","_requestSender","loadPaymentMethods","Observable","observer","createAction","deviceSessionId","sessionHash","catch","createErrorAction","loadPaymentMethod","methodId","__decorate","X-API-INTERNAL","EmbeddedContentEventType","StyleConfigured","sourceOrigin","_sourceOrigin","_isListening","_listeners","listen","_handleMessage","stopListen","addListener","listener","listeners","push","removeListener","indexOf","splice","trigger","mapToInternalLineItems","itemMap","decimalPlaces","idKey","item","amountTransformer","imageUrl","amountAfterDiscount","toInteger","sender","recipient","attributes","variantId","INTERNAL_USE_ONLY","CheckoutIncludes","AvailableShippingOptions","PhysicalItemsCategoryNames","DigitalItemsCategoryNames","_scriptLoader","_window","loadClient","braintree","client","load3DS","loadDataCollector","dataCollector","loadPaypal","paypal","loadPaypalCheckout","paypalCheckout","loadVisaCheckout","visaCheckout","loadGooglePayment","googlePayment","_braintreeScriptLoader","_dataCollectors","initialize","clientToken","_clientToken","getClient","b","_client","authorization","getPaypal","_paypal","all","getPaypalCheckout","_paypalCheckout","get3DS","_3ds","getDataCollector","cacheKey","cached","kount","deviceData","teardown","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","_teardown","mod","mapToInternalLineItem","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","brand","categoryNames","productId","option","addedByPromotion","throwErrorAction","concat","_decimalPlaces","Math","round","pow","parseUrl","anchor","href","port","hostname","hash","protocol","pathname","search","cacheAction","fn","shareReplay","isActionOptions","param","useCache","cachableActionDecorator","_","descriptor","memoizedMethods","WeakMap","u","lastArg","instanceMethods","set","bindDecorator","target","bindMethodDecorator","decoratedTarget","getOwnPropertyDescriptor","boundMethod","omitDeep","predicate","transform","_checkoutRequestSender","_configActionCreator","loadCheckout","loadConfig","loadDefaultCheckout","__awaiter","context","getContextConfig","checkoutId","sent","updateCheckout","getCheckout","loadCurrentCheckout","_consignmentRequestSender","unassignItemsByAddress","consignment","existingConsignment","consignments","getConsignmentByAddress","lineItems","_removeLineItems","getCart","updateConsignment","deleteConsignment","assignItemsByAddress","_createOrUpdateConsignment","_addLineItems","selectShippingOption","getConsignments","consignmentUpdateBody","shippingOptionId","consignmentMeta","loadShippingOptions","params","include","updateAddress","_getConsignmentRequestBody","createConsignments","consignmentId","updateShippingOption","_isUpdateConsignmentRequest","physicalItems","itemId","_hydrateLineItems","lineItemIds","existingItem","sharedItem","find","lineItem","DEFAULT_PARAMS","__rest","getCallbackUrl","location","mapToInternalShippingOption","isSelected","description","cost","selected","isRecommended","transitTime","isPrivate","joinErrors","_factoryMethods","register","detail","title","factoryMethod","createError","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","last","errorResponse","storefrontErrorResponse","internalErrorResponse","clearErrorReducer","g","currentValue","newValue","objectSet","DEFAULT_STATE","statuses","billingAddressReducer","I","combineReducers","dataReducer","composeReducers","errorsReducer","statusesReducer","S","O","arrayReplace","currentArray","newArray","matchObject","sameAsCurrentCount","sameAsNewCount","countSameAsReplaced","replacedValue","newItem","currentItem","j","objectMerge","currentObject","newObject","T","cartReducer","N","U","q","D","R","z","x","DEFAULT_DATA_STATE","initializedContainers","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","V","K","H","B","F","containerId","G","Y","Q","configReducer","X","$","ee","Z","te","couponReducer","re","ie","oe","coupons","ae","giftCertificateReducer","ce","ue","de","giftCertificates","pe","customerReducer","le","me","customerStrategyReducer","_e","ye","be","fe","isInitialized","initializeError","initializeMethodId","deinitializeError","deinitializeMethodId","signInError","signInMethodId","signOutError","signOutMethodId","widgetInteractionError","widgetInteractionMethodId","isInitializing","isDeinitializing","isSigningIn","isSigningOut","isWidgetInteracting","ve","countryReducer","Se","Ie","Ae","Ce","we","orderReducer","je","ke","metaReducer","Re","omit","callbackUrl","order","orderToken","token","payment","Ee","paymentReducer","Te","ze","Ne","paymentMethodReducer","Ue","xe","Fe","Be","Le","array","defaultPredicate","pick","findIndex","pickBy","methodA","methodB","loadMethodId","loadMethodError","isLoadingMethod","Ye","paymentStrategyReducer","Ve","Ke","He","Ge","executeError","executeMethodId","finalizeError","finalizeMethodId","isExecuting","isFinalizing","Qe","instrumentReducer","Xe","et","$e","tt","Ze","vaultedInstruments","instrument","bigpayToken","deleteError","failedInstrument","isDeleting","deletingInstrument","rt","remoteCheckoutReducer","ot","nt","billing","st","updateShippingOptionError","updateError","isUpdating","isUpdatingShippingOption","consignmentReducer","ut","dt","pt","at","lt","shippingCountryReducer","mt","gt","_t","ht","bt","shippingStrategyReducer","vt","Ot","St","yt","updateAddressError","updateAddressMethodId","selectOptionError","selectOptionMethodId","isUpdatingAddress","isSelectingOption","At","storeCreditReducer","Et","Pt","It","jt","checkoutReducer","kt","Rt","zt","orderId","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","charAt","normalize","address1","address2","stateOrProvince","postalCode","customFields","identity","Bt","createInternalCheckoutSelectorsFactory","getBillingAddress","getUpdateError","getContinueAsGuestError","getLoadError","isContinuingAsGuest","isLoading","getInitializeError","getDeinitializeError","getCoupons","getRemoveError","getApplyError","isApplying","isRemoving","getCustomer","getShippingAddress","getInternalPayment","getGatewayPayment","getHostedPayment","getPaymentId","getPaymentStatus","getPaymentToken","getPaymentRedirectUrl","isPaymentDataRequired","isPaymentDataSubmitted","createBillingAddressSelector","Tt","continueAsGuestError","loadError","Dt","createCartSelector","createCheckoutButtonSelector","some","values","createConfigSelector","getConfig","getStoreConfig","storeConfig","getExternalSource","externalSource","createCountrySelector","getCountries","countries","createCouponSelector","removeCouponError","applyCouponError","isApplyingCoupon","isRemovingCoupon","createCustomerSelector","createCustomerStrategySelector","getSignInError","getSignOutError","getWidgetInteractionError","createGiftCertificateSelector","getGiftCertificates","removeGiftCertificateError","applyGiftCertificateError","isApplyingGiftCertificate","isRemovingGiftCertificate","createInstrumentSelector","getInstruments","instruments","getInstrumentsMeta","getDeleteError","createFormSelector","getShippingAddressFields","selectedCountry","formFields","shippingAddressFields","field","processField","getBillingAddressFields","billingAddressFields","country","label","fieldType","itemtype","subdivisions","required","hasPostalCodes","Boolean","createFormSelectorFactory","createPaymentMethodSelector","getPaymentMethods","paymentMethods","getPaymentMethodsMeta","getPaymentMethod","gatewayId","getLoadMethodError","createPaymentStrategySelector","getExecuteError","getFinalizeError","getWidgetInteractingError","createRemoteCheckoutSelector","createShippingAddressSelector","createShippingCountrySelector","getShippingCountries","createShippingStrategySelector","getUpdateAddressError","getSelectOptionError","createConsignmentSelector","getConsignmentById","addressA","addressB","getShippingOption","selectedShippingOption","getCreateError","getLoadShippingOptionsError","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getItemAssignmentError","getUpdateShippingOptionError","isLoadingShippingOptions","isCreating","isAssigningItems","C","createConsignmentSelectorFactory","createCheckoutSelector","h","getOutstandingBalance","useStoreCredit","storeCredit","max","outstandingBalance","createOrderSelector","getOrder","getOrderMeta","createPaymentSelector","payments","providerId","providerType","qt","internalPayment","step","redirectUrl","nonce","Ut","createStoreCreditSelector","applyError","checkoutButton","customerStrategies","paymentStrategies","remoteCheckout","shippingCountries","shippingStrategies","selectors","v","f","y","createCheckoutStore","requestErrorFactory","factory","createInternalCheckoutSelectors","createDataStore","couponTypes","mapToInternalCoupon","coupon","displayName","discountType","couponType","mapToInternalAddress","addressId","stateOrProvinceCode","selectorDecorator","resolver","memoizedMethod","cachedValue","getUsedCount","cache","getKey","_checkoutButton","getInitializeButtonError","getDeinitializeButtonError","CheckoutButtonErrorSelector","isInitializingButton","isDeinitializingButton","CheckoutButtonStatusSelector","createCheckoutButtonSelectors","CheckoutButtonMethodType","_store","_buttonStrategyActionCreator","_state","initializeButton","containerIds","selector","idPrefix","containers","querySelectorAll","slice","container","uniqueId","deinitializeButton","deinitialize","CheckoutButtonInitializer","_registry","_paymentMethodActionCreator","empty","w","A","GOOGLEPAY_BRAINTREE","GOOGLEPAY_STRIPE","MASTERPASS","PAYPALEXPRESS","_checkoutActionCreator","_braintreeSDKCreator","_paypalScriptLoader","_formPoster","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","_paymentMethod","allowedSources","disallowedSources","allowCredit","FUNDING","CREDIT","Button","render","env","testMode","commit","shouldProcessPayment","funding","allowed","disallowed","style","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","onError","addresses","createPayment","flow","enableShippingAddress","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","offerCredit","tokenizePayment","payment_type","device_data","_mapToLegacyShippingAddress","_mapToLegacyBillingAddress","details","recipientName","phone_number","line1","line2","W","_googlePayPaymentProcessor","_methodId","_getMethodId","_walletButton","_createSignInButton","parentNode","getElementById","googlePayButton","createButton","_handleWalletButtonClick","preventDefault","displayWallet","paymentData","handleSuccess","updateShippingAddress","_onPaymentSelectComplete","_onError","Content-Type","_masterpassScriptLoader","initializationData","load","masterpass","_masterpassClient","_signInButton","buttonContainer","button","_createMasterpassPayload","allowedCardTypes","cartAmount","cartId","suppressShippingAddress","_host","merchantId","clientId","actions","res","paymentID","payerID","paymentId","payerId","payerInfo","payer","payer_info","createCheckoutButtonInitializer","formPoster","E","registry","k","scriptLoader","P","getScriptLoader","checkoutActionCreator","M","L","NotEmbeddableErrorType","_namespace","getItem","rawValue","withNamespace","removeItem","getItemOnce","setItem","MissingContainer","MissingContent","UnknownError","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_storage","_location","_isAttached","onLoad","onFrameLoad","onSignOut","_configureStyles","attach","show","_allowCookie","_attemptLogin","createFrame","iframe","_iframe","hide","_retryAllowCookie","detach","iFrameResizer","close","contentWindow","styles","encodeURIComponent","visibility","EmbeddedCheckout","DEFAULT_STYLES","size","color","backgroundColor","ROTATION_ANIMATION","_styles","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","parentId","opacity","handleTransitionEnd","display","bottom","left","height","width","position","right","top","transition","indicator","borderRadius","border","borderColor","margin","transformStyle","animation","head","sheet","CSSStyleSheet","insertRule","allowPaymentRequest","_toResizableFrame","timeoutInterval","handleMessage","contentId","iframes","scrolling","sizeWidth","heightCalculationMethod","STORAGE_PREFIX","embedCheckout","loadingIndicator","isTerminalCacheKeyMap","_lastId","_map","maps","_usedMaps","maxSize","onExpire","noop","_resolveMap","parentMap","usedCount","_generateMap","_removeLeastUsedMap","isMatched","mapIndex","unshift","parent","terminalMap","recentlyUsedMap","_removeMap","createSelector","joinIncludes","uniq","_configRequestSender","createAddress","_factories","_instances","defaultToken","cacheToken","_getInstance","_hasFactory","_hasInstance","hasShippingAddress","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parseResponse","paymentMethodData","tokenizationData","androidPayCards","cardType","lastFour","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","merchantInfo","authJwt","merchantName","googleMerchantName","googleMerchantId","transactionInfo","totalPriceStatus","totalPrice","toFixed","cardRequirements","billingAddressRequired","billingAddressFormat","shippingAddressRequired","emailRequired","phoneNumberRequired","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","apiVersion","apiVersionMinor","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressParameters","format","tokenizationSpecification","braintree:apiVersion","braintree:authorizationFingerprint","paymentMethodTokenizationParameters","braintree:merchantId","braintree:sdkVersion","shippingAddressParameters","_mapGooglePayStripeDataRequestToGooglePayDataRequestV2","card","last4","err","stripe:version","stripeVersion","stripe:publishableKey","stripePublishableKey","mapToInternalCustomer","isGuest","fullName","customerGroupName","customerGroup","mapToInternalGiftCertificate","giftCertificate","discountedAmount","used","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","orderMeta","customerCanBeCreated","mapToInternalOrderPayment","baseAmount","sum","discountNotifications","totalDiscountedAmount","appliedGiftCertificates","keyBy","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","mapToStoreCredit","taxes","handlingCostTotal","orderAmount","orderAmountAsInteger","mapToInternalPaymentStatus","isDefaultOrderPayment","helpText","instructions","returnUrl","socialDataObject","digitalItems","socialMedia","image","link","shareText","text","sharingLink","channelName","channel","channelCode","iframeResizer","setupContentWindowForIframeResizer","clearError","getEnvironment","process","isEnabled","_console","log","_logToConsole","messages","info","warn","debug","logger","console","getDefaultLogger","_couponRequestSender","applyCoupon","removeCoupon","couponCode","_giftCertificateRequestSender","applyGiftCertificate","removeGiftCertificate","giftCertificateCode","_strategyRegistry","signIn","signOut","widgetInteraction","loadWidget","onPaymentReady","region","_configureWidget","onLoginReady","amazon","Login","setClientId","setUseCookie","onAmazonLoginReady","OffAmazonPayments","onAmazonPaymentsReady","createInitOptions","settings","collectShipping","paymentRequest","String","braintreeVisaCheckout","tokenize","tokenizedPayload","_toVisaCheckoutAddress","_postForm","userData","userEmail","card_information","_getCardInformation","cardInformation","_getAddress","phoneNumber","streetAddress","extendedAddress","locality","createBraintreeVisaCheckoutPaymentProcessor","braintreeScriptLoader","braintreeSDKCreator","PaymentStrategyType","JPMC","initializeBilling","methodName","initializeShipping","initializePayment","loadSettings","generateToken","trackAuthorizationEvent","_remoteCheckoutRequestSender","_customerRequestSender","signInCustomer","ne","switchMap","signOutCustomer","_remoteCheckoutActionCreator","amazonOptions","se","useAmazonAddressBook","_handleAuthorization","authorize","popup","scope","tokenPrefix","_customerStrategyActionCreator","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","_buttonClassName","braintreevisacheckout","visaCheckoutOptions","initOptions","storeProfile","signInButton","init","on","paymentSuccessPayload","_paymentInstrumentSelected","buttonClass","querySelector","_insertVisaCheckoutButton","visaCheckoutButton","className","innerHTML","_chasePayScriptLoader","chasepay","chasePayOptions","digitalSessionId","ChasePay","configure","language","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","startCheckout","COMPLETE_CHECKOUT","requestId","merchantRequestId","_setExternalCheckoutData","_reloadPage","sessionToken","fromChasePay","_customerActionCreator","googlePayOptions","_getGooglePayOptions","googlepaybraintree","googlepaystripe","masterpassOptions","Masterpass","_countryRequestSender","loadCountries","_config","Accept-Language","loadOrder","submitOrder","finalizeOrder","_orderRequestSender","_checkoutValidator","_spamProtectionActionCreator","Oe","loadOrderPayments","loadCurrentOrder","_getCurrentOrderId","spamProtectionToken","checkoutSettings","isSpamProtectionEnabled","validate","_mapToOrderRequestBody","customerMessage","executeSpamProtection","execute","MutationObserver","googleRecaptchaScriptLoader","mutationObserverFactory","sitekey","event$","_event$","recaptcha","getResponse","reset","error-callback","_recaptcha","_watchRecaptchaChallengeWindow","iframeElement","iframeContainer","parentElement","observe","attributeFilter","_loadPromise","_loadScript","initRecaptcha","grecaptcha","_googleRecaptcha","recaptchaSitekey","googleRecaptchaSitekey","take","ADYENV2","AFFIRM","AFTERPAY","AMAZON","CREDIT_CARD","CYBERSOURCE","KLARNA","LEGACY","OFFSITE","PAYPAL","PAYPAL_EXPRESS","PAYPAL_EXPRESS_CREDIT","SAGE_PAY","SQUARE","STRIPEV3","NO_PAYMENT_DATA_REQUIRED","BRAINTREE_VISA_CHECKOUT","BRAINTREE_GOOGLE_PAY","CHASE_PAY","WE_PAY","STRIPE_GOOGLE_PAY","ZIP","CONVERGE","_orderActionCreator","De","strategy","getByMethod","finalize","_loadOrderPaymentsIfNeeded","cartA","cartB","_normalize","sort","itemA","itemB","localeCompare","giftWrapping","comparator","qe","_compareCoupons","_compareGiftCertificates","couponsA","couponsB","giftCertificatesA","giftCertificatesB","_storeCreditRequestSender","applyStoreCredit","removeStoreCredit","_paymentRequestSender","_paymentRequestTransformer","submitPayment","initializeOffsitePayment","_transformResponse","isVaultedInstrument","ThreeDS2ComponentType","ResultCode","checkoutState","_getPaymentMethod","shippingOption","contextConfig","instrumentMeta","paymentMeta","internalCustomer","vaultAccessToken","Je","quoteMeta","geoCountryCode","source","paymentMethodSelector","_getToken","_hasFactoryForMethod","_isLegacyMethod","clientSidePaymentProviders","paymentSettings","invalidFields","ThreeDS2DeviceFingerprint","ThreeDS2Challenge","AuthenticationFinished","Authorised","Cancelled","ChallengeShopper","IdentifyShopper","Pending","Received","RedirectShopper","Refused","OrderIncludes","_paymentActionCreator","_adyenV2ScriptLoader","_locale","adyenv2","_adyenv2","configuration","environment","originKey","paymentMethodsResponse","adyenCheckout","_adyenCheckout","adyenComponent","onChange","_updateStateContainer","mount","_adyenComponent","shouldSaveInstrument","paymentPayload","_getStateContainer","it","three_ds_result","result_code","_handle3DS2Fingerprint","_handle3DS2Challenge","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","unmount","_getAdyenV2PaymentInitializeOptions","_stateContainer","_getThreeDS2ChallengeWidgetSize","threeDS2Options","threeDS2ChallengeWidgetSize","resultObject","paymentMethodId","threeDS2Component","challengeToken","challengeData","challengePaymentPayload","payment_data","threeDS2Container","threeDS2ContainerId","fingerprintToken","fingerprintData","fingerprintPaymentPayload","isValid","_stylesheets","_loadStylesheet","AdyenCheckout","stylesheet","rel","DigitalItemsCategories","PhysicalItemsCategories","_affirmScriptLoader","publicKey","affirm","_affirm","_getCheckoutInformation","onFail","failObject","reason","onSuccess","successObject","ui","checkout_token","_getBillingAddress","merchant","user_confirmation_url","links","user_cancel_url","user_confirmation_url_action","_getShippingAddress","_getItems","metadata","shipping_type","_getShippingType","platform_type","platform_version","platform_affirm","discounts","_getDiscounts","order_id","shipping_amount","total","full","zipcode","display_name","unit_price","salePrice","qty","item_image_url","item_url","categories","_getCategories","customItems","listPrice","discount_display_name","DISCOUNTED_AMOUNT","categoryTree","category","Function","apikey","scriptURI","_getScriptURI","_storeCreditActionCreator","_afterpayScriptLoader","storeCountryName","storeCountry","_mapCountryToISO2","_afterpaySdk","_redirectToAfterpay","countryName","redirect","AfterPay","isInternalAddressEqual","ignoredKeys","mapFromInternalAddress","_billingAddressActionCreator","_isPaymentMethodSelected","_walletOptions","_createWallet","referenceId","_getOrderReferenceId","sellerId","_getMerchantId","is3dsEnabled","_processPaymentWith3ds","_getOrderReferenceIdFromInitializationData","orderReferenceId","onPaymentSelect","onReady","walletOptions","amazonOrderReferenceId","design","designMode","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","wt","remoteAddress","internalBillingAddress","getAmazonOrderReferenceId","initConfirmationFlow","confirmationFlow","success","_element","_createElement","_registerClick","remove","_unregisterClick","_removeAfterTransition","element","background","transitionDuration","zIndex","onClick","handeTransition","propertyName","promise","cancellable","cancel","race","_overlay","_threeDSecureOptions","preloadPaypal","tokenizeCard","requestData","_mapToCreditCard","creditCards","focusWindow","useraction","verifyCard","addFrame","removeFrame","cancelVerifyCard","verification","appendSessionId","processedPayment","ccName","ccNumber","cvv","ccCvv","expirationDate","ccExpiry","endpoint","isCreditCardLike","CardinalInitializationType","CardinalEventType","CardinalValidatedAction","CardinalPaymentType","CardinalTriggerEvents","CardinalPaymentBrand","CardinalSignatureVerification","_braintreePaymentProcessor","_is3dsEnabled","_handleError","orderRequest","_preparePaymentData","_isUsingVaulting","tokenizedCard","_credit","braintreeOptions","_paymentStrategyActionCreator","visaInitOptions","_cardinalClient","prepare","runBinProcess","_getBinNumber","getThreeDSecureData","_getOrderData","entry","iin","CardinalSignatureValidationErrors","Init","Complete","Confirm","SetupCompleted","Validated","Success","NoAction","Failure","CCA","Paypal","VisaCheckout","ApplePay","DiscoverWallet","BinProcess","Yes","No","ChasePayEventType","_sdk","_getClientSDK","off","ActionCode","ErrorNumber","ErrorDescription","setup","jwt","binNumber","Status","threeDSecureData","orderData","Payment","ExtendedData","SignatureVerification","continueObject","AcsUrl","Payload","partialOrder","_mapToPartialOrder","continue","transactionId","consumer","BillingAddress","_mapToCardinalAddress","Account","_mapToCardinalAccount","Email1","ShippingAddress","Consumer","OrderDetails","OrderNumber","Amount","CurrencyCode","OrderChannel","TransactionId","AccountNumber","Number","ExpirationMonth","ExpirationYear","NameOnAccount","CardCode","cardinalAddress","FirstName","LastName","Address1","City","State","PostalCode","CountryCode","Address2","Phone1","Cardinal","StartCheckout","CompleteCheckout","CancelCheckout","CardBrand","DigitalWalletType","Qt","_wepayRiskClient","_walletEvent$","walletButton","_configureWallet","_chasePayClient","_getPayment","_displayWallet","_createOrder","logoContainer","insertBrandings","onCancel","_setSessionToken","showLoadingAnimation","getRiskToken","riskToken","paymentCryptogram","cryptogramId","eci","btoa","reqTokenId","expDate","substr","accountNum","accountMask","extraData","Jt","_threeDSecureFlow","tn","_googlePayOptions","statusCode","_klarnaScriptLoader","_supportedEUCountries","klarnaCredit","_klarnaCredit","_unsubscribe","_loadWidget","_authorize","authorization_token","authorizationToken","klarna","client_token","_getUpdateSessionData","_mapToKlarnaAddress","klarnaAddress","street_address","given_name","family_name","street_address2","updateSessionData","approved","show_form","Klarna","Credit","an","orderPayload","_shouldSubmitFullPayload","_isPaymentAcknowledged","_useRedirectFlow","paypalexpress","useRedirectFlow","_isInContextEnabled","_paypalSdk","closeFlow","_isAcknowledgedOrFinalized","initXO","startFlow","americanExpress","discover","discoverDiners","JCB","masterCard","unionPay","unknown","visa","squareGift","applePay","none","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","requestCardNonce","deferred","square","squareOptions","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","mn","requestShippingAddress","requestBillingInfo","pending","setPostalCode","masterpassBtn","elementId","SqPaymentForm","_stripeScriptLoader","stripeOptions","stripev3","stripeJs","_stripeV3Client","cardElement","elements","_cardElement","_getStripeJs","handleCardPayment","stripeResponse","paymentIntent","createPaymentMethod","_mapStripePaymentMethodOptions","stripePaymentMethod","stripeCardPaymentOptions","_mapStripeCardPaymentOptions","payment_method","_mapStripeBillingAddress","_mapStripeShippingAddress","_mapStripeBillingDetails","stripeBillingDetails","_mapStripeShippingDetails","stripeShippingDetails","_getCustomer","shippingDetails","receipt_email","save_payment_method","billing_details","publishableKey","Stripe","betas","_riskClient","WePay","risk","generate_risk_token","get_risk_token","orderActionCreator","paymentActionCreator","payloadWithToken","$t","_zipScriptLoader","zip","_zipClient","zipClient","Checkout","_prepareForReferredRegistration","Sn","onCheckout","openModal","externalId","On","Zip","ProjectionActionType","_instrumentRequestSender","loadInstruments","Pn","session","_getSessionContext","_getCurrentAccessToken","_getValidAccessToken","currentToken","deleteInstrument","_isValidVaultAccessToken","date","valueOf","now","vaultAccessExpiry","newDate","setMinutes","getMinutes","getVaultAccessToken","shopperCurrency","isTransactional","transformResponse","_transformVaultedInstruments","vaulted_instruments","transformErrorResponse","transformVaultAccessResponse","expires_at","bigpay_token","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","trustedShippingAddress","trusted_shipping_address","_transformer","Mn","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","loadInstrumentsWithAddress","_shippingCountryRequestSender","Dn","Nn","selectOption","_consignmentActionCreator","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","Synchronize","cloneDeep","input","cloneDeepSafe","Gn","cloneResult","createShallowEqualSelector","Kn","createSelectorCreator","defaultMemoize","Hn","Jn","Zn","createCheckoutSelectorsFactory","getShippingOptions","getSelectedShippingOption","getBillingCountries","getSelectedPaymentMethod","getError","getSelectShippingOptionError","isPending","isSelectingShippingOption","isCustomerStepPending","isPaymentStepPending","createCheckoutStoreSelector","Bn","Vn","availableShippingOptions","xn","createCheckoutStoreErrorSelector","getLoadCheckoutError","getUpdateCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getInitializeCustomerError","getUpdateBillingAddressError","getUpdateShippingAddressError","getDeleteConsignmentError","getUpdateConsignmentError","getCreateConsignmentsError","getInitializeShippingError","getApplyStoreCreditError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","createCheckoutStoreStatusSelector","isLoadingCheckout","isUpdatingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isInitializingCustomer","isUpdatingBillingAddress","isUpdatingShippingAddress","isUpdatingConsignment","isDeletingConsignment","isCreatingConsignments","isInitializingShipping","isApplyingStoreCredit","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","_messageCustomizer","er","_countryActionCreator","_couponActionCreator","_errorActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","isDevelopment","projection","_errorTransformer","$n","_selectorsFactory","_storeProjection","_dispatch","loadCheckoutAction","loadConfigAction","finalizeOrderIfNeeded","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","continueAsGuest","deinitializeShipping","assignItemsToAddress","unassignItemsToAddress","selectConsignmentShippingOption","updateBillingAddress","initializeSpamProtection","CheckoutService","createCheckoutService","tr","paymentClient","createClient","setHost","bigpayBaseUrl","orderRequestSender","checkoutRequestSender","configActionCreator","spamProtection","createScriptLoader","Pe","MutationObserverFactory","spamProtectionActionCreator","Me","Rn","zn","paymentMethodActionCreator","remoteCheckoutRequestSender","J","remoteCheckoutActionCreator","ge","he","jn","kn","paymentRequestTransformer","paymentRequestSender","billingAddressActionCreator","braintreePaymentProcessor","overlay","Mt","checkoutValidator","storeCreditActionCreator","We","paymentStrategyActionCreator","ct","ft","Ct","en","Gt","Vt","Kt","nn","rn","cn","un","dn","pn","hn","ln","gn","_n","sn","xt","Cn","vn","In","An","Xt","yn","bn","createPaymentStrategyRegistry","Tn","Ln","qn","consignmentRequestSender","consignmentActionCreator","Un","Fn","handleFrameLoadedEvent","hasAttribute","setAttribute","isCustomError","hr","_untargetedMessagePoster","_messageHandlers","postComplete","ar","_postMessage","postError","_transformError","postFrameError","untargeted","postFrameLoaded","postLoaded","postSignedOut","receiveStyles","handler","pr","_notifyMessageHandlers","IframeEmbeddedCheckoutMessenger","lr","NoopEmbeddedCheckoutMessenger","createEmbeddedCheckoutMessenger","or","parentWindow","sr","parentOrigin","cr","gr","_logger","_transformConfig","locales","translations","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","mr","compile","_transformData","output","defaultTranslations","_flattenObject","union","parentKey","resultKey","isObject","LanguageService","createLanguageService","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","positiveAmount","abs","_toFixed","decimalAmount","parsedIntegerAmount","precision","br","_storeConfig","_customerFormatter","yr","_storeFormatter","toCustomerCurrency","exchangeRate","toStoreCurrency","CurrencyService","createCurrencyService","nr","rr","ir","fr","_r","Cr","ButtonType","ButtonColor","Long","Short","Default","Black","White","_googlePayScriptLoader","_googlePayInitializer","_consigmentActionCreator","buttonType","buttonColor","_googlePayClient","loadPaymentData","_getPaymentDataRequest","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","google","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","companyName","address3","administrativeArea","postPaymentData","remoteBillingAddress","googlePayAddressMapped","createGooglePayPaymentProcessor","initializer","mapToInternalCart","promotions","notifications","promotion","banners","banner","placeholders","messageHtml","certificate","isShippingRequired","taxSubtotal","billingAddressRequestBody","existingBillingAddressRequestBody","_createOrUpdateBillingAddress","cookie","__importStar","payload_transformer_1","request_factory_1","to_form_url_encoded_1","JSON_CONTENT_TYPE_REGEXP","FORM_URLENCODED_CONTENT_TYPE_REGEXP","_getHeader","_parseResponseHeaders","_parseResponseBody","queryString","_configureRequest","_formatUrl","_configureRequestHeaders","strictUriEncode","objectAssign","decodeComponent","encode","opts","strict","extract","str","queryStart","formatter","arrayFormat","accumulator","exec","parserForArrayFormat","ret","val","keysSorter","obj","encoderForArrayFormat","val2","query","delay","data_store_1","combine_reducers_1","compose_reducers_1","create_action_1","create_data_store_1","create_error_action_1","flowRight","curryRight","lodash_memoize_1","shallowequal_1","cache_key_resolver_1","Map","memoized","cache_key_maps_1","CacheKeyResolver","isRootCacheKeyMap","create_script_loader_1","get_script_loader_1","instance","form_builder_1","formBuilder","FormBuilder","_createInput","pathA","pathB","path","removeLeadingSlash","Client","paymentSubmitter","offsitePaymentInitializer","clientTokenGenerator","storeRequestSender","clientConfig","DEFAULT_CONFIG","OffsitePaymentInitializer","PaymentSubmitter","generateClientToken","postShopperInstrument","_paymentTypes","payloadMapper","PayloadMapper","mapToPayload","getOffsitePaymentUrl","addressMapper","customerMapper","metaMapper","AddressMapper","CustomerMapper","MetaMapper","_data$order","bc_auth_token","notify_url","page_title","payment_method_id","reference_id","return_url","mapToBillingAddress","mapToCustomer","mapToMeta","mapToShippingAddress","_omitProperty2","isEmptyStringOrNil","_isEmptyString2","_isNil2","isNil","parseFloat","string","isNaN","_omitNil","formattedAddressKey","toSnakeCase","_data$quoteMeta","customer_browser_info","navigator","userAgent","customer_email","customer_first_name","customer_geo_ip_country_code","customer_last_name","customer_locale","customer_name","customer_phone","customer_reference","meta_referrer","referrer","meta_source","meta_user_agent","store_hash","storeHash","store_id","getPaymentUrl","orderMapper","paymentMapper","OrderMapper","PaymentMapper","mapToOrder","mapToPayment","customer_group","geo_ip_country_code","session_token","mapToCoupons","mapToShipping","_ref2$order","_ref3","omitEmptyStringAndNil","state_code","street_1","street_2","variant_id","_data$order2","tax","_data$orderMeta","_data$payment","device_info","device","deviceFingerprint","fingerprint_id","vault_payment_instrument","mapToBigPayToken","credit_card_token","credit_card_cryptogram","mapToCryptogram","mapToCreditCard","_data$payment2","account_name","verification_value","customer_code","ccCustomerCode","_ref","credit_card_number_confirmation","payment_cryptogram","xid","account_mask"],"mappings":"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,EACA4vE,EACAC,EACA,IAAI2N,GACAx9E,EACA6vE,EACAqM,EACA,IAAIuB,GAAe,IAAIC,GAAqB/oC,QAKxDF,EAASphB,SAASgI,GAAoBuzB,OAAOA,WACzC,WAAI+uB,GACA39E,EACA4vE,EACAsM,EACAG,EACA,IAAIuB,GAAmBjpC,MAI/BF,EAASphB,SAASgI,GAAoBwzB,OAAOA,WACzC,WAAI1F,GACAnpD,EACA4vE,KAIRn7B,EAASphB,SAASgI,GAAoBhlB,QAAQA,WAC1C,WAAIwnE,GACA79E,EACA4vE,KAIRn7B,EAASphB,SAASgI,GAAoByzB,QAAQA,WAC1C,WAAIgvB,GACA99E,EACA4vE,EACAC,KAIRp7B,EAASphB,SAASgI,GAAoB0zB,OAAOA,WACzC,WAAIgvB,GACA/9E,EACA4vE,EACAC,EACA,IAAI2N,GACAx9E,EACA6vE,EACAqM,EACA,IAAIuB,GAAe,IAAIC,GAAqB/oC,QAKxDF,EAASphB,SAASgI,GAAoB2zB,eAAeA,WACjD,WAAIgvB,GACAh+E,EACA4vE,EACA,IAAIqO,GAAA/hE,EAAmBy4B,MAI/BF,EAASphB,SAASgI,GAAoB4zB,sBAAsBA,WACxD,WAAI+uB,GACAh+E,EACA4vE,EACA,IAAIqO,GAAA/hE,EAAmBy4B,MAI/BF,EAASphB,SAASgI,GAAoB6zB,SAASA,WAC3C,WAAIgvB,GACAl+E,EACA4vE,EACAC,EACAt7B,KAIRE,EAASphB,SAASgI,GAAoB8zB,OAAOA,WACzC,WAAIgvB,GACAn+E,EACA80C,EACA86B,EACAC,EACAqM,EACAiB,EACA9+E,EACA,IAAI+/E,GAAmBzpC,MAI/BF,EAASphB,SAASgI,GAAoBg0B,yBAAyBA,WAC3D,WAAIgvB,GACAr+E,EACA4vE,KAIRn7B,EAASphB,SAASgI,GAAoBzvB,UAAUA,WAC5C,WAAIg1B,GACA5gC,EACA4vE,EACAC,EACAqM,EACAW,KAIRpoC,EAASphB,SAASgI,GAAoB9vB,iBAAiBA,WACnD,WAAI+yE,GACAt+E,EACA4vE,EACAC,EACAqM,EACAW,KAIRpoC,EAASphB,SAASgI,GAAoB7vB,wBAAwBA,WAC1D,WAAI8yE,GACAt+E,EACA4vE,EACAC,EACAqM,EACAW,QAKRpoC,EAASphB,SAASgI,GAAoBi0B,wBAAwBA,WAC1D,WAAI3tB,GACA3hC,EACA80C,EACAonC,EACAiB,EACAtN,EACAD,EACA9oB,EAA4CnS,EAAct2C,GAC1D,IAAIqzC,EAAyBiD,MAIrCF,EAASphB,SAASgI,GAAoBm0B,UAAUA,WAC5C,WAAI4W,GACApmE,EACA80C,EACA86B,EACAC,EACAqM,EACAiB,EACA9+E,EACA,IAAIy4B,EAAqB6d,GACzB,IAAI4pC,GAAgB5pC,MAI5BF,EAASphB,SAASgI,GAAoBk0B,qBAAqBA,WACvD,WAAIyY,GACAhoE,EACA80C,EACAonC,EACAiB,EACAtN,EACAD,EACAhyE,OAAAm5B,EAAA7a,EAAAte,CACIoC,EACA,IAAIg3B,EAAA9a,EACA,IAAIsa,EAAAta,EACA,IAAIgb,EAAAhb,EAAsBy4B,SAO9CF,EAASphB,SAASgI,GAAoBo0B,OAAOA,WACzC,WAAI+uB,GACAx+E,EACA4vE,EACAC,EACA,IAAI0O,GAAgB5pC,MAI5BF,EAASphB,SAASgI,GAAoBkT,WAAWA,WAC7C,WAAIm7B,GACA1pE,EACA4vE,EACAC,EACA,IAAIv4C,EAAApb,EAAuBy4B,MAInCF,EAASphB,SAASgI,GAAoBq0B,kBAAkBA,WACpD,WAAIsY,GACAhoE,EACA80C,EACAonC,EACAiB,EACAtN,EACAD,EACAhyE,OAAAm5B,EAAA7a,EAAAte,CACIoC,EACA,IAAI23B,EAAAzb,MAKhBu4B,EAASphB,SAASgI,GAAoBs0B,IAAIA,WACtC,WAAI8uB,GACAz+E,EACA4vE,EACAC,EACAqM,EACAe,EACA,IAAIyB,GAAgB/pC,GACpBt2C,KAIRo2C,EAASphB,SAASgI,GAAoBu0B,SAASA,WAC3C,WAAI+uB,GACA3+E,EACA4vE,EACAC,EACAt7B,KAIRE,EAASphB,SAASgI,GAAoB+zB,SAASA,WAC3C,WAAIwvB,GACA5+E,EACAk8E,EACArM,EACAD,EACA,IAAIiP,GAAmBl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","file":"transients~checkout-df93cc24.js","sourcesContent":["import objectAssign from 'object-assign';\nimport { APPLICATION_JSON } from './content-types';\nimport { includes } from '../utils';\n\nexport default class PayloadTransformer {\n    /**\n     * @returns {PayloadTransformer}\n     */\n    static create() {\n        return new PayloadTransformer();\n    }\n\n    /**\n     * @param {Object} data\n     * @param {string} [contentType = APPLICATION_JSON]\n     * @returns {Object}\n     */\n    toRequest(data, contentType = APPLICATION_JSON) {\n        if (data && includes(contentType, APPLICATION_JSON)) {\n            return JSON.stringify(data);\n        }\n\n        return data;\n    }\n\n    /**\n     * @param {XMLHttpRequest} xhr\n     * @returns {Object}\n     * @property {Object} data\n     * @property {number} status\n     * @property {string} statusText\n     */\n    fromResponse(xhr) {\n        const headers = this.parseResponseHeaders(xhr.getAllResponseHeaders());\n        const contentType = xhr.getResponseHeader('Content-Type');\n        const { status, statusText } = xhr;\n\n        let data = 'response' in xhr ? xhr.response : xhr.responseText;\n\n        if (data && includes(contentType, APPLICATION_JSON)) {\n            data = JSON.parse(data);\n        }\n\n        return { data, headers, status, statusText };\n    }\n\n    /**\n     * @private\n     * @param {string} rawHeaders\n     * @returns {Object}\n     */\n    parseResponseHeaders(rawHeaders) {\n        const lines = rawHeaders ? rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ').split(/\\r?\\n/) : [];\n\n        return lines.reduce((headers, line) => {\n            const parts = line.split(':');\n            const key = (parts.shift() || '').trim();\n\n            if (!key) {\n                return headers;\n            }\n\n            return objectAssign({}, headers, {\n                [key.toLowerCase()]: parts.join(':').trim(),\n            });\n        }, {});\n    }\n}\n","export default class RequestFactory {\n    /**\n     * @returns {RequestFactory}\n     */\n    static create() {\n        return new RequestFactory();\n    }\n\n    /**\n     * @param {string} url\n     * @param {Object} options\n     * @param {Function} [callback]\n     * @returns {XMLHttpRequest}\n     */\n    createRequest(url, options, callback) {\n        const xhr = new XMLHttpRequest();\n\n        xhr.onerror = () => {\n            if (callback) {\n                callback(new Error(xhr.statusText));\n            }\n        };\n\n        xhr.onload = () => {\n            if (callback) {\n                callback();\n            }\n        };\n\n        xhr.open(options.method, url, true);\n        this.setOptions(xhr, options);\n\n        return xhr;\n    }\n\n    /**\n     * @private\n     * @param {XMLHttpRequest} xhr\n     * @param {Object} headers\n     * @returns {void}\n     */\n    setHeaders(xhr, headers) {\n        const headerKeys = Object.keys(headers);\n\n        headerKeys.forEach((key) => {\n            const value = headers[key];\n\n            xhr.setRequestHeader(key, value);\n        });\n    }\n\n    /**\n     * @private\n     * @param {XMLHttpRequest} xhr\n     * @param {Object} options\n     * @returns {void}\n     */\n    setOptions(xhr, options) {\n        xhr.withCredentials = options.withCredentials;\n\n        if (options.headers) {\n            this.setHeaders(xhr, options.headers);\n        }\n    }\n}\n","import RequestSender from '../common/http-request/request-sender';\nimport ClientTokenMapper from './v2/payment-mappers/client-token-mapper';\nimport UrlHelper from './url-helper';\n\nexport default class ClientTokenGenerator {\n    /**\n     * @param {Object} config\n     * @returns {PaymentSubmitter}\n     */\n    static create(config) {\n        const urlHelper = UrlHelper.create(config);\n        const requestSender = RequestSender.create();\n        const clientTokenMapper = ClientTokenMapper.create();\n\n        return new ClientTokenGenerator(urlHelper, requestSender, clientTokenMapper);\n    }\n\n    /**\n     * @param {UrlHelper} urlHelper\n     * @param {RequestSender} requestSender\n     * @param {ClientTokenMapper} clientTokenMapper\n     * @returns {void}\n     */\n    constructor(urlHelper, requestSender, clientTokenMapper) {\n        /**\n         * @private\n         * @type {UrlHelper}\n         */\n        this.urlHelper = urlHelper;\n\n        /**\n         * @private\n         * @type {RequestSender}\n         */\n        this.requestSender = requestSender;\n\n        /**\n         * @private\n         * @type {ClientTokenMapper}\n         */\n        this.clientTokenMapper = clientTokenMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @param {Function} [callback]\n     * @returns {void}\n     */\n    generateClientToken(data, callback) {\n        const url = this.urlHelper.getGenerateClientTokenUrl();\n        const payload = this.clientTokenMapper.mapToClientToken(data);\n\n        this.requestSender.postRequest(url, payload, {}, callback);\n    }\n}\n","import { omitNil } from '../../../common/utils';\nimport CartMapper from './cart-mapper';\nimport GatewayMapper from './gateway-mapper';\nimport QuoteMapper from './quote-mapper';\nimport StoreMapper from './store-mapper';\n\nexport default class ClientTokenMapper {\n    /**\n     * @returns {ClientTokenMapper}\n     */\n    static create() {\n        const cartMapper = CartMapper.create();\n        const gatewayMapper = GatewayMapper.create();\n        const quoteMapper = QuoteMapper.create();\n        const storeMapper = StoreMapper.create();\n\n        return new ClientTokenMapper(cartMapper, gatewayMapper, quoteMapper, storeMapper);\n    }\n\n    /**\n     * @param {CartMapper} cartMapper\n     * @param {GatewayMapper} gatewayMapper\n     * @param {QuoteMapper} quoteMapper\n     * @param {StoreMapper} storeMapper\n     */\n    constructor(cartMapper, gatewayMapper, quoteMapper, storeMapper) {\n        /**\n         * @private\n         * @type {CartMapper}\n         */\n        this.cartMapper = cartMapper;\n\n        /**\n         * @private\n         * @type {GatewayMapper}\n         */\n        this.gatewayMapper = gatewayMapper;\n\n        /**\n         * @private\n         * @type {QuoteMapper}\n         */\n        this.quoteMapper = quoteMapper;\n\n        /**\n         * @private\n         * @type {StoreMapper}\n         */\n        this.storeMapper = storeMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToClientToken(data) {\n        return omitNil({\n            cart: this.cartMapper.mapToCart(data),\n            gateway: this.gatewayMapper.mapToGateway(data),\n            quote: this.quoteMapper.mapToQuote(data),\n            store: this.storeMapper.mapToStore(data),\n        });\n    }\n}\n","import { omitNil } from '../../../common/utils';\n\nexport default class CartMapper {\n    /**\n     * @returns {CartMapper}\n     */\n    static create() {\n        return new CartMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToCart(data) {\n        const { cart = {} } = data;\n\n        return omitNil({\n            currency_code: cart.currency,\n            items: this.mapToItems(data),\n            totals: this.mapToOrderTotals(data),\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object[]}\n     */\n    mapToItems(data) {\n        const { cart = { items: [] } } = data;\n\n        return cart.items.map(itemData => omitNil({\n            discount_amount: itemData.integerDiscount,\n            name: itemData.name,\n            price: itemData.integerAmount,\n            quantity: itemData.quantity,\n            sku: itemData.sku,\n            tax_amount: itemData.integerTax,\n            amount: itemData.integerAmountAfterDiscount,\n            type: this.mapToType(itemData),\n        }));\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToOrderTotals(data) {\n        const { cart = {} } = data;\n\n        return omitNil({\n            discount_total: cart.discount ? cart.discount.integerAmount : null,\n            grand_total: cart.grandTotal ? cart.grandTotal.integerAmount : null,\n            shipping_total: cart.shipping ? cart.shipping.integerAmount : null,\n            subtotal: cart.subtotal ? cart.subtotal.integerAmount : null,\n            surcharge_total: cart.handling ? cart.handling.integerAmount : null,\n            tax_total: cart.taxTotal ? cart.taxTotal.integerAmount : null,\n        });\n    }\n\n    /**\n     * @private\n     * @param {Object} itemData\n     * @returns {Object}\n     */\n    mapToType(itemData) {\n        const types = {\n            ItemPhysicalEntity: 'physical',\n            ItemDigitalEntity: 'digital',\n            ItemGiftCertificateEntity: 'gift_card',\n        };\n\n        return types[itemData.type];\n    }\n}\n","import { omitNil } from '../../../common/utils';\nimport PaymentMethodIdMapper from '../../payment-method-mappers/payment-method-id-mapper';\n\nexport default class GatewayMapper {\n    /**\n     * @returns {GatewayMapper}\n     */\n    static create() {\n        const paymentMethodIdMapper = PaymentMethodIdMapper.create();\n\n        return new GatewayMapper(paymentMethodIdMapper);\n    }\n\n    /**\n     * @param {PaymentMethodIdMapper} paymentMethodIdMapper\n     * @returns {void}\n     */\n    constructor(paymentMethodIdMapper) {\n        /**\n         * @private\n         * @type {PaymentMethodIdMapper}\n         */\n        this.paymentMethodIdMapper = paymentMethodIdMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToGateway(data) {\n        const { paymentMethod = {} } = data;\n\n        return omitNil({\n            name: this.paymentMethodIdMapper.mapToId(paymentMethod),\n        });\n    }\n}\n","import { omitNil } from '../../../common/utils';\n\nexport default class QuoteMapper {\n    /**\n     * @returns {QuoteMapper}\n     */\n    static create() {\n        return new QuoteMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToQuote(data) {\n        return omitNil({\n            billing_address: this.mapToAddress(data, 'billingAddress'),\n            shipping_address: this.mapToAddress(data, 'shippingAddress'),\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @param {string} addressKey\n     * @returns {Object}\n     */\n    mapToAddress(data, addressKey) {\n        const { customer = {} } = data;\n        const address = data[addressKey] || {};\n\n        return omitNil({\n            address_line_1: address.addressLine1,\n            address_line_2: address.addressLine2,\n            city: address.city,\n            company: address.company,\n            country_code: address.countryCode,\n            email: customer.email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone: address.phone,\n            postal_code: address.postCode,\n            state: address.province,\n        });\n    }\n}\n","import { omitNil, toNumber } from '../../../common/utils';\n\nexport default class StoreMapper {\n    /**\n     * @returns {StoreMapper}\n     */\n    static create() {\n        return new StoreMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToStore(data) {\n        return omitNil({\n            locale: this.mapToLocale(data),\n            store_identity: this.mapToIdentity(data),\n            urls: this.mapToUrls(data),\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToLocale(data) {\n        const { store = {} } = data;\n\n        return omitNil({\n            country_code: store.countryCode,\n            currency_code: store.currencyCode,\n            language_code: store.storeLanguage,\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToIdentity(data) {\n        const { store = {} } = data;\n\n        return omitNil({\n            id: store.storeId ? toNumber(store.storeId) : null,\n            name: store.storeName,\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToUrls(data) {\n        const { store = {} } = data;\n\n        return omitNil({\n            cart: store.cartLink,\n            checkout: store.checkoutLink,\n            confirmation: store.orderConfirmationLink,\n            home: store.shopPath,\n        });\n    }\n}\n","import RequestSender from '../common/http-request/request-sender';\nimport { DELETE, POST } from '../common/http-request/method-types';\nimport UrlHelper from './url-helper';\nimport {\n    mapToHeaders,\n    mapToInstrumentPayload,\n    mapToTrustedShippingAddressPayload,\n} from './v2/mappers';\n\nexport default class StoreRequestSender {\n    /**\n     * @param {Object} config\n     * @returns {StoreRequestSender}\n     */\n    static create(config) {\n        const urlHelper = UrlHelper.create(config);\n        const requestSender = RequestSender.create();\n\n        return new StoreRequestSender(urlHelper, requestSender);\n    }\n\n    /**\n     * @param {UrlHelper} urlHelper\n     * @param {RequestSender} requestSender\n     * @returns {void}\n     */\n    constructor(urlHelper, requestSender) {\n        /**\n         * @private\n         * @type {UrlHelper}\n         */\n        this.urlHelper = urlHelper;\n\n        /**\n         * @private\n         * @type {RequestSender}\n         */\n        this.requestSender = requestSender;\n    }\n\n    /**\n     * @param {Object} data\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    loadInstruments(data, callback) {\n        const url = this.urlHelper.getInstrumentsUrl(\n            data.storeId,\n            data.customerId,\n            data.currencyCode\n        );\n        const options = {\n            headers: mapToHeaders(data),\n        };\n\n        this.requestSender.sendRequest(url, null, options, callback);\n    }\n\n    /**\n     * @param {Object} data\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    loadInstrumentsWithAddress(data, callback) {\n        const url = this.urlHelper.getTrustedShippingAddressUrl(\n            data.storeId,\n            data.customerId,\n            data.currencyCode\n        );\n        const payload = mapToTrustedShippingAddressPayload(data);\n        const options = {\n            method: POST,\n            headers: mapToHeaders(data),\n        };\n\n        this.requestSender.postRequest(url, payload, options, callback);\n    }\n\n    /**\n     * @param {Object} data\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    postShopperInstrument(data, callback) {\n        const url = this.urlHelper.getInstrumentsUrl(\n            data.storeId,\n            data.customerId,\n            data.currencyCode\n        );\n        const payload = mapToInstrumentPayload(data);\n        const options = {\n            headers: mapToHeaders(data),\n        };\n\n        this.requestSender.postRequest(url, payload, options, callback);\n    }\n\n    /**\n     * @param {Object} data\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    deleteShopperInstrument(data, callback) {\n        const url = this.urlHelper.getInstrumentByIdUrl(\n            data.storeId,\n            data.customerId,\n            data.instrumentId\n        );\n        const options = {\n            method: DELETE,\n            headers: mapToHeaders(data),\n        };\n\n        this.requestSender.sendRequest(url, null, options, callback);\n    }\n}\n","export default class UrlHelper {\n    /**\n     * @param {Object} config\n     * @param {string} config.host\n     * @returns {CustomerMapper}\n     */\n    static create(config) {\n        return new UrlHelper(config);\n    }\n\n    /**\n     * @param {Object} config\n     * @param {string} config.host\n     * @returns {void}\n     */\n    constructor(config) {\n        /**\n         * @private\n         * @type {Object}\n         */\n        this.config = config;\n    }\n\n    /**\n     * @private\n     * @returns {string}\n     * @throws {Error}\n     */\n    get host() {\n        if (!this.config || !this.config.host) {\n            throw new Error('Host URL unavailable or not supplied.');\n        }\n\n        return this.config.host;\n    }\n\n    /**\n     * @param {number} storeId\n     * @param {number} customerId\n     * @param {string} currencyCode\n     * @returns {string}\n     */\n    getInstrumentsUrl(storeId, customerId, currencyCode) {\n        return `${this.host}/api/v2/stores/${storeId}/shoppers/${customerId}/instruments?currency_code=${currencyCode}`;\n    }\n\n    /**\n     * @param {number} storeId\n     * @param {number} customerId\n     * @param {string} currencyCode\n     * @return {string}\n     */\n    getTrustedShippingAddressUrl(storeId, customerId, currencyCode) {\n        return `${this.host}/api/v2/stores/${storeId}/shoppers/${customerId}/instruments/trusted_shipping_address?currency_code=${currencyCode}`;\n    }\n\n    /**\n     * @param {number} storeId\n     * @param {number} customerId\n     * @param {number} instrumentId\n     * @returns {string}\n     */\n    getInstrumentByIdUrl(storeId, customerId, instrumentId) {\n        return `${this.host}/api/v2/stores/${storeId}/shoppers/${customerId}/instruments/${instrumentId}`;\n    }\n}\n","import { omitNil } from '../../../common/utils';\n\n/**\n * @param {Object} [data={}]\n * @param {Object} data.billingAddress\n * @param {CreditCard} data.creditCard\n * @param {boolean} data.defaultInstrument\n * @param {string} data.providerName\n * @return {Object}\n */\nexport function mapToInstrumentPayload(data = {}) {\n    const {\n        providerName,\n        defaultInstrument: default_instrument,\n    } = data;\n\n    const provider = omitNil({ name: providerName });\n\n    return omitNil({\n        provider,\n        credit_card: mapToCreditCard(data),\n        billing_address: mapToAddress(data.billingAddress),\n        default_instrument,\n    });\n}\n\n/**\n * @param {Object} [data={}]\n * @param {Object} data.shippingAddress\n * @return {Object}\n */\nexport function mapToTrustedShippingAddressPayload(data = {}) {\n    return omitNil({\n        shipping_address: mapToAddress(data.shippingAddress),\n    });\n}\n\n/**\n * @param {Object} data\n * @param {string} data.authToken\n * @return {Object}\n */\nexport function mapToHeaders({ authToken: Authorization } = {}) {\n    return omitNil({\n        Authorization,\n    });\n}\n\n/**\n * @param {AddressData} address\n * @return {Object}\n */\nfunction mapToAddress(address = {}) {\n    const state = mapToState(address.provinceCode, address.province);\n\n    return omitNil({\n        address_line_1: address.addressLine1,\n        address_line_2: address.addressLine2,\n        city: address.city,\n        company: address.company,\n        country_code: address.countryCode,\n        email: address.email,\n        first_name: address.firstName,\n        last_name: address.lastName,\n        phone: address.phone,\n        postal_code: address.postCode,\n        state,\n    });\n}\n\n/**\n * @param {string} code\n * @param {string} name\n * @return {Object}\n */\nfunction mapToState(code, name) {\n    return omitNil({\n        code,\n        name,\n    });\n}\n\n/**\n * @param {Object} data\n * @param {CreditCard} data.creditCard\n * @return {Object}\n */\nfunction mapToCreditCard({ creditCard = {} }) {\n    const threeDSecure = omitNil(creditCard.threeDSecure);\n\n    return omitNil({\n        cardholder_name: creditCard.cardholderName,\n        number: creditCard.number,\n        month: creditCard.month,\n        year: creditCard.year,\n        verification_code: creditCard.verificationCode,\n        issue_month: creditCard.issueMonth,\n        issue_year: creditCard.issueYear,\n        issue_number: creditCard.issueNumber,\n        track_data: creditCard.trackData,\n        is_manual_entry: creditCard.isManualEntry,\n        icc_data: creditCard.iccData,\n        fallback_reason: creditCard.fallbackReason,\n        is_contactless: creditCard.isContactless,\n        encrypted_pin_cryptogram: creditCard.encryptedPinCryptogram,\n        encrypted_pin_ksn: creditCard.encryptedPinKsn,\n        three_d_secure: threeDSecure,\n    });\n}\n","const DEFAULT_CONFIG = {\n    host: '',\n};\n\nexport default DEFAULT_CONFIG;\n","export { default as ScriptLoader } from './script-loader';\nexport { default as createScriptLoader } from './create-script-loader';\nexport { default as getScriptLoader } from './get-script-loader';\n","export default class Timeout {\n    private _promise: Promise<any>;\n    private _resolve: () => void;\n    private _timeoutToken?: number;\n\n    constructor(\n        private _delay?: number\n    ) {\n        // tslint:disable-next-line:no-empty\n        this._resolve = () => {};\n\n        this._promise = new Promise(resolve => {\n            this._resolve = resolve;\n        });\n    }\n\n    onComplete(callback: () => void): void {\n        this._promise.then(callback);\n    }\n\n    complete(): void {\n        this._resolve();\n\n        if (this._timeoutToken) {\n            window.clearTimeout(this._timeoutToken);\n        }\n    }\n\n    start(): void {\n        if (this._delay) {\n            this._timeoutToken = window.setTimeout(() => this.complete(), this._delay);\n        }\n    }\n}\n","/**\n * @param {*} value\n * @returns {boolean}\n */\nexport default function isNil(value) {\n    if (value === null || value === undefined) {\n        return true;\n    }\n\n    return false;\n}\n","import isObject from './is-object';\n\n/**\n * @param {Object} object\n * @param {Function} predicateFn\n * @returns {Object}\n */\nexport default function omitProperty(object, predicateFn) {\n    if (!isObject(object)) {\n        return object;\n    }\n\n    const keys = Object.keys(object);\n\n    return keys.reduce((result, key) => {\n        const value = object[key];\n\n        if (!predicateFn(value)) {\n            result[key] = value;\n        }\n\n        return result;\n    }, {});\n}\n","import { MULTI_OPTION } from '../payment-method-types';\nimport {\n    BRAINTREE,\n    BRAINTREE_GOOGLEPAY,\n    BRAINTREE_PAYPAL,\n    BRAINTREE_PAYPAL_CREDIT,\n    BRAINTREE_VISACHECKOUT,\n} from '../payment-method-ids';\n\n/**\n * @param {string} id\n * @return {Boolean}\n */\nfunction isBraintreePaymentMethod(id) {\n    switch (id) {\n    case BRAINTREE_PAYPAL:\n    case BRAINTREE_PAYPAL_CREDIT:\n    case BRAINTREE_VISACHECKOUT:\n    case BRAINTREE_GOOGLEPAY:\n        return true;\n    default:\n        return false;\n    }\n}\n\nexport default class PaymentMethodIdMapper {\n    /**\n     * @returns {PaymentMethodIdMapper}\n     */\n    static create() {\n        return new PaymentMethodIdMapper();\n    }\n\n    /**\n     * @param {PaymentMethod} paymentMethod\n     * @returns {string}\n     */\n    mapToId(paymentMethod) {\n        let { id } = paymentMethod;\n\n        if (paymentMethod.method === MULTI_OPTION) {\n            id = paymentMethod.gateway;\n        }\n\n        if (isBraintreePaymentMethod(id)) {\n            return BRAINTREE;\n        }\n\n        return id;\n    }\n}\n","export default class UrlHelper {\n    /**\n     * @param {Object} config\n     * @param {string} config.host\n     * @returns {CustomerMapper}\n     */\n    static create(config) {\n        return new UrlHelper(config);\n    }\n\n    /**\n     * @param {Object} config\n     * @param {string} config.host\n     * @returns {void}\n     */\n    constructor(config) {\n        /**\n         * @private\n         * @type {Object}\n         */\n        this.config = config;\n    }\n\n    /**\n     * @private\n     * @returns {string}\n     */\n    get host() {\n        return this.config.host;\n    }\n\n    /**\n     * @returns {string}\n     */\n    getOffsitePaymentUrl() {\n        return `${this.host}/pay/initialize`;\n    }\n\n    /**\n     * @returns {string}\n     */\n    getPaymentUrl() {\n        return `${this.host}/api/public/v1/orders/payments`;\n    }\n\n    /**\n     * @returns {string}\n     */\n    getGenerateClientTokenUrl() {\n        return `${this.host}/api/v2/public/payments/client_tokens`;\n    }\n}\n","import deepAssign from 'deep-assign';\nimport objectAssign from 'object-assign';\nimport { POST } from './method-types';\nimport DEFAULT_OPTIONS from './default-options';\nimport PayloadTransformer from './payload-transformer';\nimport RequestFactory from './request-factory';\n\nexport default class RequestSender {\n    /**\n     * @returns {RequestSender}\n     */\n    static create() {\n        const requestFactory = RequestFactory.create();\n        const payloadTransformer = PayloadTransformer.create();\n\n        return new RequestSender(requestFactory, payloadTransformer);\n    }\n\n    /**\n     * @param {RequestFactory} requestFactory\n     * @param {PayloadTransformer} payloadTransformer\n     */\n    constructor(requestFactory, payloadTransformer) {\n        /**\n         * @private\n         * @type {RequestFactory}\n         */\n        this.requestFactory = requestFactory;\n\n        /**\n         * @private\n         * @type {PayloadTransformer}\n         */\n        this.payloadTransformer = payloadTransformer;\n    }\n\n    /**\n     * @param {string} url\n     * @param {Object} data\n     * @param {Object} [options]\n     * @param {Function} [callback]\n     * @returns {void}\n     */\n    sendRequest(url, data, options, callback) {\n        const mergedOptions = deepAssign({}, DEFAULT_OPTIONS, options);\n\n        const xhr = this.requestFactory.createRequest(url, mergedOptions, (error) => {\n            const response = this.payloadTransformer.fromResponse(xhr);\n\n            if (!callback) {\n                return;\n            }\n\n            if (error || !this.isSuccessfulRequest(xhr)) {\n                callback(response);\n                return;\n            }\n\n            callback(null, response);\n        });\n\n        const payload = this.payloadTransformer.toRequest(data, mergedOptions.headers['Content-Type']);\n\n        xhr.send(payload);\n    }\n\n    /**\n     * @param {string} url\n     * @param {Object} data\n     * @param {Object} [options]\n     * @param {Function} [callback]\n     * @returns {void}\n     */\n    postRequest(url, data, options, callback) {\n        const mergedOptions = objectAssign({}, options, {\n            method: POST,\n        });\n\n        this.sendRequest(url, data, mergedOptions, callback);\n    }\n\n    /**\n     * @private\n     * @param {XMLHttpRequest} xhr\n     * @returns {boolean}\n     */\n    isSuccessfulRequest(xhr) {\n        return xhr.status >= 200 && xhr.status < 300;\n    }\n}\n","export const GET = 'GET';\nexport const POST = 'POST';\nexport const DELETE = 'DELETE';\n","import { CookiesStatic } from 'js-cookie';\nimport merge from 'lodash/merge';\n\nimport isPromise from './is-promise';\nimport PayloadTransformer from './payload-transformer';\nimport RequestFactory from './request-factory';\nimport RequestOptions from './request-options';\nimport RequestSenderOptions from './request-sender-options';\nimport Response from './response';\nimport Timeout from './timeout';\n\nexport default class RequestSender {\n    constructor(\n        private _requestFactory: RequestFactory,\n        private _payloadTransformer: PayloadTransformer,\n        private _cookie: CookiesStatic,\n        private _options?: RequestSenderOptions\n    ) {}\n\n    sendRequest<T = any>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        const requestOptions = this._mergeDefaultOptions(options);\n        const request = this._requestFactory.createRequest(this._prependHost(url), requestOptions);\n\n        return new Promise((resolve, reject) => {\n            const requestHandler = () => {\n                const response = this._payloadTransformer.toResponse(request);\n\n                if (response.status >= 200 && response.status < 300) {\n                    resolve(response);\n                } else {\n                    reject(response);\n                }\n            };\n\n            request.onload = requestHandler;\n            request.onerror = requestHandler;\n            request.onabort = requestHandler;\n            request.ontimeout = requestHandler;\n\n            if (requestOptions.timeout instanceof Timeout) {\n                requestOptions.timeout.onComplete(() => request.abort());\n                requestOptions.timeout.start();\n            }\n\n            if (isPromise(requestOptions.timeout)) {\n                requestOptions.timeout.then(() => request.abort());\n            }\n\n            request.send(this._payloadTransformer.toRequestBody(requestOptions));\n        });\n    }\n\n    get<T = any>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        return this.sendRequest(url, { ...options, method: 'GET' });\n    }\n\n    post<T = any>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        return this.sendRequest(url, { ...options, method: 'POST' });\n    }\n\n    put<T = any>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        return this.sendRequest(url, { ...options, method: 'PUT' });\n    }\n\n    patch<T = any>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        return this.sendRequest(url, { ...options, method: 'PATCH' });\n    }\n\n    delete<T = any>(url: string, options?: RequestOptions): Promise<Response<T>> {\n        return this.sendRequest(url, { ...options, method: 'DELETE' });\n    }\n\n    private _mergeDefaultOptions(options?: RequestOptions): RequestOptions {\n        const defaultOptions: Partial<RequestOptions> = {\n            credentials: true,\n            headers: {\n                Accept: 'application/json, text/plain, */*',\n            },\n            method: 'GET',\n        };\n\n        const csrfToken = this._cookie.get('XSRF-TOKEN');\n\n        if (csrfToken && defaultOptions.headers) {\n            defaultOptions.headers['X-XSRF-TOKEN'] = csrfToken;\n        }\n\n        if (options && options.body && defaultOptions.headers) {\n            defaultOptions.headers['Content-Type'] = 'application/json';\n        }\n\n        return merge({}, defaultOptions, options);\n    }\n\n    private _prependHost(url: string): string {\n        if (!this._options || !this._options.host || /^https?:\\/\\//.test(url)) {\n            return url;\n        }\n\n        return `${this._options.host.replace(/\\/$/, '')}/${url.replace(/^\\//, '')}`;\n    }\n}\n","export { default as includes } from './includes';\nexport { default as isNil } from './is-nil';\nexport { default as isObject } from './is-object';\nexport { default as omitEmptyStringAndNil } from './omit-emptystring-and-nil';\nexport { default as omitNil } from './omit-nil';\nexport { default as omitProperty } from './omit-property';\nexport { default as toNumber } from './to-number';\nexport { default as toSnakeCase } from './to-snake-case';\nexport { default as toString } from './to-string';\n","import { merge } from 'lodash';\nimport {\n    defer,\n    from,\n    of,\n    throwError,\n    BehaviorSubject,\n    Observable,\n    Subject,\n    Subscribable,\n    SubscribableOrPromise\n} from 'rxjs';\nimport {\n    catchError,\n    concatMap,\n    distinctUntilChanged,\n    filter,\n    first,\n    map,\n    mergeMap,\n    scan,\n    skip,\n    tap,\n} from 'rxjs/operators';\nimport * as shallowEqual from 'shallowequal';\n\nimport Action from './action';\nimport deepFreeze from './deep-freeze';\nimport DispatchableDataStore, { DispatchableAction, DispatchOptions } from './dispatchable-data-store';\nimport isObservableActionLike from './is-observable-action-like';\nimport noopActionTransformer from './noop-action-transformer';\nimport noopStateTransformer from './noop-state-transformer';\nimport ReadableDataStore, { Filter, Subscriber, SubscribeOptions, Unsubscriber } from './readable-data-store';\nimport Reducer from './reducer';\nimport ThunkAction from './thunk-action';\n\nexport default class DataStore<TState, TAction extends Action = Action, TTransformedState = TState> implements\n    ReadableDataStore<TTransformedState>, DispatchableDataStore<TTransformedState, TAction> {\n    private _reducer: Reducer<TState, TAction>;\n    private _options: DataStoreOptions<TState, TAction, TTransformedState>;\n    private _notification$: Subject<TTransformedState>;\n    private _dispatchers: { [key: string]: Dispatcher<TAction> };\n    private _dispatchQueue$: Subject<Dispatcher<TAction>>;\n    private _state$: BehaviorSubject<TTransformedState>;\n    private _errors: { [key: string]: Subject<Error> };\n\n    constructor(\n        reducer: Reducer<TState, TAction>,\n        initialState: Partial<TState> = {},\n        options?: Partial<DataStoreOptions<TState, TAction, TTransformedState>>\n    ) {\n        this._reducer = reducer;\n        this._options = {\n            actionTransformer: noopActionTransformer,\n            equalityCheck: shallowEqual,\n            shouldWarnMutation: true,\n            stateTransformer: noopStateTransformer,\n            ...options,\n        };\n        this._state$ = new BehaviorSubject(this._options.stateTransformer(initialState as TState));\n        this._notification$ = new Subject();\n        this._dispatchers = {};\n        this._dispatchQueue$ = new Subject();\n        this._errors = {};\n\n        this._dispatchQueue$\n            .pipe(\n                mergeMap(dispatcher$ => dispatcher$.pipe(concatMap(action$ => action$))),\n                filter(action => !!action.type),\n                scan(\n                    (states: StateTuple<TState, TTransformedState>, action: TAction) =>\n                        this._transformStates(states, action),\n                    {\n                        state: initialState as TState,\n                        transformedState: this._state$.getValue(),\n                    }\n                ),\n                distinctUntilChanged(({ state: stateA }, { state: stateB }) =>\n                    this._options.equalityCheck(stateA, stateB)\n                ),\n                map(({ transformedState }) => transformedState)\n            )\n            .subscribe(this._state$);\n\n        this.dispatch({ type: 'INIT' } as TAction);\n    }\n\n    dispatch<TDispatchAction extends TAction>(\n        action: DispatchableAction<TDispatchAction, TTransformedState>,\n        options?: DispatchOptions\n    ): Promise<TTransformedState> {\n        if (isObservableActionLike(action)) {\n            return this._dispatchObservableAction(action, options);\n        }\n\n        if (typeof action === 'function') {\n            return this._dispatchThunkAction(action, options);\n        }\n\n        return this._dispatchAction(action);\n    }\n\n    getState(): TTransformedState {\n        return this._state$.getValue();\n    }\n\n    notifyState(): void {\n        this._notification$.next(this.getState());\n    }\n\n    subscribe(subscriber: Subscriber<TTransformedState>, ...filters: Array<Filter<TTransformedState>>): Unsubscriber;\n    subscribe(subscriber: Subscriber<TTransformedState>, options: SubscribeOptions<TTransformedState>): Unsubscriber;\n    subscribe(subscriber: Subscriber<TTransformedState>, ...args: any[]): Unsubscriber {\n        const options: SubscribeOptions<TTransformedState> = typeof args[0] === 'object' ? args[0] : undefined;\n        const filters: Array<Filter<TTransformedState>> = options ? (options.filters || []) : args;\n\n        let state$: Observable<TTransformedState> = this._state$;\n\n        if (filters.length > 0) {\n            state$ = state$.pipe(\n                distinctUntilChanged((stateA, stateB) =>\n                    filters.every(filterFn =>\n                        this._options.equalityCheck(filterFn(stateA), filterFn(stateB))\n                    )\n                )\n            );\n        }\n\n        if (options && options.initial === false) {\n            state$ = state$.pipe(skip(1));\n        }\n\n        const subscriptions = [\n            state$.subscribe(subscriber),\n            this._notification$.subscribe(subscriber),\n        ];\n\n        return () => subscriptions.forEach(subscription => subscription.unsubscribe());\n    }\n\n    private _transformStates(\n        states: StateTuple<TState, TTransformedState>,\n        action: TAction\n    ): StateTuple<TState, TTransformedState> {\n        try {\n            const newState = this._options.shouldWarnMutation === false ?\n                this._reducer(states.state, action) :\n                deepFreeze(this._reducer(states.state, action), {\n                    equalityCheck: this._options.equalityCheck,\n                    previousValue: states.state,\n                });\n            const transformedState = this._options.stateTransformer(newState);\n\n            return { state: newState, transformedState };\n        } catch (error) {\n            this._getDispatchError(action.meta && action.meta.queueId).next(error);\n\n            return { state: states.state, transformedState: states.transformedState };\n        }\n    }\n\n    private _dispatchAction<TDispatchAction extends TAction>(\n        action: TDispatchAction\n    ): Promise<TTransformedState> {\n        return this._dispatchObservableAction(\n            action.error ? throwError(action) : of(action)\n        );\n    }\n\n    private _dispatchObservableAction<TDispatchAction extends TAction>(\n        action$: SubscribableOrPromise<TDispatchAction>,\n        options: DispatchOptions = {}\n    ): Promise<TTransformedState> {\n        return new Promise((resolve, reject) => {\n            const error$ = this._getDispatchError(options.queueId);\n            const transformedAction$ = this._options.actionTransformer(\n                from(action$).pipe(\n                    map(action =>\n                        options.queueId ?\n                            merge({}, action, { meta: { queueId: options.queueId } }) :\n                            action\n                    )\n                ) as Subscribable<TDispatchAction>\n            );\n\n            this._getDispatcher(options.queueId).next(\n                from(transformedAction$)\n                    .pipe(\n                        map((action, index) => {\n                            if (index === 0) {\n                                error$.pipe(first()).subscribe(reject);\n                            }\n\n                            if (action.error) {\n                                reject(action.payload);\n                            }\n\n                            return action;\n                        }),\n                        catchError(action => {\n                            reject(action instanceof Error ? action : action.payload);\n\n                            return of(action);\n                        }),\n                        tap({\n                            complete: () => {\n                                resolve(this.getState());\n                            },\n                        })\n                    )\n            );\n        });\n    }\n\n    private _dispatchThunkAction<TDispatchAction extends TAction>(\n        thunkAction: ThunkAction<TDispatchAction, TTransformedState>,\n        options: DispatchOptions = {}\n    ): Promise<TTransformedState> {\n        return this._dispatchObservableAction(defer(() => thunkAction(this)), options);\n    }\n\n    private _getDispatcher(queueId: string = 'default'): Dispatcher<TAction> {\n        if (!this._dispatchers[queueId]) {\n            this._dispatchers[queueId] = new Subject();\n\n            this._dispatchQueue$.next(this._dispatchers[queueId]);\n        }\n\n        return this._dispatchers[queueId];\n    }\n\n    private _getDispatchError(queueId: string = 'default'): Subject<Error> {\n        if (!this._errors[queueId]) {\n            this._errors[queueId] = new Subject();\n        }\n\n        return this._errors[queueId];\n    }\n}\n\nexport interface DataStoreOptions<TState, TAction, TTransformedState> {\n    shouldWarnMutation: boolean;\n    actionTransformer(action: Subscribable<TAction>): Subscribable<TAction>;\n    equalityCheck(valueA: any, valueB: any): boolean;\n    stateTransformer(state: TState): TTransformedState;\n}\n\ninterface StateTuple<TState, TTransformedState> {\n    state: TState;\n    transformedState: TTransformedState;\n}\n\ntype Dispatcher<TAction> = Subject<Subscribable<TAction>>;\n","import { isPlainObject } from 'lodash';\nimport * as shallowEqual from 'shallowequal';\n\nexport interface DeepFreezeOptions<T> {\n    previousValue?: T;\n    equalityCheck?(valueA: any, valueB: any): boolean;\n}\n\nexport default function deepFreeze<T>(object: T[], options?: DeepFreezeOptions<T>): ReadonlyArray<T>;\nexport default function deepFreeze<T extends object>(object: T, options?: DeepFreezeOptions<T>): Readonly<T>;\nexport default function deepFreeze<T>(object: T, options?: DeepFreezeOptions<T>): T;\nexport default function deepFreeze<T>(\n    object: T[] | T,\n    options?: DeepFreezeOptions<T>\n): ReadonlyArray<T> | Readonly<T> | T {\n    try {\n        const { equalityCheck = shallowEqual, previousValue = null } = options || {};\n\n        if (equalityCheck(object, previousValue) && Object.isFrozen(previousValue)) {\n            return previousValue as T;\n        }\n\n        if (Object.isFrozen(object) || (!Array.isArray(object) && !isPlainObject(object))) {\n            return object;\n        }\n\n        if (Array.isArray(object)) {\n            return Object.freeze(object.map((value, index) =>\n                deepFreeze(value, {\n                    equalityCheck,\n                    previousValue: Array.isArray(previousValue) ? previousValue[index] : undefined,\n                })\n            ));\n        }\n\n        return Object.freeze(Object.getOwnPropertyNames(object).reduce((result, key) => {\n            result[key as keyof T] = deepFreeze(object[key as keyof T], {\n                equalityCheck,\n                previousValue: previousValue && previousValue.hasOwnProperty(key) ?\n                    (previousValue as any)[key] :\n                    undefined,\n            });\n\n            return result;\n        }, {} as T));\n    } catch (error) {\n        // Browsers that only support ES5 will throw `TypeError` when checking\n        // if a primitive value is frozen or trying to freeze a primitive value.\n        if (error instanceof TypeError) {\n            return object;\n        }\n\n        throw error;\n    }\n}\n","import { assign } from 'lodash';\nimport * as shallowEqual from 'shallowequal';\n\nimport Action from './action';\nimport Reducer from './reducer';\n\nexport default function combineReducers<TState, TAction extends Action = Action>(\n    reducers: ReducerMap<TState, TAction>,\n    options?: CombineReducersOptions\n): Reducer<TState, TAction> {\n    const { equalityCheck = shallowEqual } = options || {};\n\n    return (state, action) =>\n        Object.keys(reducers).reduce((result, key) => {\n            const reducer = reducers[key as keyof TState];\n            const currentState = state ? state[key as keyof TState] : undefined;\n            const newState = reducer(currentState, action);\n\n            if (equalityCheck(currentState, newState) && result) {\n                return result;\n            }\n\n            return assign({}, result, { [key]: newState });\n        }, state || {} as TState);\n}\n\nexport type ReducerMap<TState, TAction extends Action = Action> = {\n    [Key in keyof TState]: Reducer<TState[Key], TAction>;\n};\n\nexport interface CombineReducersOptions {\n    equalityCheck?(valueA: any, valueB: any): boolean;\n}\n","import { omitBy } from 'lodash';\n\nimport Action from './action';\n\nexport default function createAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    payload?: TPayload,\n    meta?: TMeta\n): Action<TPayload, TMeta, TType> {\n    if (typeof type !== 'string' || type === '') {\n        throw new Error('`type` must be a string');\n    }\n\n    return { type, ...omitBy({ payload, meta }, value => value === undefined) };\n}\n","export default class ScriptLoader {\n    private _scripts: { [key: string]: Promise<Event> } = {};\n\n    loadScript(src: string): Promise<Event> {\n        if (!this._scripts[src]) {\n            this._scripts[src] = new Promise((resolve, reject) => {\n                const script = document.createElement('script') as LegacyHTMLScriptElement;\n\n                script.onload = event => resolve(event);\n                script.onreadystatechange = event => resolve(event);\n                script.onerror = event => {\n                    delete this._scripts[src];\n                    reject(event);\n                };\n                script.async = true;\n                script.src = src;\n\n                document.body.appendChild(script);\n            });\n        }\n\n        return this._scripts[src];\n    }\n}\n\ninterface LegacyHTMLScriptElement extends HTMLScriptElement {\n    // `onreadystatechange` is needed to support legacy IE\n    onreadystatechange(this: HTMLElement, event: Event): any;\n}\n","import ScriptLoader from './script-loader';\n\nexport default function createScriptLoader(): ScriptLoader {\n    return new ScriptLoader();\n}\n","import FormBuilder from './form-builder';\nimport FormPosterOptions from './form-poster-options';\nimport { isAbsoluteUrl, joinPaths } from './url-utils';\n\nexport default class FormPoster {\n    /**\n     * @internal\n     */\n    constructor(\n        private _formBuilder: FormBuilder,\n        private _options?: FormPosterOptions\n    ) {}\n\n    postForm(url: string, data: { [key: string]: any }, callback?: () => void): void {\n        const form = this._formBuilder.build(this._prependHost(url), data);\n\n        window.addEventListener('unload', function handleUnload() {\n            window.removeEventListener('unload', handleUnload);\n\n            if (callback) {\n                callback();\n            }\n        });\n\n        // In order to submit the form, the form must be attached to DOM.\n        document.body.appendChild(form);\n        form.submit();\n        document.body.removeChild(form);\n    }\n\n    private _prependHost(url: string): string {\n        if (!this._options || !this._options.host || isAbsoluteUrl(url)) {\n            return url;\n        }\n\n        return joinPaths(this._options.host, url);\n    }\n}\n","export const API = 'PAYMENT_TYPE_API';\nexport const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","/**\n * @param {*} value\n * @returns {boolean}\n */\nexport default function isObject(value) {\n    return value !== null && typeof value === 'object' && !Array.isArray(value);\n}\n","export const APPLICATION_JSON = 'application/json';\n"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 150);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","module.exports = require(\"rxjs\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","module.exports = require(\"@bigcommerce/memoize\");","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n    MissingPaymentToken,\n    MissingShippingAddress,\n    MissingSpamProtectionToken,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentToken:\n        return 'Unable to proceed because the token required to submit a payment is missing.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    case MissingDataErrorType.MissingShippingAddress:\n        return 'Unable to proceed because shipping address data is unavailable.';\n\n    case MissingDataErrorType.MissingSpamProtectionToken:\n        return 'Unable to proceed because spam protection token is not provided.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","module.exports = require(\"rxjs/operators\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken & { instrumentId: string }> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import EmbeddedCheckoutError from './embedded-checkout-error';\nimport EmbeddedContentOptions from './iframe-content/embedded-content-options';\n\nexport enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n    SignedOut = 'SIGNED_OUT',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n    [EmbeddedCheckoutEventType.SignedOut]: EmbeddedCheckoutSignedOutEvent;\n}\n\nexport type EmbeddedCheckoutEvent = (\n    EmbeddedCheckoutCompleteEvent |\n    EmbeddedCheckoutErrorEvent |\n    EmbeddedCheckoutFrameErrorEvent |\n    EmbeddedCheckoutFrameLoadedEvent |\n    EmbeddedCheckoutLoadedEvent |\n    EmbeddedCheckoutSignedOutEvent\n);\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n    payload?: EmbeddedContentOptions;\n}\n\nexport interface EmbeddedCheckoutSignedOutEvent {\n    type: EmbeddedCheckoutEventType.SignedOut;\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum StoreCreditActionType {\n    ApplyStoreCreditRequested = 'APPLY_STORE_CREDIT_REQUESTED',\n    ApplyStoreCreditSucceeded = 'APPLY_STORE_CREDIT_SUCCEEDED',\n    ApplyStoreCreditFailed = 'APPLY_STORE_CREDIT_FAILED',\n}\n\nexport type StoreCreditAction =\n    ApplyStoreCreditAction;\n\nexport type ApplyStoreCreditAction =\n    ApplyStoreCreditRequestedAction |\n    ApplyStoreCreditSucceededAction |\n    ApplyStoreCreditFailedAction;\n\nexport interface ApplyStoreCreditRequestedAction extends Action {\n    type: StoreCreditActionType.ApplyStoreCreditRequested;\n}\n\nexport interface ApplyStoreCreditSucceededAction extends Action<Checkout> {\n    type: StoreCreditActionType.ApplyStoreCreditSucceeded;\n}\n\nexport interface ApplyStoreCreditFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: StoreCreditActionType.ApplyStoreCreditFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { isPlainObject as lodashIsPlainObject } from 'lodash';\n\n// We need this wrapper because Lodash's version doesn't act as a type guard\nexport default function isPlainObject(value: any): value is object {\n    return lodashIsPlainObject(value);\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed because the client library of a payment method is not loaded or ready to be used.');\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","module.exports = require(\"@bigcommerce/script-loader\");","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","module.exports = require(\"shallowequal\");","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","module.exports = require(\"local-storage-fallback\");","module.exports = require(\"reselect\");","import { parseUrl } from '../common/url';\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(\n        targetOrigin: string,\n        private _targetWindow?: Window\n    ) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message becauset target window is not set.');\n        }\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum SpamProtectionActionType {\n    InitializeFailed = 'SPAM_PROTECTION_INITIALIZE_FAILED',\n    InitializeSucceeded = 'SPAM_PROTECTION_INITIALIZE_SUCCEEDED',\n    InitializeRequested = 'SPAM_PROTECTION_INITIALIZE_REQUESTED',\n    ExecuteRequested = 'SPAM_PROTECTION_EXECUTE_REQUESTED',\n    Completed = 'SPAM_PROTECTION_COMPLETED',\n    SubmitFailed = 'SPAM_PROTECTION_SUBMIT_FAILED',\n}\n\nexport type SpamProtectionAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction |\n    ExecuteRequestedAction |\n    CompletedAction |\n    SubmitFailedAction;\n\nexport interface InitializeRequestedAction extends Action {\n    type: SpamProtectionActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: SpamProtectionActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.InitializeFailed;\n}\n\nexport interface ExecuteRequestedAction extends Action {\n    type: SpamProtectionActionType.ExecuteRequested;\n}\n\nexport interface CompletedAction extends Action<string> {\n    type: SpamProtectionActionType.Completed;\n}\n\nexport interface SubmitFailedAction extends Action {\n    type: SpamProtectionActionType.SubmitFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.SpamProtectionNotInitialized:\n        return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to successfully submit a server request\n * using a payment method because the method has invalid configuration or is in\n * an invalid state.\n */\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { memoize } from '@bigcommerce/memoize';\nimport { createSelector as defaultSelectorCreator } from 'reselect';\n\n/**\n * Decorate selector creators with the ability to memoize the return value of\n * their combiner if it is a function (which effectively works as a partially\n * applied combiner).\n */\nexport default function withMemoizedCombiner<T extends typeof defaultSelectorCreator>(\n    creator: T\n): T {\n    return ((...args: any[]) => {\n        const combiner = args.pop();\n\n        // Reselect's default `createSelector` has many overloads. To avoid having\n        // to redefine all of them, we're using `any` to bypass the typechecker.\n        return (creator as any)(...args, (...combinerArgs: any[]) => {\n            // Although there are many overloads, all of them have the last argument\n            // as the combiner.\n            const result = combiner(...combinerArgs);\n\n            if (typeof result === 'function') {\n                return memoize(result);\n            }\n\n            return result;\n        });\n    }) as T;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = (\n    EmbeddedContentStyleConfiguredEvent\n);\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigin: string;\n\n    constructor(\n        sourceOrigin: string\n    ) {\n        this._sourceOrigin = parseUrl(sourceOrigin).origin;\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        listeners.push(listener);\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._sourceOrigin) ||\n            !isIframeEvent(event.data as TEventMap[keyof TEventMap], event.data.type)\n        ) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[key]) => void>;\n};\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'customer.customerGroup',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[];\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n    GooglePayBraintreeSDK,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>;\n        paypal?: Promise<BraintreeDataCollector>;\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * Math.pow(10, this._decimalPlaces));\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    // IE11 returns 80 or 443 for the port number depending on the URL scheme,\n    // even if the port number is not specified in the URL.\n    const port = anchor.port && url.indexOf(`${anchor.hostname}:${anchor.port}`) !== -1 ?\n        anchor.port :\n        '';\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: `${anchor.protocol}//${anchor.hostname}${port ? ':' + port : ''}`,\n        pathname: anchor.pathname,\n        port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from '@bigcommerce/memoize';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(decoratedFn as TFunction);\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                throw new Error('Decorator should be used in functions');\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(_: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this) as T;\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","module.exports = require(\"iframe-resizer\");","module.exports = require(\"iframe-resizer/js/iframeResizer.contentWindow\");","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {} as { [key: string]: any });\n    }\n\n    return object;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig(),\n            defer(async () => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                const { body } = await this._checkoutRequestSender.loadCheckout(context.checkoutId, options);\n\n                return createAction(CheckoutActionType.LoadCheckoutSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { find } from 'lodash';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { CheckoutIncludes } from '../checkout/checkout-params';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = find(lineItems, lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = find(cart.lineItems.physicalItems, lineItem => lineItem.id === itemId);\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if there is an unexpected error and it is not possible to\n * recover from unless the shopper creates a new checkout session.\n */\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.name = 'UnrecoverableError';\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string; message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, {\n    InternalErrorResponseBody,\n    StorefrontErrorResponseBody\n} from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\nimport mapFromInternalErrorResponse from './errors/map-from-internal-error-response';\nimport mapFromPaymentErrorResponse from './errors/map-from-payment-error-response';\nimport mapFromStorefrontErrorResponse from './errors/map-from-storefront-error-response';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): RequestError {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<TState extends { [key: string]: any }, TAction extends Action>(\n    state: TState,\n    action: TAction\n): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, value => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","import isEqual from './is-equal';\n\n/**\n * Replace the current value with a new value if the former is different to the\n * latter.\n */\nexport default function replace<T>(currentValue: T, newValue?: T): T {\n    if (newValue === undefined || isEqual(currentValue, newValue)) {\n        return currentValue;\n    }\n\n    return newValue;\n}\n","import isEqual from './is-equal';\n\n/**\n * Set a new value to an object under a key if the new value is different to the\n * current value of the key.\n */\nexport default function objectSet<T extends { [key: string]: any }, K extends keyof T>(\n    object: T | undefined,\n    key: K,\n    value: T[K]\n): T {\n    if (object && object.hasOwnProperty(key) && isEqual(object[key], value)) {\n        return object;\n    }\n\n    return {\n        ...object as any,\n        [key]: value,\n    };\n}\n","import BillingAddress from './billing-address';\n\nexport default interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport const DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet, replace } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState, DEFAULT_STATE } from './billing-address-state';\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return replace(data, action.payload && action.payload.billingAddress);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(errors, 'continueAsGuestError', undefined);\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return objectSet(errors, 'continueAsGuestError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return objectSet(statuses, 'isContinuingAsGuest', true);\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(statuses, 'isContinuingAsGuest', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { isArray } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\nimport replace from './replace';\n\nexport interface ArrayReplaceOptions {\n    matchObject(objectA: any, objectB: any): boolean;\n}\n\nexport default function arrayReplace<T>(currentArray: T[] | undefined, newArray: T[], options?: ArrayReplaceOptions): T[];\nexport default function arrayReplace<T>(currentArray: T[], newArray?: T[], options?: ArrayReplaceOptions): undefined;\nexport default function arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined;\nexport default function arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined {\n    const { matchObject = (a: any, b: any) => a.id === b.id } = options || {};\n\n    // Return the new array if the current array does not exist\n    if (!currentArray) {\n        return newArray;\n    }\n\n    // If the new array does not exist, or the current array is strictly equal\n    // to the new array, exit early and return the current array so that the\n    // object reference doesn't change\n    if (!newArray || currentArray === newArray) {\n        return currentArray;\n    }\n\n    // Otherwise, try to replace the items of the current array with the new\n    // array. If the item from the two arrays are the same, keep the current\n    // one. Do it recursively until all arrays are replaced.\n    let sameAsCurrentCount = 0;\n    let sameAsNewCount = 0;\n\n    const countSameAsReplaced = <T>(replacedValue: T, currentValue: T, newValue: T): T => {\n        sameAsCurrentCount += replacedValue === currentValue ? 1 : 0;\n        sameAsNewCount += replacedValue === newValue ? 1 : 0;\n\n        return replacedValue;\n    };\n\n    const result = newArray.map((newItem, index) => {\n        const currentItem = currentArray && currentArray[index];\n\n        if (isPlainObject(currentItem) && isPlainObject(newItem)) {\n            if (matchObject(currentItem, newItem)) {\n                return countSameAsReplaced(\n                    objectMerge(currentItem, newItem),\n                    currentItem,\n                    newItem\n                );\n            }\n\n            return countSameAsReplaced(\n                replace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        if (isArray(currentItem) && isArray(newItem)) {\n            return countSameAsReplaced(\n                arrayReplace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        return countSameAsReplaced(\n            replace(currentItem, newItem),\n            currentItem,\n            newItem\n        );\n    }) as T[];\n\n    // If all items in the result are identical to the current array, and the\n    // current array and the new array have the same size, simply return the\n    // current array instead of the result.\n    if (sameAsCurrentCount === newArray.length && (currentArray && currentArray.length === newArray.length)) {\n        return currentArray;\n    }\n\n    // If all items in the result are identical to the new array, simply return\n    // the new array.\n    if (sameAsNewCount === newArray.length) {\n        return newArray;\n    }\n\n    return result;\n}\n","import { isArray } from 'lodash';\n\nimport arrayReplace from './array-replace';\nimport isPlainObject from './is-plain-object';\nimport objectSet from './object-set';\n\nexport default function objectMerge<T extends object>(currentObject: T, newObject?: Partial<T>): T;\nexport default function objectMerge<T extends object>(currentObject: T | undefined, newObject: Partial<T>): Partial<T>;\nexport default function objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | undefined;\nexport default function objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | Partial<T> | undefined {\n    if (!currentObject) {\n        return newObject;\n    }\n\n    // If the new object does not exist but the current object does, or the new\n    // object is strictly equal to the current object, return the current object\n    if (!newObject || currentObject === newObject) {\n        return currentObject;\n    }\n\n    // If both objects exist, but some values might be different, perform a merge.\n    // Retain values that are equal and only replace them with the new values if\n    // they are different.\n    return (Object.keys(newObject) as Array<keyof T>)\n        .reduce((result, key) => {\n            const currentValue = result[key];\n            const newValue = newObject[key];\n\n            if (isPlainObject(currentValue) && isPlainObject(newValue)) {\n                return objectSet(result, key, objectMerge(currentValue, newValue));\n            }\n\n            if (isArray(currentValue) && isArray(newValue)) {\n                return objectSet(result, key, arrayReplace(currentValue, newValue) as any);\n            }\n\n            return objectSet(result, key, newValue as any);\n        }, currentObject);\n}\n","import Cart from './cart';\n\nexport default interface CartState {\n    data?: Cart;\n    errors: CartErrorsState;\n    statuses: CartStatusesState;\n}\n\nexport interface CartErrorsState {\n    loadError?: Error;\n}\n\nexport interface CartStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState, DEFAULT_STATE } from './cart-state';\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectMerge(data, action.payload && action.payload.cart);\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n","import { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonState {\n    data: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonDataState | undefined\n    };\n    errors: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonErrorsState | undefined\n    };\n    statuses: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonStatusesState | undefined\n    };\n}\n\nexport interface CheckoutButtonDataState {\n    initializedContainers: {\n        [key: string]: boolean;\n    };\n}\n\nexport interface CheckoutButtonErrorsState {\n    initializeError?: Error;\n    deinitializeError?: Error;\n}\n\nexport interface CheckoutButtonStatusesState {\n    isInitializing?: boolean;\n    isDeinitializing?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonDataState, CheckoutButtonErrorsState, CheckoutButtonStatusesState, DEFAULT_STATE } from './checkout-button-state';\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonDataState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        if (!action.meta || !action.meta.containerId) {\n            return data;\n        }\n\n        return objectMerge(data, {\n            initializedContainers: {\n                [action.meta.containerId]: true,\n            },\n        });\n\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(data, 'initializedContainers', {});\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(errors, 'initializeError', undefined);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return objectSet(errors, 'initializeError', action.payload);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(errors, 'deinitializeError', undefined);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return objectSet(errors, 'deinitializeError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return objectSet(statuses, 'isInitializing', true);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(statuses, 'isInitializing', false);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return objectSet(statuses, 'isDeinitializing', true);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(statuses, 'isDeinitializing', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Config from './config';\n\nexport default interface ConfigState {\n    data?: Config;\n    meta?: ConfigMetaState;\n    errors: ConfigErrorsState;\n    statuses: ConfigStatusesState;\n}\n\nexport interface ConfigMetaState {\n    externalSource?: string;\n}\n\nexport interface ConfigErrorsState {\n    loadError?: Error;\n}\n\nexport interface ConfigStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState, DEFAULT_STATE } from './config-state';\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport Coupon from './coupon';\n\nexport default interface CouponState {\n    data?: Coupon[];\n    errors: CouponErrorsState;\n    statuses: CouponStatusesState;\n}\n\nexport interface CouponErrorsState {\n    applyCouponError?: RequestError<StorefrontErrorResponseBody>;\n    removeCouponError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface CouponStatusesState {\n    isApplyingCoupon?: boolean;\n    isRemovingCoupon?: boolean;\n}\n\nexport const DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState, DEFAULT_STATE } from './coupon-state';\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return arrayReplace(data, action.payload && action.payload.coupons);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return objectSet(errors, 'applyCouponError', undefined);\n\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(errors, 'applyCouponError', action.payload);\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return objectSet(errors, 'removeCouponError', undefined);\n\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(errors, 'removeCouponError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return objectSet(statuses, 'isApplyingCoupon', true);\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(statuses, 'isApplyingCoupon', false);\n\n    case CouponActionType.RemoveCouponRequested:\n        return objectSet(statuses, 'isRemovingCoupon', true);\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(statuses, 'isRemovingCoupon', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport GiftCertificate from './gift-certificate';\n\nexport default interface GiftCertificateState {\n    data?: GiftCertificate[];\n    errors: GiftCertificateErrorsState;\n    statuses: GiftCertificateStatusesState;\n}\n\nexport interface GiftCertificateErrorsState {\n    applyGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n    removeGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface GiftCertificateStatusesState {\n    isApplyingGiftCertificate?: boolean;\n    isRemovingGiftCertificate?: boolean;\n}\n\nexport const DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { DEFAULT_STATE, GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return arrayReplace(data, action.payload && action.payload.giftCertificates);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return objectSet(errors, 'applyGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(errors, 'applyGiftCertificateError', action.payload);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectSet(errors, 'removeGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(errors, 'removeGiftCertificateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return objectSet(statuses, 'isApplyingGiftCertificate', true);\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(statuses, 'isApplyingGiftCertificate', false);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return objectSet(statuses, 'isRemovingGiftCertificate', true);\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(statuses, 'isRemovingGiftCertificate', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Customer from './customer';\n\nexport default interface CustomerState {\n    data?: Customer;\n}\n\nexport const DEFAULT_STATE: CustomerState = {};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { objectMerge } from '../common/utility';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectMerge(data, action.payload && action.payload.customer);\n\n    default:\n        return data;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyDataState, CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction\n): CustomerStrategyDataState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(errors, {\n            signInError: undefined,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n        return objectMerge(errors, {\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(errors, {\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return objectMerge(errors, {\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n        return objectMerge(statuses, {\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(statuses, {\n            isSigningIn: false,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return objectMerge(statuses, {\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(statuses, {\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         });\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         });\n\n    default:\n        return statuses;\n    }\n}\n","import Country from './country';\n\nexport default interface CountryState {\n    data?: Country[];\n    errors: CountryErrorsState;\n    statuses: CountryStatusesState;\n}\n\nexport interface CountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface CountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState, DEFAULT_STATE } from './country-state';\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport { InternalOrderMeta, InternalOrderPayment } from './internal-order';\nimport Order from './order';\n\nexport default interface OrderState {\n    data?: OrderDataState;\n    meta?: OrderMetaState;\n    errors: OrderErrorsState;\n    statuses: OrderStatusesState;\n}\n\nexport type OrderDataState = Omit<Order, 'billingAddress' | 'coupons'>;\n\nexport interface OrderMetaState extends InternalOrderMeta {\n    token?: string;\n    orderToken?: string;\n    callbackUrl?: string;\n    payment?: InternalOrderPayment;\n    spamProtectionToken?: string;\n}\n\nexport interface OrderErrorsState {\n    loadError?: Error;\n    submitError?: Error;\n    finalizeError?: Error;\n}\n\nexport interface OrderStatusesState {\n    isLoading?: boolean;\n    isSubmitting?: boolean;\n    isFinalizing?: boolean;\n}\n\nexport const DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { DEFAULT_STATE, OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection';\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return objectMerge(data, omit(action.payload, ['billingAddress', 'coupons'])) as OrderDataState;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction | SpamProtectionAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectMerge(meta, {\n            ...action.meta,\n            callbackUrl: action.payload && action.payload.order.callbackUrl,\n            orderToken: action.payload && action.payload.order.token,\n            payment: action.payload && action.payload.order && action.payload.order.payment,\n        });\n\n    case SpamProtectionActionType.Completed:\n        return objectSet(meta, 'spamProtectionToken', action.payload);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport default interface PaymentMethodState {\n    data?: PaymentMethod[];\n    meta?: PaymentMethodMeta;\n    errors: PaymentMethodErrorsState;\n    statuses: PaymentMethodStatusesState;\n}\n\nexport interface PaymentMethodErrorsState {\n    loadMethodId?: string;\n    loadError?: Error;\n    loadMethodError?: Error;\n}\n\nexport interface PaymentMethodStatusesState {\n    loadMethodId?: string;\n    isLoading?: boolean;\n    isLoadingMethod?: boolean;\n}\n\nexport const DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, mergeOrPush, objectMerge, objectSet } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE, PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return mergeOrPush(data || [], action.payload, action.payload && {\n            id: action.payload.id,\n            gateway: action.payload.gateway,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return arrayReplace(data, action.payload, {\n            matchObject: (methodA, methodB) => (\n                methodA.id === methodB.id && methodA.gateway === methodB.gateway\n            ),\n        });\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return objectMerge(errors, {\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(errors, {\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return objectMerge(statuses, {\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(statuses, {\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { findIndex, pick, pickBy, ValueKeyIteratee } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item?: T,\n    predicate?: ValueKeyIteratee<T>\n): T[] {\n    if (!item) {\n        return array;\n    }\n\n    const defaultPredicate = pick(item, 'id');\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : (predicate || defaultPredicate));\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        const existingItem = array[index];\n\n        newArray[index] = isPlainObject(existingItem) && isPlainObject(item) ?\n            objectMerge(existingItem, item) :\n            item;\n    }\n\n    return newArray;\n}\n","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyDataState, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction\n): PaymentStrategyDataState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(errors, {\n            executeError: undefined,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return objectMerge(errors, {\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(errors, {\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return objectMerge(errors, {\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return objectMerge(statuses, {\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(statuses, {\n            isExecuting: false,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return objectMerge(statuses, {\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(statuses, {\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import Instrument, { VaultAccessToken } from './instrument';\n\nexport default interface InstrumentState {\n    data?: Instrument[];\n    meta?: InstrumentMeta;\n    errors: InstrumentErrorState;\n    statuses: InstrumentStatusState;\n}\n\nexport interface InstrumentErrorState {\n    deleteError?: Error;\n    failedInstrument?: string;\n    loadError?: Error;\n    vaultError?: Error;\n}\n\nexport interface InstrumentStatusState {\n    isDeleting?: boolean;\n    isLoading?: boolean;\n    isVaulting?: boolean;\n    deletingInstrument?: string;\n}\n\nexport type InstrumentMeta = VaultAccessToken;\n\nexport const DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../../common/utility';\n\nimport Instrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { DEFAULT_STATE, InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Instrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): Instrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return arrayReplace(data, action.payload && action.payload.vaultedInstruments || []);\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return arrayReplace(data, data.filter(instrument =>\n            instrument.bigpayToken !== (action.meta && action.meta.instrumentId)\n        ));\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(errors, {\n            deleteError: undefined,\n            failedInstrument: undefined,\n        });\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(errors, {\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return objectMerge(statuses, {\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        });\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(statuses, {\n            isDeleting: false,\n            deletingInstrument: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { AmazonPayRemoteCheckout } from './methods';\n\nexport default interface RemoteCheckoutState {\n    data: RemoteCheckoutStateData;\n}\n\nexport interface RemoteCheckoutStateData {\n    amazon?: AmazonPayRemoteCheckout;\n}\n\nexport const DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return objectSet(data, 'billing' as any, action.payload && action.payload.billing);\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return objectSet(data, 'shipping' as any, action.payload && action.payload.shipping);\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return objectSet(data, 'settings', action.payload);\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n","import Consignment from './consignment';\n\nexport default interface ConsignmentState {\n    data?: Consignment[];\n    errors: ConsignmentErrorsState;\n    statuses: ConsignmentStatusesState;\n}\n\nexport interface ConsignmentErrorsState {\n    loadError?: Error;\n    loadShippingOptionsError?: Error;\n    createError?: Error;\n    updateError: { [key: string]: Error | undefined };\n    deleteError: { [key: string]: Error | undefined };\n    updateShippingOptionError: { [key: string]: Error | undefined };\n}\n\nexport interface ConsignmentStatusesState {\n    isLoading?: boolean;\n    isLoadingShippingOptions?: boolean;\n    isCreating?: boolean;\n    isUpdating: { [key: string]: boolean };\n    isDeleting: { [key: string]: boolean };\n    isUpdatingShippingOption: { [key: string]: boolean };\n}\n\nexport const DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState, DEFAULT_STATE } from './consignment-state';\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n        return arrayReplace(data, action.payload && action.payload.consignments);\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return arrayReplace(data, []);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return objectSet(errors, 'createError', undefined);\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(errors, 'createError', action.payload);\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(statuses, 'isLoadingShippingOptions', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(statuses, 'isLoadingShippingOptions', false);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return objectSet(statuses, 'isCreating', true);\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(statuses, 'isCreating', false);\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { Country } from '../geography';\n\nexport default interface ShippingCountryState {\n    data?: Country[];\n    errors: ShippingCountryErrorsState;\n    statuses: ShippingCountryStatusesState;\n}\n\nexport interface ShippingCountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface ShippingCountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { DEFAULT_STATE, ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyDataState, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction\n): ShippingStrategyDataState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(errors, {\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return objectMerge(errors, {\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(errors, {\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return objectMerge(errors, {\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return objectMerge(statuses, {\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(statuses, {\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return objectMerge(statuses, {\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(statuses, {\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditState, { StoreCreditErrorsState, StoreCreditStatusesState } from './store-credit-state';\n\nconst DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function storeCreditReducer(\n    state: StoreCreditState = DEFAULT_STATE,\n    action: Action\n): StoreCreditState {\n    const reducer = combineReducers<StoreCreditState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: StoreCreditErrorsState = DEFAULT_STATE.errors,\n    action: StoreCreditAction\n): StoreCreditErrorsState {\n    switch (action.type) {\n    case StoreCreditActionType.ApplyStoreCreditRequested:\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n        return objectSet(errors, 'applyError', undefined);\n\n    case StoreCreditActionType.ApplyStoreCreditFailed:\n        return objectSet(errors, 'applyError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: StoreCreditStatusesState = DEFAULT_STATE.statuses,\n    action: StoreCreditAction\n): StoreCreditStatusesState {\n    switch (action.type) {\n    case StoreCreditActionType.ApplyStoreCreditRequested:\n        return objectSet(statuses, 'isApplying', true);\n\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n    case StoreCreditActionType.ApplyStoreCreditFailed:\n        return objectSet(statuses, 'isApplying', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport Checkout from './checkout';\n\nexport default interface CheckoutState {\n    data?: CheckoutDataState;\n    errors: CheckoutErrorsState;\n    statuses: CheckoutStatusesState;\n}\n\nexport type CheckoutDataState = Omit<Checkout, 'billingAddress' | 'cart' | 'consignments' | 'coupons' | 'giftCertificates'>;\n\nexport interface CheckoutErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n}\n\nexport interface CheckoutStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\nimport { StoreCreditAction, StoreCreditActionType } from '../store-credit/store-credit-actions';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState, DEFAULT_STATE } from './checkout-state';\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction |\n        GiftCertificateAction | OrderAction | StoreCreditAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectMerge(data, omit(action.payload, [\n            'billingAddress',\n            'cart',\n            'consignments',\n            'customer',\n            'coupons',\n            'giftCertificates',\n        ])) as CheckoutDataState;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectSet(data, 'orderId', action.payload && action.payload.order.orderId) ;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends object, TMap extends { [key: string]: T }>(map: TMap): TMap {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as { [key: string]: T }) as TMap;\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport default interface StoreCreditState {\n    errors: StoreCreditErrorsState;\n    statuses: StoreCreditStatusesState;\n}\n\nexport interface StoreCreditErrorsState {\n    applyError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface StoreCreditStatusesState {\n    isApplying?: boolean;\n}\n\nexport const DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n","import { createBillingAddressSelectorFactory } from '../billing';\nimport { createCartSelectorFactory } from '../cart/cart-selector';\nimport { createCheckoutButtonSelectorFactory } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { createConfigSelectorFactory } from '../config';\nimport { createCouponSelectorFactory, createGiftCertificateSelectorFactory } from '../coupon';\nimport { createCustomerSelectorFactory, createCustomerStrategySelectorFactory } from '../customer';\nimport { createFormSelectorFactory } from '../form';\nimport { createCountrySelectorFactory } from '../geography';\nimport { createOrderSelectorFactory } from '../order';\nimport { createPaymentMethodSelectorFactory, createPaymentSelectorFactory, createPaymentStrategySelectorFactory } from '../payment';\nimport { createInstrumentSelectorFactory } from '../payment/instrument';\nimport { createRemoteCheckoutSelectorFactory } from '../remote-checkout';\nimport { createConsignmentSelectorFactory, createShippingAddressSelectorFactory, createShippingCountrySelectorFactory, createShippingStrategySelectorFactory } from '../shipping';\nimport { createStoreCreditSelectorFactory } from '../store-credit/store-credit-selector';\n\nimport { createCheckoutSelectorFactory } from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type InternalCheckoutSelectorsFactory = (\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n) => InternalCheckoutSelectors;\n\nexport function createInternalCheckoutSelectorsFactory(): InternalCheckoutSelectorsFactory {\n    const createBillingAddressSelector = createBillingAddressSelectorFactory();\n    const createCartSelector = createCartSelectorFactory();\n    const createCheckoutButtonSelector = createCheckoutButtonSelectorFactory();\n    const createConfigSelector = createConfigSelectorFactory();\n    const createCountrySelector = createCountrySelectorFactory();\n    const createCouponSelector = createCouponSelectorFactory();\n    const createCustomerSelector = createCustomerSelectorFactory();\n    const createCustomerStrategySelector = createCustomerStrategySelectorFactory();\n    const createGiftCertificateSelector = createGiftCertificateSelectorFactory();\n    const createInstrumentSelector = createInstrumentSelectorFactory();\n    const createFormSelector = createFormSelectorFactory();\n    const createPaymentMethodSelector = createPaymentMethodSelectorFactory();\n    const createPaymentStrategySelector = createPaymentStrategySelectorFactory();\n    const createRemoteCheckoutSelector = createRemoteCheckoutSelectorFactory();\n    const createShippingAddressSelector = createShippingAddressSelectorFactory();\n    const createShippingCountrySelector = createShippingCountrySelectorFactory();\n    const createShippingStrategySelector = createShippingStrategySelectorFactory();\n    const createConsignmentSelector = createConsignmentSelectorFactory();\n    const createCheckoutSelector = createCheckoutSelectorFactory();\n    const createOrderSelector = createOrderSelectorFactory();\n    const createPaymentSelector = createPaymentSelectorFactory();\n    const createStoreCreditSelector = createStoreCreditSelectorFactory();\n\n    return (state, options = {}) => {\n        const billingAddress = createBillingAddressSelector(state.billingAddress);\n        const cart = createCartSelector(state.cart);\n        const checkoutButton = createCheckoutButtonSelector(state.checkoutButton);\n        const config = createConfigSelector(state.config);\n        const countries = createCountrySelector(state.countries);\n        const coupons = createCouponSelector(state.coupons);\n        const customer = createCustomerSelector(state.customer);\n        const customerStrategies = createCustomerStrategySelector(state.customerStrategies);\n        const form = createFormSelector(state.config);\n        const giftCertificates = createGiftCertificateSelector(state.giftCertificates);\n        const instruments = createInstrumentSelector(state.instruments);\n        const paymentMethods = createPaymentMethodSelector(state.paymentMethods);\n        const paymentStrategies = createPaymentStrategySelector(state.paymentStrategies);\n        const remoteCheckout = createRemoteCheckoutSelector(state.remoteCheckout);\n        const shippingAddress = createShippingAddressSelector(state.consignments);\n        const shippingCountries = createShippingCountrySelector(state.shippingCountries);\n        const shippingStrategies = createShippingStrategySelector(state.shippingStrategies);\n        const storeCredit = createStoreCreditSelector(state.storeCredit);\n\n        // Compose selectors\n        const consignments = createConsignmentSelector(state.consignments, cart);\n        const checkout = createCheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n        const order = createOrderSelector(state.order, billingAddress, coupons);\n        const payment = createPaymentSelector(checkout, order);\n\n        const selectors = {\n            billingAddress,\n            cart,\n            checkout,\n            checkoutButton,\n            config,\n            consignments,\n            countries,\n            coupons,\n            customer,\n            customerStrategies,\n            form,\n            giftCertificates,\n            instruments,\n            order,\n            payment,\n            paymentMethods,\n            paymentStrategies,\n            remoteCheckout,\n            shippingAddress,\n            shippingCountries,\n            shippingStrategies,\n            storeCredit,\n        };\n\n        return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n    };\n}\n\nexport default function createInternalCheckoutSelectors(\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n): InternalCheckoutSelectors {\n    return createInternalCheckoutSelectorsFactory()(state, options);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState, { DEFAULT_STATE } from './billing-address-state';\n\nexport default interface BillingAddressSelector {\n    getBillingAddress(): BillingAddress | undefined;\n    getUpdateError(): Error | undefined;\n    getContinueAsGuestError(): Error | undefined;\n    getLoadError(): Error | undefined;\n    isUpdating(): boolean;\n    isContinuingAsGuest(): boolean;\n    isLoading(): boolean;\n}\n\nexport type BillingAddressSelectorFactory = (state: BillingAddressState) => BillingAddressSelector;\n\nexport function createBillingAddressSelectorFactory(): BillingAddressSelectorFactory {\n    const getBillingAddress = createSelector(\n        (state: BillingAddressState) => state.data,\n        data => () => data\n    );\n\n    const getUpdateError = createSelector(\n        (state: BillingAddressState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const getContinueAsGuestError = createSelector(\n        (state: BillingAddressState) => state.errors.continueAsGuestError,\n        error => () => error\n    );\n\n    const getLoadError = createSelector(\n        (state: BillingAddressState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isUpdating = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isUpdating,\n        status => () => status\n    );\n\n    const isContinuingAsGuest = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isContinuingAsGuest,\n        status => () => status\n    );\n\n    const isLoading = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: BillingAddressState = DEFAULT_STATE\n    ): BillingAddressSelector => {\n        return {\n            getBillingAddress: getBillingAddress(state),\n            getUpdateError: getUpdateError(state),\n            getContinueAsGuestError: getContinueAsGuestError(state),\n            getLoadError: getLoadError(state),\n            isUpdating: isUpdating(state),\n            isContinuingAsGuest: isContinuingAsGuest(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoize, memoizeOne } from '@bigcommerce/memoize';\nimport { find, some, values } from 'lodash';\n\nimport { createSelector } from '../common/selector';\n\nimport CheckoutButtonState, { DEFAULT_STATE } from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonSelector {\n    getState(): CheckoutButtonState;\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean;\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean;\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean;\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n}\n\nexport type CheckoutButtonSelectorFactory = (state: CheckoutButtonState) => CheckoutButtonSelector;\n\nexport function createCheckoutButtonSelectorFactory(): CheckoutButtonSelectorFactory {\n    const getState = createSelector(\n        (state: CheckoutButtonState) => state,\n        state => () => state\n    );\n\n    const isInitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isInitializing) === true;\n            }\n\n            return some(statuses, { isInitializing: true });\n        })\n    );\n\n    const isInitialized = createSelector(\n        (state: CheckoutButtonState) => state.data,\n        data => memoize((methodId: CheckoutButtonMethodType, containerId?: string) => {\n            const method = data[methodId];\n\n            if (!method) {\n                return false;\n            }\n\n            if (!containerId) {\n                return some(method.initializedContainers, isInitialized => isInitialized === true);\n            }\n\n            return method.initializedContainers[containerId] === true;\n        })\n    );\n\n    const isDeinitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isDeinitializing) === true;\n            }\n\n            return some(statuses, { isDeinitializing: true });\n        })\n    );\n\n    const getInitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.initializeError));\n\n            return method && method.initializeError;\n        })\n    );\n\n    const getDeinitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.deinitializeError));\n\n            return method && method.deinitializeError;\n        })\n    );\n\n    return memoizeOne((\n        state: CheckoutButtonState = DEFAULT_STATE\n    ): CheckoutButtonSelector => {\n        return {\n            getState: getState(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isDeinitializing: isDeinitializing(state),\n            getInitializeError: getInitializeError(state),\n            getDeinitializeError: getDeinitializeError(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState, { DEFAULT_STATE } from './coupon-state';\n\nexport default interface CouponSelector {\n    getCoupons(): Coupon[] | undefined;\n    getRemoveError(): RequestError | undefined;\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type CouponSelectorFactory = (state: CouponState) => CouponSelector;\n\nexport function createCouponSelectorFactory(): CouponSelectorFactory {\n    const getCoupons = createSelector(\n        (state: CouponState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: CouponState) => state.errors.removeCouponError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: CouponState) => state.errors.applyCouponError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: CouponState) => !!state.statuses.isApplyingCoupon,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: CouponState) => !!state.statuses.isRemovingCoupon,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CouponState = DEFAULT_STATE\n    ): CouponSelector => {\n        return {\n            getCoupons: getCoupons(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default interface CustomerSelector {\n    getCustomer(): Customer | undefined;\n}\n\nexport type CustomerSelectorFactory = (state: CustomerState) => CustomerSelector;\n\nexport function createCustomerSelectorFactory(): CustomerSelectorFactory {\n    const getCustomer = createSelector(\n        (state: CustomerState) => state.data,\n        customer => () => customer\n    );\n\n    return memoizeOne((\n        state: CustomerState = DEFAULT_STATE\n    ): CustomerSelector => {\n        return {\n            getCustomer: getCustomer(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default interface RemoteCheckoutSelector {\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined;\n}\n\nexport type RemoteCheckoutSelectorFactory = (state: RemoteCheckoutState) => RemoteCheckoutSelector;\n\nexport function createRemoteCheckoutSelectorFactory(): RemoteCheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: RemoteCheckoutState) => state.data,\n        data => <TMethodId extends keyof RemoteCheckoutStateData>(methodId: TMethodId) => {\n            return data[methodId];\n        }\n    );\n\n    return memoizeOne((\n        state: RemoteCheckoutState = DEFAULT_STATE\n    ): RemoteCheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { Address } from '../address';\nimport { createSelector } from '../common/selector';\n\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\n\nexport default interface ShippingAddressSelector {\n    getShippingAddress(): Address | undefined;\n}\n\nexport type ShippingAddressSelectorFactory = (state: ConsignmentState) => ShippingAddressSelector;\n\nexport function createShippingAddressSelectorFactory(): ShippingAddressSelectorFactory {\n    const getShippingAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (!consignments || !consignments[0]) {\n                return;\n            }\n\n            return consignments[0].shippingAddress;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE\n    ): ShippingAddressSelector => {\n        return {\n            getShippingAddress: getShippingAddress(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { CheckoutSelector } from '../checkout';\nimport { createSelector } from '../common/selector';\nimport { GatewayOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\nexport default interface PaymentSelector {\n    getPaymentId(): { providerId: string; gatewayId?: string } | undefined;\n    getPaymentStatus(): string | undefined;\n    getPaymentToken(): string | undefined;\n    getPaymentRedirectUrl(): string | undefined;\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean;\n}\n\nexport type PaymentSelectorFactory = (\n    checkout: CheckoutSelector,\n    order: OrderSelector\n) => PaymentSelector;\n\ninterface PaymentSelectorDependencies {\n    checkout: CheckoutSelector;\n    order: OrderSelector;\n}\n\nexport function createPaymentSelectorFactory(): PaymentSelectorFactory {\n    const getInternalPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.payment;\n        }\n    );\n\n    const getGatewayPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrder,\n        getOrder => () => {\n            const order = getOrder();\n\n            return find(order && order.payments, ({ providerId }) =>\n                providerId !== 'giftcertificate' && providerId !== 'storecredit'\n            ) as GatewayOrderPayment;\n        }\n    );\n\n    const getHostedPayment = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getCheckout,\n        getCheckout => () => {\n            const checkout = getCheckout();\n\n            return find(checkout && checkout.payments, ({ providerType }) =>\n                providerType === HOSTED\n            );\n        }\n    );\n\n    const getPaymentId = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.id) {\n                return {\n                    providerId: internalPayment.id,\n                    gatewayId: internalPayment.gateway,\n                };\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment && payment.providerId) {\n                return {\n                    providerId: payment.providerId,\n                    gatewayId: payment.gatewayId,\n                };\n            }\n        }\n    );\n\n    const getPaymentStatus = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.status) {\n                return internalPayment.status.replace('PAYMENT_STATUS_', '');\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment) {\n                return payment.detail.step;\n            }\n        }\n    );\n\n    const getPaymentToken = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.token;\n        }\n    );\n\n    const getPaymentRedirectUrl = createSelector(\n        getInternalPayment,\n        getInternalPayment => () => {\n            const payment = getInternalPayment();\n\n            return payment && payment.redirectUrl;\n        }\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getOutstandingBalance,\n        getOutstandingBalance => (useStoreCredit: boolean = false) => {\n            const grandTotal = getOutstandingBalance(useStoreCredit);\n\n            return grandTotal ? grandTotal > 0 : false;\n        }\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        getPaymentStatus,\n        getPaymentStatus => (paymentMethod?: PaymentMethod) => {\n            if (paymentMethod && paymentMethod.nonce) {\n                return true;\n            }\n\n            return getPaymentStatus() === ACKNOWLEDGE || getPaymentStatus() === FINALIZE;\n        }\n    );\n\n    return memoizeOne((\n        checkout: CheckoutSelector,\n        order: OrderSelector\n    ): PaymentSelector => {\n        return {\n            getPaymentId: getPaymentId({ checkout, order }),\n            getPaymentStatus: getPaymentStatus({ checkout, order }),\n            getPaymentToken: getPaymentToken({ checkout, order }),\n            getPaymentRedirectUrl: getPaymentRedirectUrl({ checkout, order }),\n            isPaymentDataRequired: isPaymentDataRequired({ checkout, order }),\n            isPaymentDataSubmitted: isPaymentDataSubmitted({ checkout, order }),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState, { DEFAULT_STATE } from './cart-state';\n\nexport default interface CartSelector {\n    getCart(): Cart | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CartSelectorFactory = (state: CartState) => CartSelector;\n\nexport function createCartSelectorFactory() {\n    const getCart = createSelector(\n        (state: CartState) => state.data,\n        cart => () => cart\n    );\n\n    const getLoadError = createSelector(\n        (state: CartState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CartState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CartState = DEFAULT_STATE\n    ): CartSelector => {\n        return {\n            getCart: getCart(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState, { DEFAULT_STATE } from './config-state';\n\nexport default interface ConfigSelector {\n    getConfig(): Config | undefined;\n    getStoreConfig(): StoreConfig | undefined;\n    getContextConfig(): ContextConfig | undefined;\n    getExternalSource(): string | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ConfigSelectorFactory = (state: ConfigState) => ConfigSelector;\n\nexport function createConfigSelectorFactory(): ConfigSelectorFactory {\n\n    const getConfig = createSelector(\n        (state: ConfigState) => state.data,\n        data => () => data\n    );\n\n    const getStoreConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.storeConfig,\n        data => () => data\n    );\n\n    const getContextConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.context,\n        data => () => data\n    );\n\n    const getExternalSource = createSelector(\n        (state: ConfigState) => state.meta && state.meta.externalSource,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ConfigState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ConfigState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE\n    ): ConfigSelector => {\n        return {\n            getConfig: getConfig(state),\n            getStoreConfig: getStoreConfig(state),\n            getContextConfig: getContextConfig(state),\n            getExternalSource: getExternalSource(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState, { DEFAULT_STATE } from './country-state';\n\nexport default interface CountrySelector {\n    getCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CountrySelectorFactory = (state: CountryState) => CountrySelector;\n\nexport function createCountrySelectorFactory(): CountrySelectorFactory {\n    const getCountries = createSelector(\n        (state: CountryState) => state.data,\n        countries => () => countries\n    );\n\n    const getLoadError = createSelector(\n        (state: CountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CountryState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CountryState = DEFAULT_STATE\n    ): CountrySelector => {\n        return {\n            getCountries: getCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport CustomerStrategyState, { DEFAULT_STATE } from './customer-strategy-state';\n\nexport default interface CustomerStrategySelector {\n    getSignInError(methodId?: string): Error | undefined;\n    getSignOutError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isSigningIn(methodId?: string): boolean;\n    isSigningOut(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type CustomerStrategySelectorFactory = (state: CustomerStrategyState) => CustomerStrategySelector;\n\nexport function createCustomerStrategySelectorFactory(): CustomerStrategySelectorFactory {\n    const getSignInError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signInMethodId,\n        (state: CustomerStrategyState) => state.errors.signInError,\n        (signInMethodId, signInError) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return;\n            }\n\n            return signInError;\n        }\n    );\n\n    const getSignOutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signOutMethodId,\n        (state: CustomerStrategyState) => state.errors.signOutError,\n        (signOutMethodId, signOutError) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return;\n            }\n\n            return signOutError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: CustomerStrategyState) => state.errors.initializeMethodId,\n        (state: CustomerStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: CustomerStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isSigningIn = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signInMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningIn,\n        (signInMethodId, isSigningIn) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningIn;\n        }\n    );\n\n    const isSigningOut = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signOutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningOut,\n        (signOutMethodId, isSigningOut) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningOut;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: CustomerStrategyState) => state.statuses.initializeMethodId,\n        (state: CustomerStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: CustomerStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: CustomerStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: CustomerStrategyState = DEFAULT_STATE\n    ): CustomerStrategySelector => {\n        return {\n            getSignInError: getSignInError(state),\n            getSignOutError: getSignOutError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isSigningIn: isSigningIn(state),\n            isSigningOut: isSigningOut(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState, { DEFAULT_STATE } from './gift-certificate-state';\n\nexport default interface GiftCertificateSelector {\n    getGiftCertificates(): GiftCertificate[] | undefined;\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type GiftCertificateSelectorFactory = (state: GiftCertificateState) => GiftCertificateSelector;\n\nexport function createGiftCertificateSelectorFactory(): GiftCertificateSelectorFactory {\n    const getGiftCertificates = createSelector(\n        (state: GiftCertificateState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: GiftCertificateState) => state.errors.removeGiftCertificateError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: GiftCertificateState) => state.errors.applyGiftCertificateError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isApplyingGiftCertificate,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isRemovingGiftCertificate,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: GiftCertificateState = DEFAULT_STATE\n    ): GiftCertificateSelector => {\n        return {\n            getGiftCertificates: getGiftCertificates(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../../common/selector';\n\nimport Instrument from './instrument';\nimport InstrumentState, { DEFAULT_STATE, InstrumentMeta } from './instrument-state';\n\nexport default interface InstrumentSelector {\n    getInstruments(): Instrument[] | undefined;\n    getInstrumentsMeta(): InstrumentMeta | undefined;\n    getLoadError(): Error | undefined;\n    getDeleteError(instrumentId?: string): Error | undefined;\n    isLoading(): boolean ;\n    isDeleting(instrumentId?: string): boolean;\n}\n\nexport type InstrumentSelectorFactory = (state: InstrumentState) => InstrumentSelector;\n\nexport function createInstrumentSelectorFactory(): InstrumentSelectorFactory {\n    const getInstruments = createSelector(\n        (state: InstrumentState) => state.data,\n        instruments => () => instruments\n    );\n\n    const getInstrumentsMeta = createSelector(\n        (state: InstrumentState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: InstrumentState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getDeleteError = createSelector(\n        (state: InstrumentState) => state.errors.failedInstrument,\n        (state: InstrumentState) => state.errors.deleteError,\n        (failedInstrument, deleteError) => (instrumentId?: string) => {\n            if (instrumentId && failedInstrument !== instrumentId) {\n                return;\n            }\n\n            return deleteError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: InstrumentState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isDeleting = createSelector(\n        (state: InstrumentState) => state.statuses.deletingInstrument,\n        (state: InstrumentState) => state.statuses.isDeleting,\n        (deletingInstrument, isDeleting) => (instrumentId?: string) => {\n            if (instrumentId && deletingInstrument !== instrumentId) {\n                return false;\n            }\n\n            return !!isDeleting;\n        }\n    );\n\n    return memoizeOne((\n        state: InstrumentState = DEFAULT_STATE\n    ): InstrumentSelector => {\n        return {\n            getInstruments: getInstruments(state),\n            getInstrumentsMeta: getInstrumentsMeta(state),\n            getLoadError: getLoadError(state),\n            getDeleteError: getDeleteError(state),\n            isLoading: isLoading(state),\n            isDeleting: isDeleting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { ConfigState } from '../config';\nimport { DEFAULT_STATE } from '../config/config-state';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\nexport default interface FormSelector {\n    getShippingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getBillingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n}\n\nexport type FormSelectorFactory = (state: ConfigState) => FormSelector;\n\nexport function createFormSelectorFactory(): FormSelectorFactory {\n    const getShippingAddressFields = createSelector(\n        (state: ConfigState) => state.data,\n        config => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = config ? config.storeConfig.formFields.shippingAddressFields : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    const getBillingAddressFields = createSelector(\n        (state: ConfigState) => state.data,\n        config => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = config ? config.storeConfig.formFields.billingAddressFields : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    function processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    function processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE\n    ): FormSelector => {\n        return {\n            getShippingAddressFields: getShippingAddressFields(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE } from './payment-method-state';\n\nexport default interface PaymentMethodSelector {\n    getPaymentMethods(): PaymentMethod[] | undefined;\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined;\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n    getLoadError(): Error | undefined;\n    getLoadMethodError(methodId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingMethod(methodId?: string): boolean;\n}\n\nexport type PaymentMethodSelectorFactory = (state: PaymentMethodState) => PaymentMethodSelector;\n\nexport function createPaymentMethodSelectorFactory(): PaymentMethodSelectorFactory {\n    const getPaymentMethods = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => () => paymentMethods\n    );\n\n    const getPaymentMethodsMeta = createSelector(\n        (state: PaymentMethodState) => state.meta,\n        meta => () => meta\n    );\n\n    const getPaymentMethod = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => (methodId: string, gatewayId?: string) => {\n            return gatewayId ?\n                find(paymentMethods, { id: methodId, gateway: gatewayId }) :\n                find(paymentMethods, { id: methodId });\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getLoadMethodError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadMethodId,\n        (state: PaymentMethodState) => state.errors.loadMethodError,\n        (loadMethodId, loadMethodError) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return;\n            }\n\n            return loadMethodError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: PaymentMethodState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isLoadingMethod = createSelector(\n        (state: PaymentMethodState) => state.statuses.loadMethodId,\n        (state: PaymentMethodState) => state.statuses.isLoadingMethod,\n        (loadMethodId, isLoadingMethod) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isLoadingMethod;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentMethodState = DEFAULT_STATE\n    ): PaymentMethodSelector => {\n        return {\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethodsMeta: getPaymentMethodsMeta(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getLoadError: getLoadError(state),\n            getLoadMethodError: getLoadMethodError(state),\n            isLoading: isLoading(state),\n            isLoadingMethod: isLoadingMethod(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\nexport default interface PaymentStrategySelector {\n    getInitializeError(methodId?: string): Error | undefined;\n    getExecuteError(methodId?: string): Error | undefined;\n    getFinalizeError(methodId?: string): Error | undefined;\n    getWidgetInteractingError(methodId?: string): Error | undefined;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isExecuting(methodId?: string): boolean;\n    isFinalizing(methodId?: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type PaymentStrategySelectorFactory = (state: PaymentStrategyState) => PaymentStrategySelector;\n\nexport function createPaymentStrategySelectorFactory(): PaymentStrategySelectorFactory {\n    const getInitializeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.initializeMethodId,\n        (state: PaymentStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getExecuteError = createSelector(\n        (state: PaymentStrategyState) => state.errors.executeMethodId,\n        (state: PaymentStrategyState) => state.errors.executeError,\n        (executeMethodId, executeError) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return;\n            }\n\n            return executeError;\n        }\n    );\n\n    const getFinalizeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.finalizeMethodId,\n        (state: PaymentStrategyState) => state.errors.finalizeError,\n        (finalizeMethodId, finalizeError) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return;\n            }\n\n            return finalizeError;\n        }\n    );\n\n    const getWidgetInteractingError = createSelector(\n        (state: PaymentStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.initializeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: PaymentStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isExecuting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.executeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isExecuting,\n        (executeMethodId, isExecuting) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isExecuting;\n        }\n    );\n\n    const isFinalizing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.finalizeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isFinalizing,\n        (finalizeMethodId, isFinalizing) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isFinalizing;\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentStrategyState = DEFAULT_STATE\n    ): PaymentStrategySelector => {\n        return {\n            getInitializeError: getInitializeError(state),\n            getExecuteError: getExecuteError(state),\n            getFinalizeError: getFinalizeError(state),\n            getWidgetInteractingError: getWidgetInteractingError(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isExecuting: isExecuting(state),\n            isFinalizing: isFinalizing(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState, { DEFAULT_STATE } from './shipping-country-state';\n\nexport default interface ShippingCountrySelector {\n    getShippingCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ShippingCountrySelectorFactory = (state: ShippingCountryState) => ShippingCountrySelector;\n\nexport function createShippingCountrySelectorFactory(): ShippingCountrySelectorFactory {\n    const getShippingCountries = createSelector(\n        (state: ShippingCountryState) => state.data,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ShippingCountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ShippingCountryState) => state.statuses.isLoading,\n        status => () => !!status\n    );\n\n    return memoizeOne((\n        state: ShippingCountryState = DEFAULT_STATE\n    ): ShippingCountrySelector => {\n        return {\n            getShippingCountries: getShippingCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport ShippingStrategyState, { DEFAULT_STATE } from './shipping-strategy-state';\n\nexport default interface ShippingStrategySelector {\n    getUpdateAddressError(methodId?: string): Error | undefined;\n    getSelectOptionError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    isUpdatingAddress(methodId?: string): boolean;\n    isSelectingOption(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n}\n\nexport type ShippingStrategySelectorFactory = (state: ShippingStrategyState) => ShippingStrategySelector;\n\nexport function createShippingStrategySelectorFactory(): ShippingStrategySelectorFactory {\n    const getUpdateAddressError = createSelector(\n        (state: ShippingStrategyState) => state.errors.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.errors.updateAddressError,\n        (updateAddressMethodId, updateAddressError) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return;\n            }\n\n            return updateAddressError;\n        }\n    );\n\n    const getSelectOptionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.errors.selectOptionError,\n        (selectOptionMethodId, selectOptionError) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return;\n            }\n\n            return selectOptionError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: ShippingStrategyState) => state.errors.initializeMethodId,\n        (state: ShippingStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const isUpdatingAddress = createSelector(\n        (state: ShippingStrategyState) => state.statuses.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.statuses.isUpdatingAddress,\n        (updateAddressMethodId, isUpdatingAddress) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isUpdatingAddress;\n        }\n    );\n\n    const isSelectingOption = createSelector(\n        (state: ShippingStrategyState) => state.statuses.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isSelectingOption,\n        (selectOptionMethodId, isSelectingOption) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSelectingOption;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: ShippingStrategyState) => state.statuses.initializeMethodId,\n        (state: ShippingStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: ShippingStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: ShippingStrategyState = DEFAULT_STATE\n    ): ShippingStrategySelector => {\n        return {\n            getUpdateAddressError: getUpdateAddressError(state),\n            getSelectOptionError: getSelectOptionError(state),\n            getInitializeError: getInitializeError(state),\n            isUpdatingAddress: isUpdatingAddress(state),\n            isSelectingOption: isSelectingOption(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { createSelector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\nimport ShippingOption from './shipping-option';\n\nexport default interface ConsignmentSelector {\n    getConsignments(): Consignment[] | undefined;\n    getConsignmentById(id: string): Consignment | undefined;\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined;\n    getShippingOption(): ShippingOption | undefined;\n    getLoadError(): Error | undefined;\n    getCreateError(): Error | undefined;\n    getLoadShippingOptionsError(): Error | undefined;\n    getUnassignedItems(): PhysicalItem[];\n    getUpdateError(consignmentId?: string): Error | undefined;\n    getDeleteError(consignmentId?: string): Error | undefined;\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined;\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingShippingOptions(): boolean;\n    isCreating(): boolean;\n    isUpdating(consignmentId?: string): boolean;\n    isDeleting(consignmentId?: string): boolean;\n    isAssigningItems(address: AddressRequestBody): boolean;\n    isUpdatingShippingOption(consignmentId?: string): boolean;\n}\n\nexport type ConsignmentSelectorFactory = (\n    state: ConsignmentState,\n    cart: CartSelector\n) => ConsignmentSelector;\n\ninterface ConsignmentSelectorDependencies {\n    cart: CartSelector;\n}\n\nexport function createConsignmentSelectorFactory(): ConsignmentSelectorFactory {\n    const getConsignments = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => consignments\n    );\n\n    const getConsignmentById = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (id: string) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, { id });\n        }\n    );\n\n    const getConsignmentByAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (address: AddressRequestBody) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, consignment =>\n                isAddressEqual(consignment.shippingAddress, address)\n            );\n        }\n    );\n\n    const getShippingOption = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (consignments && consignments.length) {\n                return consignments[0].selectedShippingOption;\n            }\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: ConsignmentState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getCreateError = createSelector(\n        (state: ConsignmentState) => state.errors.createError,\n        error => () => error\n    );\n\n    const getLoadShippingOptionsError = createSelector(\n        (state: ConsignmentState) => state.errors.loadShippingOptionsError,\n        error => () => error\n    );\n\n    const getUnassignedItems = createSelector(\n        getConsignments,\n        (_: ConsignmentState, { cart }: ConsignmentSelectorDependencies) => cart.getCart,\n        (getConsignments, getCart) => () => {\n            const cart = getCart();\n\n            if (!cart) {\n                return [];\n            }\n\n            const assignedLineItemIds = (getConsignments() || []).reduce(\n                (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n                [] as string[]\n            );\n\n            return (cart.lineItems.physicalItems || []).filter(\n                item => assignedLineItemIds.indexOf(item.id as string) < 0\n            );\n        }\n    );\n\n    const getUpdateError = createSelector(\n        (state: ConsignmentState) => state.errors.updateError,\n        updateError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateError[consignmentId];\n            }\n\n            return find(updateError);\n        }\n    );\n\n    const getDeleteError = createSelector(\n        (state: ConsignmentState) => state.errors.deleteError,\n        deleteError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return deleteError[consignmentId];\n            }\n\n            return find(deleteError);\n        }\n    );\n\n    const getItemAssignmentError = createSelector(\n        getConsignmentByAddress,\n        getUpdateError,\n        getCreateError,\n        (getConsignmentByAddress, getUpdateError, getCreateError) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? getUpdateError(consignment.id) : getCreateError();\n        }\n    );\n\n    const getUpdateShippingOptionError = createSelector(\n        (state: ConsignmentState) => state.errors.updateShippingOptionError,\n        updateShippingOptionError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateShippingOptionError[consignmentId];\n            }\n\n            return find(updateShippingOptionError);\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isLoadingShippingOptions = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoadingShippingOptions,\n        isLoadingShippingOptions => () => isLoadingShippingOptions === true\n    );\n\n    const isCreating = createSelector(\n        (state: ConsignmentState) => state.statuses.isCreating,\n        isCreating => () => isCreating === true\n    );\n\n    const isUpdating = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdating,\n        isUpdating => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdating[consignmentId] === true;\n            }\n\n            return find(isUpdating) === true;\n        }\n    );\n\n    const isDeleting = createSelector(\n        (state: ConsignmentState) => state.statuses.isDeleting,\n        isDeleting => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isDeleting[consignmentId] === true;\n            }\n\n            return find(isDeleting) === true;\n        }\n    );\n\n    const isAssigningItems = createSelector(\n        getConsignmentByAddress,\n        isUpdating,\n        isCreating,\n        (getConsignmentByAddress, isUpdating, isCreating) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? isUpdating(consignment.id) : isCreating();\n        }\n    );\n\n    const isUpdatingShippingOption = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdatingShippingOption,\n        isUpdatingShippingOption => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdatingShippingOption[consignmentId] === true;\n            }\n\n            return find(isUpdatingShippingOption) === true;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE,\n        cart: CartSelector\n    ): ConsignmentSelector => {\n        return {\n            getConsignments: getConsignments(state),\n            getConsignmentById: getConsignmentById(state),\n            getConsignmentByAddress: getConsignmentByAddress(state),\n            getShippingOption: getShippingOption(state),\n            getLoadError: getLoadError(state),\n            getCreateError: getCreateError(state),\n            getLoadShippingOptionsError: getLoadShippingOptionsError(state),\n            getUnassignedItems: getUnassignedItems(state, { cart }),\n            getUpdateError: getUpdateError(state),\n            getDeleteError: getDeleteError(state),\n            getItemAssignmentError: getItemAssignmentError(state),\n            getUpdateShippingOptionError: getUpdateShippingOptionError(state),\n            isLoading: isLoading(state),\n            isLoadingShippingOptions: isLoadingShippingOptions(state),\n            isCreating: isCreating(state),\n            isUpdating: isUpdating(state),\n            isDeleting: isDeleting(state),\n            isAssigningItems: isAssigningItems(state),\n            isUpdatingShippingOption: isUpdatingShippingOption(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { createSelector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState, { DEFAULT_STATE } from './checkout-state';\n\nexport default interface CheckoutSelector {\n    getCheckout(): Checkout | undefined;\n    getOutstandingBalance(useStoreCredit?: boolean): number | undefined;\n    getLoadError(): Error | undefined;\n    getUpdateError(): Error | undefined;\n    isLoading(): boolean;\n    isUpdating(): boolean;\n}\n\nexport type CheckoutSelectorFactory = (\n    state: CheckoutState,\n    billingAddress: BillingAddressSelector,\n    cart: CartSelector,\n    consignments: ConsignmentSelector,\n    coupons: CouponSelector,\n    customer: CustomerSelector,\n    giftCertificates: GiftCertificateSelector\n) => CheckoutSelector;\n\ninterface CheckoutSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    cart: CartSelector;\n    consignments: ConsignmentSelector;\n    coupons: CouponSelector;\n    customer: CustomerSelector;\n    giftCertificates: GiftCertificateSelector;\n}\n\nexport function createCheckoutSelectorFactory(): CheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: CheckoutState) => state.data,\n        (_: CheckoutState, { billingAddress }: CheckoutSelectorDependencies) => billingAddress.getBillingAddress,\n        (_: CheckoutState, { cart }: CheckoutSelectorDependencies) => cart.getCart,\n        (_: CheckoutState, { customer }: CheckoutSelectorDependencies) => customer.getCustomer,\n        (_: CheckoutState, { consignments }: CheckoutSelectorDependencies) => consignments.getConsignments,\n        (_: CheckoutState, { coupons }: CheckoutSelectorDependencies) => coupons.getCoupons,\n        (_: CheckoutState, { giftCertificates }: CheckoutSelectorDependencies) => giftCertificates.getGiftCertificates,\n        (data, getBillingAddress, getCart, getCustomer, getConsignments, getCoupons, getGiftCertificates) => () => {\n            const billingAddress = getBillingAddress();\n            const cart = getCart();\n            const customer = getCustomer();\n            const consignments = getConsignments() || [];\n            const coupons = getCoupons() || [];\n            const giftCertificates = getGiftCertificates() || [];\n\n            if (!data || !cart || !customer) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                cart,\n                customer,\n                consignments,\n                coupons,\n                giftCertificates,\n            };\n        }\n    );\n\n    const getOutstandingBalance = createSelector(\n        getCheckout,\n        getCheckout => (useStoreCredit?: boolean) => {\n            const checkout = getCheckout();\n\n            if (!checkout) {\n                return;\n            }\n\n            const grandTotal = checkout.grandTotal || 0;\n            const storeCredit = checkout.customer.storeCredit || 0;\n\n            return useStoreCredit ? Math.max(grandTotal - storeCredit, 0) : checkout.outstandingBalance;\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: CheckoutState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getUpdateError = createSelector(\n        (state: CheckoutState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CheckoutState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isUpdating = createSelector(\n        (state: CheckoutState) => state.statuses.isUpdating,\n        isUpdating => () => isUpdating === true\n    );\n\n    return memoizeOne((\n        state: CheckoutState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        cart: CartSelector,\n        consignments: ConsignmentSelector,\n        coupons: CouponSelector,\n        customer: CustomerSelector,\n        giftCertificates: GiftCertificateSelector\n    ): CheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getOutstandingBalance: getOutstandingBalance(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getLoadError: getLoadError(state),\n            getUpdateError: getUpdateError(state),\n            isLoading: isLoading(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { createSelector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { DEFAULT_STATE, OrderMetaState } from './order-state';\n\nexport default interface OrderSelector {\n    getOrder(): Order | undefined;\n    getOrderMeta(): OrderMetaState | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type OrderSelectorFactory = (\n    state: OrderState,\n    billingAddress: BillingAddressSelector,\n    coupons: CouponSelector\n) => OrderSelector;\n\ninterface OrderSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    coupons: CouponSelector;\n}\n\nexport function createOrderSelectorFactory(): OrderSelectorFactory {\n    const getOrder = createSelector(\n        (state: OrderState) => state.data,\n        (_: OrderState, { billingAddress }: OrderSelectorDependencies) => billingAddress.getBillingAddress(),\n        (_: OrderState, { coupons }: OrderSelectorDependencies) => coupons.getCoupons(),\n        (data, billingAddress, coupons = []) => () => {\n            if (!data || !billingAddress) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                coupons,\n            };\n        }\n    );\n\n    const getOrderMeta = createSelector(\n        (state: OrderState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: OrderState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: OrderState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: OrderState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        coupons: CouponSelector\n    ): OrderSelector => {\n        return {\n            getOrder: getOrder(state, { billingAddress, coupons }),\n            getOrderMeta: getOrderMeta(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport StoreCreditState, { DEFAULT_STATE } from './store-credit-state';\n\nexport default interface StoreCreditSelector {\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n}\n\nexport type StoreCreditSelectorFactory = (state: StoreCreditState) => StoreCreditSelector;\n\nexport function createStoreCreditSelectorFactory(): StoreCreditSelectorFactory {\n    const getApplyError = createSelector(\n        (state: StoreCreditState) => state.errors.applyError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: StoreCreditState) => !!state.statuses.isApplying,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: StoreCreditState = DEFAULT_STATE\n    ): StoreCreditSelector => {\n        return {\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n        };\n    });\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport { createInternalCheckoutSelectorsFactory } from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const createInternalCheckoutSelectors = createInternalCheckoutSelectorsFactory();\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\nimport { storeCreditReducer } from '../store-credit';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n        storeCredit: storeCreditReducer,\n    });\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error when we are unable to retrieve a checkout object from the\n * server using the provided ID. It could be because the shopper does not have\n * permission to view the object, or the ID itself is invalid.\n */\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'CheckoutNotAvailableError';\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n\n            throw error;\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(\n    address: Address | BillingAddress,\n    consignments?: Consignment[]\n): InternalAddress<any> {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","import { memoize } from '@bigcommerce/memoize';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method);\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method);\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\n@bind\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId) ?\n            [options.containerId] :\n            setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map(containerId => {\n                const action = this._buttonStrategyActionCreator.initialize({ ...options, containerId });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            })\n        )\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n}\n\nexport default CheckoutButtonMethodType;\n","export default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(`Unable to find any element with the specified selector: ${selector}`);\n    }\n\n    return Array.prototype.slice.call(containers)\n        .map((container: HTMLElement) => {\n            if (!container.id) {\n                container.id = uniqueId(idPrefix);\n            }\n\n            return container.id;\n        });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId, containerId: options.containerId };\n\n            if (store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, { timeout: options.timeout, useCache: true }),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n                defer(() => this._registry.get(options.methodId).deinitialize()\n                    .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n            );\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.shippingAddress, paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(\n        address?: Address | null,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const shippingAddress = address === undefined ?\n                    customer && customer.addresses && customer.addresses[0] :\n                    address;\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: shippingAddress ? this._mapToBraintreeAddress(shippingAddress) : undefined,\n                    amount: checkout.outstandingBalance,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(() => this._googlePayPaymentProcessor.initialize(this._getMethodId()))\n            .then(() => {\n                this._walletButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { getCallbackUrl, Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = ''\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        return this._paypalScriptLoader.loadPaypal()\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (_, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(`${this._host}/api/storefront/payment/paypalexpress`, { merchantId, cartId }, {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    },\n                });\n            })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        _onError?: (error: StandardError) => void // FIXME: This parameter seems to be unused\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const host = options && options.host;\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, host),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { BraintreePaypalButtonStrategy } from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    host?: string\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            host\n        )\n    );\n\n    return registry;\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport enum NotEmbeddableErrorType {\n    MissingContainer = 'missing_container',\n    MissingContent = 'missing_content',\n    UnknownError = 'unknown_error',\n}\n\n/**\n * Throw this error if we are not able to embed the checkout form as an iframe.\n * This can be due to the fact that the provided container ID is invalid, or the\n * checkout form fails to load inside the iframe. It can also be due to an\n * unknown reason.\n */\nexport default class NotEmbeddableError extends StandardError {\n    constructor(\n        message?: string,\n        public subtype: NotEmbeddableErrorType = NotEmbeddableErrorType.UnknownError\n    ) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.name = 'NotEmbeddableError';\n        this.type = 'not_embeddable';\n    }\n}\n","import { default as storage } from 'local-storage-fallback';\n\nexport default class BrowserStorage {\n    constructor(\n        private _namespace: string\n    ) {}\n\n    getItem<TValue = any>(key: string): TValue | null {\n        const rawValue = storage.getItem(this.withNamespace(key));\n\n        if (rawValue === null) {\n            return null;\n        }\n\n        try {\n            return JSON.parse(rawValue);\n        } catch (error) {\n            // Clean up invalid values\n            this.removeItem(this.withNamespace(key));\n\n            return null;\n        }\n    }\n\n    getItemOnce<TValue = any>(key: string): TValue | null {\n        const value = this.getItem(key);\n\n        this.removeItem(key);\n\n        return value;\n    }\n\n    setItem<TValue = any>(key: string, value: TValue): void {\n        return storage.setItem(this.withNamespace(key), JSON.stringify(value));\n    }\n\n    removeItem(key: string): void {\n        return storage.removeItem(this.withNamespace(key));\n    }\n\n    private withNamespace(key: string): string {\n        return `${this._namespace}.${key}`;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error we are not able to sign in a shopper because the provided\n * login token is invalid.\n */\nexport default class InvalidLoginTokenError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'InvalidLoginTokenError';\n        this.type = 'invalid_login_token';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { IFrameComponent } from '../common/iframe';\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { InvalidLoginTokenError, NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst CAN_RETRY_ALLOW_COOKIE = 'canRetryAllowCookie';\nconst IS_COOKIE_ALLOWED_KEY = 'isCookieAllowed';\n\n@bind\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _requestSender: RequestSender,\n        private _storage: BrowserStorage,\n        private _location: Location,\n        private _options: EmbeddedCheckoutOptions\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutComplete, this._options.onComplete);\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutError, this._options.onError);\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutLoaded, this._options.onLoad);\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, this._options.onFrameLoad);\n        }\n\n        if (this._options.onSignOut) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.SignedOut, this._options.onSignOut);\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () => this._configureStyles());\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._allowCookie()\n            .then(() => this._attemptLogin())\n            .then(url => this._iframeCreator.createFrame(url, this._options.containerId))\n            .then(iframe => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n            })\n            .catch(error => {\n                this._isAttached = false;\n\n                return this._retryAllowCookie(error)\n                    .catch(() => {\n                        this._messageListener.trigger({\n                            type: EmbeddedCheckoutEventType.FrameError,\n                            payload: error,\n                        });\n\n                        this._loadingIndicator.hide();\n\n                        throw error;\n                    });\n            })\n            .then(() => this);\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n\n    private _attemptLogin(): Promise<string> {\n        if (!/^\\/login\\/token/.test(parseUrl(this._options.url).pathname)) {\n            return Promise.resolve(this._options.url);\n        }\n\n        return this._requestSender.post(this._options.url)\n            .then(({ body: { redirectUrl } }) => redirectUrl)\n            .catch(response => Promise.reject(new InvalidLoginTokenError(response)));\n    }\n\n    /**\n     * This workaround is required for certain browsers (namely Safari) that\n     * prevent session cookies to be set for a third party website unless the\n     * user has recently visited such website. Therefore, before we attempt to\n     * login or set an active cart in the session, we need to first redirect the\n     * user to the domain of Embedded Checkout.\n     */\n    private _allowCookie(): Promise<void> {\n        if (this._storage.getItem(IS_COOKIE_ALLOWED_KEY)) {\n            // It could be possible that the flag is set to true but the browser\n            // has already removed the permission to store cookie. In that case,\n            // we should try to redirect the user again.\n            this._storage.setItem(CAN_RETRY_ALLOW_COOKIE, true);\n\n            return Promise.resolve();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.setItem(IS_COOKIE_ALLOWED_KEY, true);\n\n        const { origin } = parseUrl(this._options.url);\n        const redirectUrl = `${origin}/embedded-checkout/allow-cookie?returnUrl=${encodeURIComponent(this._location.href)}`;\n\n        document.body.style.visibility = 'hidden';\n        this._location.replace(redirectUrl);\n\n        return new Promise<never>(() => {});\n    }\n\n    private _retryAllowCookie(error: EmbeddedCheckoutError): Promise<void> {\n        const canRetry = (\n            this._storage.getItem(CAN_RETRY_ALLOW_COOKIE) &&\n            error instanceof NotEmbeddableError &&\n            error.subtype === NotEmbeddableErrorType.MissingContent\n        );\n\n        if (!canRetry) {\n            return Promise.reject();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.removeItem(IS_COOKIE_ALLOWED_KEY);\n\n        return this._allowCookie();\n    }\n}\n","import { LoadingIndicatorStyles } from './embedded-checkout-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(\n        options?: { styles?: LoadingIndicatorStyles }\n    ) {\n        this._styles = { ...DEFAULT_STYLES, ...options && options.styles };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error('Unable to attach the loading indicator because the parent ID is not valid.');\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            // We need to provide the 2nd parameter for IE11, even though it is\n            // 0 by default for all other browsers.\n            style.sheet.insertRule(`\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `, 0);\n        }\n    }\n}\n","import { iframeResizer, IFrameComponent } from '../common/iframe';\nimport { parseUrl } from '../common/url';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class ResizableIframeCreator {\n    constructor(\n        private _options?: { timeout: number }\n    ) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError(\n                'Unable to embed the iframe because the container element could not be found.',\n                NotEmbeddableErrorType.MissingContainer\n            );\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n        iframe.allowPaymentRequest = true;\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout)\n            .catch(error => {\n                container.removeChild(iframe);\n\n                throw error;\n            });\n    }\n\n    private _toResizableFrame(iframe: HTMLIFrameElement, timeoutInterval: number): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(new NotEmbeddableError('Unable to embed the iframe because the content could not be loaded.'));\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseUrl(iframe.src).origin) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(new NotEmbeddableError(event.data.payload.message, NotEmbeddableErrorType.MissingContent));\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const contentId = event.data.payload && event.data.payload.contentId;\n                    const iframes = iframeResizer({\n                        scrolling: false,\n                        sizeWidth: false,\n                        heightCalculationMethod: contentId ? 'taggedElement' : 'lowestElement',\n                    }, iframe);\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst STORAGE_PREFIX = 'BigCommerce.EmbeddedCheckout';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * @remarks\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseUrl(options.url).origin;\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        createRequestSender(),\n        new BrowserStorage(STORAGE_PREFIX),\n        window.location,\n        options\n    );\n\n    return embeddedCheckout.attach();\n}\n","export interface RootCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n}\n\nexport interface IntermediateCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    usedCount: number;\n    value: any;\n}\n\nexport interface TerminalCacheKeyMap extends IntermediateCacheKeyMap {\n    cacheKey: string;\n}\n\nexport type ChildCacheKeyMap = IntermediateCacheKeyMap | TerminalCacheKeyMap;\n\nexport function isTerminalCacheKeyMap(map: ChildCacheKeyMap): map is TerminalCacheKeyMap {\n    return map.hasOwnProperty('cacheKey');\n}\n\nexport function isRootCacheKeyMap(map: RootCacheKeyMap | ChildCacheKeyMap): map is RootCacheKeyMap {\n    return map.hasOwnProperty('parentMap');\n}\n","import { noop } from 'lodash';\nimport * as shallowEqual from 'shallowequal';\n\nimport { isRootCacheKeyMap, isTerminalCacheKeyMap, ChildCacheKeyMap, IntermediateCacheKeyMap, RootCacheKeyMap, TerminalCacheKeyMap } from './cache-key-maps';\n\nexport interface CacheKeyResolverOptions {\n    maxSize?: number;\n    onExpire?(key: string): void;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    map?: TerminalCacheKeyMap;\n}\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _map: RootCacheKeyMap = { maps: [] };\n    private _usedMaps: TerminalCacheKeyMap[] = [];\n    private _options: Required<CacheKeyResolverOptions>;\n\n    constructor(options?: CacheKeyResolverOptions) {\n        this._options = {\n            maxSize: 0,\n            isEqual: shallowEqual,\n            onExpire: noop,\n            ...options,\n        };\n    }\n\n    getKey(...args: any[]): string {\n        const result = this._resolveMap(...args);\n        const { index, parentMap } = result;\n        let { map } = result;\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n        } else {\n            map = this._generateMap(parentMap, args.slice(index));\n        }\n\n        // Keep track of the least used map so we can remove it if the size of\n        // the stack exceeds the maximum size.\n        this._removeLeastUsedMap(map);\n\n        return map.cacheKey;\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMap = this._map;\n\n        // Traverse the tree to find the linked list of maps that match the\n        // arguments of the call. Each intermediate or terminal map contains a\n        // value that could be used to match with the arguments. The last map in\n        // the list (the terminal) should contain a cache key. If it can does\n        // not exist, we will return a falsy value so that the caller could\n        // handle and generate a new cache key.\n        while (parentMap.maps.length) {\n            let isMatched = false;\n\n            for (let mapIndex = 0; mapIndex < parentMap.maps.length; mapIndex++) {\n                const map = parentMap.maps[mapIndex];\n\n                if (!this._options.isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                // Move the most recently used map to the top of the stack for\n                // quicker access\n                parentMap.maps.unshift(...parentMap.maps.splice(mapIndex, 1));\n\n                if ((args.length === 0 || index === args.length - 1) && isTerminalCacheKeyMap(map)) {\n                    return { index, map, parentMap };\n                }\n\n                isMatched = true;\n                parentMap = map;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMap };\n    }\n\n    private _generateMap(parent: RootCacheKeyMap | IntermediateCacheKeyMap, args: any[]): TerminalCacheKeyMap {\n        let index = 0;\n        let parentMap = parent;\n        let map: IntermediateCacheKeyMap;\n\n        do {\n            map = {\n                maps: [],\n                parentMap,\n                usedCount: 1,\n                value: args[index],\n            };\n\n            // Continue to build the tree of maps so that it could be resolved\n            // next time when the function is called with the same set of\n            // arguments.\n            parentMap.maps.unshift(map);\n\n            parentMap = map;\n            index++;\n        } while (index < args.length);\n\n        const terminalMap = map as TerminalCacheKeyMap;\n\n        terminalMap.cacheKey = `${++this._lastId}`;\n\n        return terminalMap;\n    }\n\n    private _removeLeastUsedMap(recentlyUsedMap: TerminalCacheKeyMap): void {\n        if (!this._options.maxSize) {\n            return;\n        }\n\n        const index = this._usedMaps.indexOf(recentlyUsedMap);\n\n        this._usedMaps.splice(\n            index === -1 ? 0 : index,\n            index === -1 ? 0 : 1,\n            recentlyUsedMap\n        );\n\n        if (this._usedMaps.length <= this._options.maxSize) {\n            return;\n        }\n\n        const map = this._usedMaps.pop();\n\n        if (!map) {\n            return;\n        }\n\n        this._removeMap(map);\n        this._options.onExpire(map.cacheKey);\n    }\n\n    private _removeMap(map: ChildCacheKeyMap): void {\n        if (!map.parentMap) {\n            return;\n        }\n\n        map.parentMap.maps.splice(map.parentMap.maps.indexOf(map), 1);\n\n        if (isRootCacheKeyMap(map.parentMap)) {\n            return;\n        }\n\n        this._removeMap(map.parentMap);\n    }\n}\n","module.exports = require(\"@bigcommerce/bigpay-client\");","module.exports = require(\"messageformat\");","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if a request fails to complete within its required timeframe\n * because of a network issue.\n */\nexport default class TimeoutError extends RequestError<{}> {\n    constructor(response?: Response) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { createSelector as defaultSelectorCreator } from 'reselect';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\n/**\n * This is a decorated version of Reselect's default `createSelector` function.\n * If the return value of the combiner function is a function, it will create a\n * memorized version of that function and return it instead.\n */\nexport default withMemoizedCombiner(defaultSelectorCreator);\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes(includes: string[]): string {\n    return uniq(includes).join(',');\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to synchronize the checkout details of a\n * shopper with a hosted / remote checkout provider (i.e.: Amazon).\n */\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.name = 'RemoteCheckoutSynchronizationError';\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return {\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        };\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return {\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            };\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': initializationData.stripeVersion,\n                        'stripe:publishableKey': initializationData.stripePublishableKey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n        customerGroupName: customer.customerGroup && customer.customerGroup.name,\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { mapToInternalLineItems, LineItem } from '../cart';\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInternalOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInternalOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && find(lineItem.socialMedia, item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","import { IFrameComponent, IFrameOptions } from 'iframe-resizer';\n\nexport {\n    HeightCalculationMethod,\n    IFrameComponent,\n    IFrameMessageData,\n    IFrameObject,\n    IFrameOptions,\n    IFramePage,\n    IFramePageOptions,\n    IFrameResizedData,\n    IFrameScrollData,\n    PageInfo,\n    WidthCalculationMethod,\n} from 'iframe-resizer';\n\n// The reason why we are wrapping the original `iframeResizer` function imported\n// from the package is because the package sets up event listeners (window\n// resize etc...) as soon as the package is imported. Therefore, to defer the\n// side effect from happening until the function is actually being used, we are\n// importing the package inside this function. To minimise the chance of\n// importing the original package inadvertently, we are also re-exporting all of\n// its public interfaces. The re-exports do not cause any side effect because\n// they are plain TypeScript interfaces; meaning they are only used for type\n// checks rather than for code output.\nexport function iframeResizer(options: IFrameOptions, target: string | HTMLElement): IFrameComponent[] {\n    const { iframeResizer: originalIframeResizer } = require('iframe-resizer');\n\n    return originalIframeResizer(options, target);\n}\n\n// We also need to wrap the original `iframeResizer.contentWindow` because\n// similarly the package sets up event listeners as soon as the package gets\n// imported. Another reason is that if it is imported at the top level using a\n// regular import statement, it will be stripped out by Webpack as it is\n// considered as \"unused\", unless we explicitly mark it as a package that\n// produces side effects.\nexport function setupContentWindowForIframeResizer(): void {\n    require('iframe-resizer/js/iframeResizer.contentWindow');\n}\n","import { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default class ErrorActionCreator {\n    clearError(error: Error): ClearErrorAction {\n        return {\n            type: ErrorActionType.ClearError,\n            payload: error,\n        };\n    }\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console?: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutIncludes, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable ,  Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): ThunkAction<CustomerStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): ThunkAction<CustomerStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && !state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            },\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n","enum PaymentStrategyType {\n    ADYENV2 = 'adyenv2',\n    AFFIRM = 'affirm',\n    AFTERPAY = 'afterpay',\n    AMAZON = 'amazon',\n    CREDIT_CARD = 'creditcard',\n    CYBERSOURCE = 'cybersource',\n    KLARNA = 'klarna',\n    LEGACY = 'legacy',\n    OFFLINE = 'offline',\n    OFFSITE = 'offsite',\n    PAYPAL = 'paypal',\n    PAYPAL_EXPRESS = 'paypalexpress',\n    PAYPAL_EXPRESS_CREDIT = 'paypalexpresscredit',\n    SAGE_PAY = 'sagepay',\n    SQUARE = 'squarev2',\n    STRIPEV3 = 'stripev3',\n    NO_PAYMENT_DATA_REQUIRED = 'nopaymentdatarequired',\n    BRAINTREE = 'braintree',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    BRAINTREE_VISA_CHECKOUT = 'braintreevisacheckout',\n    BRAINTREE_GOOGLE_PAY = 'googlepaybraintree',\n    CHASE_PAY = 'chasepay',\n    WE_PAY = 'wepay',\n    MASTERPASS = 'masterpass',\n    STRIPE_GOOGLE_PAY = 'googlepaystripe',\n    ZIP = 'zip',\n    CONVERGE = 'converge',\n}\n\nexport default PaymentStrategyType;\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params?: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteBillingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteShippingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params?: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemotePaymentFailed, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.LoadRemoteSettingsFailed, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.SignOutRemoteCustomerFailed, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we try to call a method that is only a stub and has not\n * been fully implemented.\n */\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport AmazonPayCustomerInitializeOptions from './amazon-pay-customer-initialize-options';\n\nexport default class AmazonPayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../../payment/strategies/braintree/visacheckout';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategyActionCreator from '../../customer-strategy-action-creator';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (_, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { ChasePayScriptLoader, ChasePaySuccessPayload } from '../../../payment/strategies/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class ChasePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            },\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport CustomerActionCreator from '../../customer-action-creator';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class DefaultCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport GooglePayCustomerInitializeOptions from './googlepay-customer-initialize-options';\n\nexport default class GooglePayCustomerStrategy implements CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId }  = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                this._walletButton = this._createSignInButton(googlePayOptions.container);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _getGooglePayOptions(options: CustomerInitializeOptions): GooglePayCustomerInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError\n} from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { getCallbackUrl, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class MasterpassCustomerStrategy implements CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: false,\n                    callbackUrl: getCallbackUrl('checkout'),\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotImplementedError } from '../../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class SquareCustomerStrategy implements CustomerStrategy {\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {}\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport { CountryActionType } from './country-actions';\nimport CountryRequestSender from './country-request-sender';\n\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(CountryActionType.LoadCountriesRequested));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(CountryActionType.LoadCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CountryActionType.LoadCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\nimport OrderParams from './order-params';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout, params }: RequestOptions<OrderParams> = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const include = [\n            'payments',\n            'lineItems.physicalItems.socialMedia',\n            'lineItems.physicalItems.options',\n            'lineItems.digitalItems.socialMedia',\n            'lineItems.digitalItems.options',\n        ];\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...include,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\nimport { SpamProtectionAction, SpamProtectionActionCreator } from './spam-protection';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction | SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n                const orderMeta = state.order.getOrderMeta();\n                const storeConfig = state.config.getStoreConfig();\n                const spamProtectionToken = orderMeta && orderMeta.spamProtectionToken;\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { isSpamProtectionEnabled } = storeConfig.checkoutSettings;\n\n                if (isSpamProtectionEnabled && !spamProtectionToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingSpamProtectionToken);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(\n                            payload,\n                            checkout.customerMessage,\n                            externalSource,\n                            spamProtectionToken\n                        ), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    executeSpamProtection(): ThunkAction<SpamProtectionAction> {\n        return store => {\n            const storeConfig = store.getState().config.getStoreConfig();\n\n            if (!storeConfig) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n            }\n\n            const { isSpamProtectionEnabled } = storeConfig.checkoutSettings;\n\n            if (!isSpamProtectionEnabled) {\n                return empty();\n            }\n\n            return this._spamProtectionActionCreator.execute();\n        };\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(\n        payload: OrderRequestBody,\n        customerMessage: string,\n        externalSource?: string,\n        spamProtectionToken?: string\n    ): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n                spamProtectionToken,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            spamProtectionToken,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","export interface MutationObeserverCreator {\n    prototype: MutationObserver;\n    new(callback: MutationCallback): MutationObserver;\n}\n\nexport interface MutationObserverWindow extends Window {\n    MutationObserver: MutationObeserverCreator;\n}\n\nexport class MutationObserverFactory {\n    constructor(\n        private _window: MutationObserverWindow = window as MutationObserverWindow\n    ) {}\n\n    create(callback: MutationCallback): MutationObserver {\n        return new this._window.MutationObserver(callback);\n    }\n}\n","import { StandardError } from '../../../common/error/errors';\n\n/**\n * Throw this error if we fail to complete the required spam protection\n * verification due to an unknown reason.\n */\nexport default class SpamProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to complete our spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionFailedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { StandardError } from '../../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam protection\n * challenge (i.e.: they close the reCaptcha window).\n */\nexport default class SpamProtectionNotCompletedError extends StandardError {\n    constructor() {\n        super('You haven\\'t complete our spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionNotCompletedError';\n        this.type = 'spam_protection_not_completed';\n    }\n}\n","import { Observable, Subject } from 'rxjs';\n\nimport { MutationObserverFactory } from '../../common/dom/mutation-observer';\nimport { NotInitializedError, NotInitializedErrorType } from '../../common/error/errors';\n\nimport { SpamProtectionFailedError, SpamProtectionNotCompletedError } from './errors';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport interface RecaptchaResult {\n    error?: Error;\n    token?: string;\n}\n\nexport default class GoogleRecaptcha {\n    private _event$?: Subject<RecaptchaResult>;\n    private _recaptcha?: ReCaptchaV2.ReCaptcha;\n\n    constructor(\n        private googleRecaptchaScriptLoader: GoogleRecaptchaScriptLoader,\n        private mutationObserverFactory: MutationObserverFactory\n    ) {}\n\n    load(containerId: string, sitekey: string): Promise<void> {\n        const event$ = new Subject<RecaptchaResult>();\n        this._event$ = event$;\n\n        return this.googleRecaptchaScriptLoader.load()\n            .then(recaptcha => {\n                recaptcha.render(containerId, {\n                    sitekey,\n                    size: 'invisible',\n                    callback: () => {\n                        event$.next({\n                            token: recaptcha.getResponse(),\n                        });\n                        recaptcha.reset();\n                    },\n                    'error-callback': () => {\n                        event$.next({\n                            error: new SpamProtectionFailedError(),\n                        });\n                    },\n                });\n\n                this._recaptcha = recaptcha;\n            });\n    }\n\n    execute(): Observable<RecaptchaResult> {\n        if (!this._event$ || !this._recaptcha) {\n            throw new NotInitializedError(NotInitializedErrorType.SpamProtectionNotInitialized);\n        }\n\n        this._watchRecaptchaChallengeWindow(this._event$);\n\n        this._recaptcha.execute();\n\n        return this._event$;\n    }\n\n    private _watchRecaptchaChallengeWindow(event: Subject<RecaptchaResult>) {\n        const iframeElement = document.querySelector('iframe[title=\"recaptcha challenge\"]');\n\n        if (!iframeElement) {\n            throw new Error('Recaptcha challenge iframe not found.');\n        }\n\n        const iframeContainer = iframeElement.parentElement;\n\n        if (!iframeContainer) {\n            throw new Error('Recaptcha challenge iframe container not found.');\n        }\n\n        const container = iframeContainer.parentElement;\n\n        if (!container) {\n            throw new Error('Recaptcha challenge container not found.');\n        }\n\n        this.mutationObserverFactory.create(() => {\n            // When customer closes the Google ReCaptcha challenge window, throw SpamProtectionNotCompletedError\n            if (container.style.visibility === 'hidden') {\n                event.next({\n                    error: new SpamProtectionNotCompletedError(),\n                });\n            }\n        }).observe(container, { attributes: true, attributeFilter: ['style'] });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nexport default class GoogleRecaptchaScriptLoader {\n    private _loadPromise?: Promise<ReCaptchaV2.ReCaptcha>;\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GoogleRecaptchaWindow = window\n    ) {}\n\n    load(): Promise<ReCaptchaV2.ReCaptcha> {\n        if (!this._loadPromise) {\n            this._loadPromise = this._loadScript();\n        }\n\n        return this._loadPromise;\n    }\n\n    private _loadScript(): Promise<ReCaptchaV2.ReCaptcha> {\n        const callbackName = 'initRecaptcha';\n        const params = [\n            `onload=${callbackName}`,\n            'render=explicit',\n        ].join('&');\n\n        return new Promise((resolve, reject) => {\n            this._window[callbackName] = () => resolve(this._window.grecaptcha);\n\n            this._scriptLoader.loadScript(`//www.google.com/recaptcha/api.js?${params}`)\n                .catch(error => {\n                    this._loadPromise = undefined;\n                    reject(error);\n                });\n        });\n    }\n}\n\nexport interface GoogleRecaptchaWindow extends Window {\n    grecaptcha?: ReCaptchaV2.ReCaptcha;\n    initRecaptcha?(): void;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable, Observer } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection-actions';\nimport { SpamProtectionOptions } from './spam-protection-options';\n\nexport default class SpamProtectionActionCreator {\n    constructor(\n        private _googleRecaptcha: GoogleRecaptcha\n    ) {}\n\n    initialize(options: SpamProtectionOptions): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<SpamProtectionAction>) => {\n            const state = store.getState();\n            const config = state.config.getConfig();\n            const { containerId } = options;\n\n            if (!config) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n            }\n\n            observer.next(createAction(SpamProtectionActionType.InitializeRequested, undefined));\n\n            const recaptchaSitekey = config.storeConfig.checkoutSettings.googleRecaptchaSitekey;\n\n            return this._googleRecaptcha.load(containerId, recaptchaSitekey)\n                .then(() => {\n                    observer.next(createAction(SpamProtectionActionType.InitializeSucceeded));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(SpamProtectionActionType.InitializeFailed, error, containerId));\n                });\n        });\n    }\n\n    execute(): Observable<SpamProtectionAction> {\n        return concat(\n            of(createAction(SpamProtectionActionType.ExecuteRequested, undefined)),\n            this._googleRecaptcha.execute()\n                .pipe(take(1))\n                .pipe(switchMap(({ error, token }) => {\n                    return error ?\n                        throwError(createErrorAction(SpamProtectionActionType.SubmitFailed, error)) :\n                        of(createAction(SpamProtectionActionType.Completed, token));\n                }))\n        );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\nimport { SpamProtectionAction } from '../order/spam-protection';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction | SpamProtectionAction, InternalCheckoutSelectors> {\n        const { payment = {} as OrderPaymentRequestBody, useStoreCredit } = payload;\n        const meta = { methodId: payment.methodId };\n\n        return store => concat(\n            this._orderActionCreator.executeSpamProtection()(store),\n            of(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta)),\n            defer(() => {\n                const state = store.getState();\n\n                let strategy: PaymentStrategy;\n\n                if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                    const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                    if (!method) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    strategy = this._strategyRegistry.getByMethod(method);\n                } else {\n                    strategy = this._strategyRegistry.get(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED);\n                }\n\n                return strategy\n                    .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                    .then(() => createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta))\n        );\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const { providerId = '', gatewayId = '' } = state.payment.getPaymentId() || {};\n                const method = state.paymentMethods.getPaymentMethod(providerId, gatewayId);\n\n                if (!method) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: method.id }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        const { methodId, gatewayId } = options;\n\n        return store => defer(() => {\n            const state = store.getState();\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && state.paymentStrategies.isInitialized(methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId })),\n                this._strategyRegistry.getByMethod(method)\n                    .initialize({ ...options, methodId, gatewayId })\n                    .then(() => createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }))\n            );\n        }).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }))\n        );\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        const { methodId, gatewayId } = options;\n\n        return store => defer(() => {\n            const state = store.getState();\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && !state.paymentStrategies.isInitialized(methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId })),\n                this._strategyRegistry.getByMethod(method)\n                    .deinitialize({ ...options, methodId, gatewayId })\n                    .then(() => createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }))\n            );\n        }).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }))\n        );\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): Observable<PaymentStrategyWidgetAction> {\n        const methodId = options && options.methodId;\n        const meta = { methodId };\n\n        return concat(\n            of(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta)),\n            defer(() =>\n                method().then(() => createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta))\n        );\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                    })),\n                giftCertificates: cart.lineItems.giftCertificates\n                    .slice()\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\n                    .map(item => ({\n                        amount: item.amount,\n                        recipient: item.recipient,\n                    })),\n                physicalItems: cart.lineItems.physicalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                        giftWrapping: item.giftWrapping,\n                    })),\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.name = 'CartChangedError';\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.outstandingBalance === response.body.outstandingBalance\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditRequestSender from './store-credit-request-sender';\n\nexport default class StoreCreditActionCreator {\n    constructor(\n        private _storeCreditRequestSender: StoreCreditRequestSender\n    ) {}\n\n    applyStoreCredit(useStoreCredit: boolean, options?: RequestOptions): ThunkAction<StoreCreditAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(StoreCreditActionType.ApplyStoreCreditRequested)),\n            defer(async () => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { body } = await (useStoreCredit ?\n                    this._storeCreditRequestSender.applyStoreCredit(checkout.id, options) :\n                    this._storeCreditRequestSender.removeStoreCredit(checkout.id, options));\n\n                return createAction(StoreCreditActionType.ApplyStoreCreditSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(StoreCreditActionType.ApplyStoreCreditFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class StoreCreditRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyStoreCredit(checkoutId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/store-credit`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n\n    removeStoreCredit(checkoutId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/store-credit`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { OrderActionCreator } from '../order';\n\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentRequestTransformer: PaymentRequestTransformer\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._paymentRequestTransformer.transform(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(\n        methodId: string,\n        gatewayId?: string\n    ): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store => {\n            const payload = this._paymentRequestTransformer.transform({ gatewayId, methodId }, store.getState());\n\n            return concat(\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\n                this._paymentRequestSender.initializeOffsitePayment(payload)\n                    .then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded))\n            ).pipe(\n                catchError(error => throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error))\n            );\n        };\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: response.headers,\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","import { pick } from 'lodash';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\n\nexport default class PaymentRequestTransformer {\n    transform(payment: Payment, checkoutState: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = checkoutState.billingAddress.getBillingAddress();\n        const checkout = checkoutState.checkout.getCheckout();\n        const customer = checkoutState.customer.getCustomer();\n        const order = checkoutState.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(checkoutState.paymentMethods, payment.methodId, payment.gatewayId);\n        const shippingAddress = checkoutState.shippingAddress.getShippingAddress();\n        const consignments = checkoutState.consignments.getConsignments();\n        const shippingOption = checkoutState.consignments.getShippingOption();\n        const storeConfig = checkoutState.config.getStoreConfig();\n        const contextConfig = checkoutState.config.getContextConfig();\n        const instrumentMeta = checkoutState.instruments.getInstrumentsMeta();\n        const paymentMeta = checkoutState.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = checkoutState.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && payment.paymentData && isVaultedInstrument(payment.paymentData) ?\n            `${checkoutState.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            checkoutState.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(\n        paymentMethodSelector: PaymentMethodSelector,\n        methodId: string,\n        gatewayId?: string\n    ): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(methodId, gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","export interface AdyenComponentCallbacks {\n    onChange?(state: AdyenCardState): void;\n}\n\nexport interface AdyenHostWindow extends Window {\n    AdyenCheckout?: new(configuration: AdyenConfiguration) => AdyenCheckout;\n}\n\nexport interface AdyenConfiguration {\n    /*\n     * Use test, and then change this to live when you're ready to accept live payments.\n     */\n    environment?: string;\n\n    /*\n     * The shopper's locale. This is used to set the language rendered in the Components.\n     */\n    locale?: string;\n\n    /*\n     * The Origin Key of your website.\n     */\n    originKey: string;\n\n    /*\n     * Supported from Components version 3.0.0 and later. The full paymentMethods response,\n     * returned in step 1. We recommend that you pass this on the AdyenCheckout instance.\n     * Otherwise, you need to pass the specific payment method details separately for each\n     * Component.\n     */\n    paymentMethodsResponse?: PaymentMethodsResponse;\n\n    /*\n     * Specify the function that you created, for example, handleOnChange. If you wish\n     * to override this function, you can also define an onChange event on the Component\n     * level.\n     */\n    onChange?(state: AdyenCardState, component: AdyenComponent): void;\n}\n\nexport interface PaymentMethodsResponse {\n    /**\n     * Groups of payment methods.\n     */\n    groups?: AdyenPaymentMethodGroup[];\n\n    /**\n     * Detailed list of one-click payment methods.\n     */\n    oneClickPaymentMethods?: RecurringDetail;\n\n    /**\n     * Detailed list of payment methods required to generate payment forms.\n     */\n    paymentMethods?: AdyenPaymentMethod[];\n\n    /**\n     * List of all stored payment methods.\n     */\n    storedPaymentMethods?: AdyenStoredPaymentMethod[];\n}\n\nexport interface AdyenPaymentMethod {\n    /**\n     * List of possible brands. For example: visa, mc.\n     */\n    brands?: string[];\n\n    /**\n     * The configuration of the payment method.\n     */\n    configuration?: object;\n\n    /**\n     * All input details to be provided to complete the payment with this payment\n     * method.\n     */\n    details?: InputDetail[];\n\n    /**\n     * The group where this payment method belongs to.\n     */\n    group?: Group;\n\n    /**\n     * The displayable name of this payment method.\n     */\n    name?: string;\n\n    /**\n     * Echo data required to send in next calls.\n     */\n    paymentMethodData?: string;\n\n    /**\n     * Indicates whether this payment method supports tokenization or not.\n     */\n    supportsRecurring?: boolean;\n\n    /**\n     * The unique payment method code.\n     */\n    type?: string;\n}\n\nexport interface AdyenPaymentMethodGroup {\n    /**\n     * The type to submit for any payment method in this group.\n     */\n    groupType?: string;\n\n    /**\n     * The human-readable name of this group.\n     */\n    name?: string;\n\n    /**\n     * The types of payment methods that belong in this group.\n     */\n    types?: string[];\n}\n\nexport interface InputDetail {\n    /**\n     * Configuration parameters for the required input.\n     */\n    configuration?: object;\n\n    /**\n     * Input details can also be provided recursively.\n     */\n    details?: SubInputDetail[];\n\n    /**\n     * In case of a select, the URL from which to query the items.\n     */\n    itemSearchUrl?: string;\n\n    /**\n     * In case of a select, the items to choose from.\n     */\n    items?: Item[];\n\n    /**\n     * The value to provide in the result.\n     */\n    key?: string;\n\n    /**\n     * True if this input value is optional.\n     */\n    optional?: boolean;\n\n    /**\n     * The type of the required input.\n     */\n    type?: string;\n\n    /**\n     * The value can be pre-filled, if available.\n     */\n    value?: string;\n}\n\nexport enum ThreeDS2ComponentType {\n    ThreeDS2DeviceFingerprint = 'threeDS2DeviceFingerprint',\n    ThreeDS2Challenge = 'threeDS2Challenge',\n}\n\nexport interface ThreeDS2Result {\n    payment_data: string;\n    result_code: string;\n    token: string;\n}\n\nexport interface ThreeDS1Result {\n    acs_url: string;\n    payer_auth_request: string;\n    callback_url: string;\n    merchant_data: string;\n}\n\nexport interface SubInputDetail {\n    /**\n     * Configuration parameters for the required input.\n     */\n    configuration?: object;\n\n    /**\n     * In case of a select, the items to choose from.\n     */\n    items?: Item[];\n\n    /**\n     * The value to provide in the result.\n     */\n    key?: string;\n\n    /**\n     * True if this input is optional to provide.\n     */\n    optional?: boolean;\n\n    /**\n     * The type of the required input.\n     */\n    type?: string;\n\n    /**\n     * The value can be pre-filled, if available.\n     */\n    value?: string;\n}\n\nexport interface Item {\n    /**\n     * The value to provide in the result.\n     */\n    id?: string;\n\n    /**\n     * The display name.\n     */\n    name?: string;\n}\n\nexport interface Group {\n    /**\n     * The name of the group.\n     */\n    name?: string;\n\n    /**\n     * Echo data to be used if the payment method is displayed as part of this group.\n     */\n    paymentMethodData?: string;\n\n    /**\n     * The unique code of the group.\n     */\n    type?: string;\n}\n\nexport interface AdyenStoredPaymentMethod {\n    /**\n     * The brand of the card.\n     */\n    brand?: string;\n\n    /**\n     * The month the card expires.\n     */\n    expiryMonth?: string;\n\n    /**\n     * The year the card expires.\n     */\n    expiryYear?: string;\n\n    /**\n     * The unique payment method code.\n     */\n    holderName?: string;\n\n    /**\n     * A unique identifier of this stored payment method.\n     */\n    id?: string;\n\n    /**\n     * The last four digits of the PAN.\n     */\n    lastFour?: string;\n\n    /**\n     * The display name of the stored payment method.\n     */\n    name: string;\n\n    /**\n     * The shopper’s email address.\n     */\n    shopperEmail?: string;\n\n    /**\n     * The supported shopper interactions for this stored payment method.\n     */\n    supportedShopperInteractions?: string[];\n\n    /**\n     * The type of payment method.\n     */\n    type?: string;\n}\n\nexport interface RecurringDetail extends AdyenPaymentMethod {\n    /**\n     * The reference that uniquely identifies the recurring detail.\n     */\n    recurringDetailReference?: string;\n\n    /**\n     * Contains information on previously stored payment details.\n     */\n    storedDetails?: StoredDetails;\n}\n\nexport interface StoredDetails {\n    /**\n     * The stored bank account.\n     */\n    bank?: Bank;\n\n    /**\n     * The stored card information.\n     */\n    card?: Card;\n\n    /**\n     * The email associated with stored payment details.\n     */\n    emailAddress?: string;\n}\n\nexport interface Bank {\n    /**\n     * The bank account number (without separators).\n     */\n    bankAccountNumber?: string;\n\n    /**\n     * The bank city.\n     */\n    bankCity?: string;\n\n    /**\n     * The location id of the bank. The field value is nil in most cases.\n     */\n    bankLocationId?: string;\n\n    /**\n     * The name of the bank.\n     */\n    bankName?: string;\n\n    /**\n     * The Business Identifier Code (BIC) is the SWIFT address assigned to\n     * a bank. The field value is nil in most cases.\n     */\n    bic?: string;\n\n    /**\n     * Country code where the bank is located.\n     * A valid value is an ISO two-character country code (e.g. 'NL').\n     */\n    countryCode?: string;\n\n    /**\n     * The International Bank Account Number (IBAN).\n     */\n    iban?: string;\n\n    /**\n     * The name of the bank account holder. If you submit a name with non-Latin\n     * characters, we automatically replace some of them with corresponding Latin\n     * characters to meet the FATF recommendations. For example:\n     * χ12 is converted to ch12.\n     * üA is converted to euA.\n     * Peter Møller is converted to Peter Mller, because banks don't accept 'ø'.\n     * After replacement, the ownerName must have at least three alphanumeric characters\n     * (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character\n     * (A-Z, a-z). For example:\n     * John17 - allowed.\n     * J17 - allowed.\n     * 171 - not allowed.\n     * John-7 - allowed.\n     */\n    ownerName?: string;\n\n    /**\n     * The bank account holder's tax ID.\n     */\n    taxId?: string;\n}\n\nexport interface Card {\n    /**\n     * The card verification code (1-20 characters). Depending on the card brand, it\n     * is known also as:\n     * CVV2/CVC2 – length: 3 digits\n     * CID – length: 4 digits\n     */\n    cvc?: string;\n\n    /**\n     * The card expiry month. Format: 2 digits, zero-padded for single digits. For example:\n     * 03 = March\n     * 11 = November\n     * Required\n     */\n    expiryMonth: string;\n\n    /**\n     * The card expiry year. Format: 4 digits. For example: 2020\n     * Required\n     */\n    expiryYear: string;\n\n    /**\n     * The name of the cardholder, as printed on the card.\n     * Required\n     */\n    holderName: string;\n\n    /**\n     * The issue number of the card (for some UK debit cards only).\n     */\n    issueNumber?: string;\n\n    /**\n     * The card number (4-19 characters). Do not use any separators. When this value is\n     * returned in a response, only the last 4 digits of the card number are returned.\n     * Required\n     */\n    number: string;\n\n    /**\n     * The month component of the start date (for some UK debit cards only).\n     */\n    startNumnber?: string;\n\n    /**\n     * The year component of the start date (for some UK debit cards only).\n     */\n    startYear?: string;\n}\n\nexport interface CreditCardPlaceHolder {\n    encryptedCardNumber?: string;\n    encryptedExpiryDate?: string;\n    encryptedSecurityCode: string;\n}\n\nexport interface SepaPlaceHolder {\n    ownerName?: string;\n    ibanNumber?: string;\n}\n\nexport interface AdyenComponent {\n    mount(containerId: string): HTMLElement;\n    unmount(): void;\n}\n\nexport interface AdyenCheckout {\n    create(type: string, componentOptions?: CreditCardComponentOptions |\n        ThreeDS2DeviceFingerprintComponentOptions | ThreeDS2ChallengeComponentOptions): AdyenComponent;\n}\n\nexport interface ThreeDS2ComponentOptions {\n    threeDS2ChallengeWidgetSize?: string;\n}\n\nexport interface CreditCardComponentOptions {\n    /**\n     * Set an object containing the details array for type: scheme from\n     * the /paymentMethods response.\n     */\n    details?: InputDetail[];\n\n    /**\n     * Set to true to show the checkbox to save card details for the next payment.\n     */\n    enableStoreDetails?: boolean;\n\n    /**\n     * Set to true to request the name of the card holder.\n     */\n    hasHolderName?: boolean;\n\n    /**\n     * Set to true to require the card holder name.\n     */\n    holderNameRequired?: boolean;\n\n    /**\n     * Prefill the card holder name field. Supported from Card component\n     */\n    holderName?: string;\n\n    /**\n     * Defaults to ['mc','visa','amex']. Configure supported card types to\n     * facilitate brand recognition used in the Secured Fields onBrand callback.\n     * See list of available card types. If a shopper enters a card type not\n     * specified in the GroupTypes configuration, the onBrand callback will not be invoked.\n     */\n    groupTypes?: string[];\n    /**\n     * Set a style object to customize the input fields. See Styling Secured Fields\n     * for a list of supported properties.\n     */\n    styles?: AdyenStyleOptions;\n\n    /**\n     * Specify the sample values you want to appear for card detail input fields.\n     */\n    placeholders?: CreditCardPlaceHolder | SepaPlaceHolder;\n\n    /**\n     * Called when the shopper enters data in the card input fields.\n     * Here you have the option to override your main Adyen Checkout configuration.\n     */\n    onChange?(state: AdyenCardState, component: AdyenComponent): void;\n}\n\nexport interface AdyenCardState {\n    data: AdyenCardDataPaymentMethodState;\n    isValid?: boolean;\n}\n\nexport interface AdyenCardDataPaymentMethodState {\n    paymentMethod: AdyenCardPaymentMethodState;\n}\nexport interface AdyenCardPaymentMethodState {\n    encryptedCardNumber: string;\n    encryptedExpiryMonth: string;\n    encryptedExpiryYear: string;\n    encryptedSecurityCode: string;\n    holderName?: string;\n    type: string;\n}\nexport interface ThreeDS2DeviceFingerprintComponentOptions {\n    fingerprintToken: string;\n    onComplete(fingerprintData: any): void;\n    onError(error: AdyenError): void;\n}\n\nexport enum ResultCode {\n    AuthenticationFinished = 'AuthenticationFinished',\n    Authorised = 'Authorised',\n    Cancelled = 'Cancelled',\n    ChallengeShopper = 'ChallengeShopper',\n    Error = 'Error',\n    IdentifyShopper = 'IdentifyShopper',\n    Pending = 'Pending',\n    Received = 'Received',\n    RedirectShopper = 'RedirectShopper',\n    Refused = 'Refused',\n}\n\nexport interface ThreeDS2ChallengeComponentOptions {\n    challengeToken: string;\n    size?: string;\n    onComplete(fingerprintData: any): void;\n    onError(error: AdyenError): void;\n}\n\nexport interface AdyenStyleOptions {\n    /**\n     * Base styling applied to the iframe. All styling extends from this style.\n     */\n    base?: CssProperties;\n\n    /**\n     * Styling applied when a field fails validation.\n     */\n    error?: CssProperties;\n\n    /**\n     * Styling applied to the field's placeholder values.\n     */\n    placeholder?: CssProperties;\n\n    /**\n     * Styling applied once a field passes validation.\n     */\n    validated?: CssProperties;\n}\n\nexport interface AdyenError {\n    errorCode: string;\n    message: string;\n}\n\nexport interface CssProperties {\n    background?: string;\n    color?: string;\n    display?: string;\n    font?: string;\n    fontFamily?: string;\n    fontSize?: string;\n    fontSizeAdjust?: string;\n    fontSmoothing?: string;\n    fontStretch?: string;\n    fontStyle?: string;\n    fontVariant?: string;\n    fontVariantAlternates?: string;\n    fontVariantCaps?: string;\n    fontVariantEastAsian?: string;\n    fontVariantLigatures?: string;\n    fontVariantNumeric?: string;\n    fontWeight?: string;\n    letterSpacing?: string;\n    lineHeight?: string;\n    mozOsxFontSmoothing?: string;\n    mozTransition?: string;\n    outline?: string;\n    opacity?: string | number;\n    padding?: string;\n    textAlign?: string;\n    textShadow?: string;\n    transition?: string;\n    webkitFontSmoothing?: string;\n    webkitTransition?: string;\n}\n\nexport interface ThreeDS2OnComplete {\n    data: {\n        details: {\n            'threeds2.challengeResult'?: string;\n            'threeds2.fingerprint'?: string;\n            paymentData: string;\n        };\n    };\n}\n\nexport interface ThreeDSRequiredErrorResponse {\n    errors: [\n        { code: string }\n    ];\n    three_ds_result: {\n        result_code: ResultCode;\n        token?: string;\n        payment_data?: string;\n        acs_url?: string;\n        callback_url?: string;\n        payer_auth_request?: string;\n        merchant_data?: string;\n    };\n    status: string;\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategyType from './payment-strategy-type';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy, PaymentStrategyType> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n\n        const cacheToken = [paymentMethod.gateway, paymentMethod.id]\n            .filter(value => value !== undefined && value !== null)\n            .join('-');\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): PaymentStrategyType {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactoryForMethod(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return PaymentStrategyType.OFFLINE;\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return PaymentStrategyType.LEGACY;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return PaymentStrategyType.OFFSITE;\n        }\n\n        return PaymentStrategyType.CREDIT_CARD;\n    }\n\n    private _hasFactoryForMethod(\n        methodId: string\n    ): methodId is PaymentStrategyType {\n        return this._hasFactory(methodId);\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType, NotInitializedErrorType,\n    RequestError\n} from '../../../common/error/errors';\nimport NotInitializedError from '../../../common/error/errors/not-initialized-error';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { HostedInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport {\n    AdyenCardState,\n    AdyenCheckout,\n    AdyenComponent,\n    AdyenConfiguration,\n    AdyenError,\n    ResultCode,\n    ThreeDS2ComponentType,\n    ThreeDS2OnComplete,\n    ThreeDS2Result,\n} from './adyenv2';\nimport AdyenV2PaymentInitializeOptions from './adyenv2-initialize-options';\nimport AdyenV2ScriptLoader from './adyenv2-script-loader';\n\nexport default class AdyenV2PaymentStrategy implements PaymentStrategy {\n    private _adyenCheckout?: AdyenCheckout;\n    private _stateContainer?: string;\n    private _adyenv2?: AdyenV2PaymentInitializeOptions;\n    private _adyenComponent?: AdyenComponent;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _adyenV2ScriptLoader: AdyenV2ScriptLoader,\n        private _formPoster: FormPoster,\n        private _locale: string\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { adyenv2 } = options;\n\n        if (!adyenv2) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.adyenv2\" argument is not provided.');\n        }\n\n        const paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._adyenv2 = adyenv2;\n\n        const configuration: AdyenConfiguration = {\n            environment:  paymentMethod.initializationData.environment,\n            locale: this._locale,\n            originKey: paymentMethod.initializationData.originKey,\n            paymentMethodsResponse: paymentMethod.initializationData.paymentMethodsResponse,\n        };\n\n        return this._adyenV2ScriptLoader.load(configuration)\n            .then(adyenCheckout => {\n                this._adyenCheckout = adyenCheckout;\n\n                const adyenComponent = this._adyenCheckout.create(\n                    paymentMethod.method,\n                    {\n                        ...adyenv2.options,\n                        onChange: (state: AdyenCardState) => {\n                            this._updateStateContainer(state);\n                        },\n                    }\n                );\n\n                adyenComponent.mount(`#${adyenv2.containerId}`);\n\n                this._adyenComponent = adyenComponent;\n\n                return Promise.resolve(this._store.getState());\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const shouldSaveInstrument = paymentData && (paymentData as HostedInstrument).shouldSaveInstrument;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (paymentData && isVaultedInstrument(paymentData)) {\n                    return this._store.dispatch(this._paymentActionCreator.submitPayment({...payment, paymentData}));\n                }\n\n                const paymentPayload = {\n                    methodId: payment.methodId,\n                    paymentData: {\n                        nonce: this._getStateContainer(),\n                        shouldSaveInstrument,\n                    },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n            })\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                if (error.body.three_ds_result.result_code === ResultCode.IdentifyShopper) {\n                    return this._handle3DS2Fingerprint(error.body.three_ds_result, payment.methodId)\n                        .then((payment: Payment) =>\n                            this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n                        )\n                        .catch(error => {\n                            if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                                return Promise.reject(error);\n                            }\n\n                            if (error.body.three_ds_result.result_code === ResultCode.ChallengeShopper) {\n                                return this._handle3DS2Challenge(error.body.three_ds_result, payment.methodId)\n                                    .then((payment: Payment) =>\n                                        this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n                                    );\n                            }\n\n                            return Promise.reject(error);\n                        });\n                }\n\n                if (error.body.three_ds_result.result_code === ResultCode.ChallengeShopper) {\n                    return this._handle3DS2Challenge(error.body.three_ds_result, payment.methodId)\n                        .then((payment: Payment) =>\n                            this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n                        );\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._adyenComponent) {\n            this._adyenComponent.unmount();\n            this._adyenComponent = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _getAdyenV2PaymentInitializeOptions(): AdyenV2PaymentInitializeOptions {\n        if (!this._adyenv2) {\n            throw new InvalidArgumentError(' \"options.adyenv2\" argument was not provided during initialization.');\n        }\n\n        return this._adyenv2;\n    }\n\n    private _getStateContainer(): string {\n        if (!this._stateContainer) {\n            return '{}';\n        }\n\n        return this._stateContainer;\n    }\n\n    private _getThreeDS2ChallengeWidgetSize(): string {\n        const { threeDS2Options } = this._getAdyenV2PaymentInitializeOptions();\n\n        if (!threeDS2Options) {\n            throw new InvalidArgumentError('\"options.adyenv2.threeds2options\" argument was not provided during initialization.');\n        }\n\n        const { threeDS2ChallengeWidgetSize } = threeDS2Options;\n\n        if (!threeDS2ChallengeWidgetSize) {\n            return '01';\n        }\n\n        return threeDS2ChallengeWidgetSize;\n    }\n\n    private _handle3DS2Challenge(resultObject: ThreeDS2Result, paymentMethodId: string): Promise<Payment> {\n        return new Promise((resolve, reject) => {\n            if (!this._adyenCheckout) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const threeDS2Component = this._adyenCheckout\n                .create(ThreeDS2ComponentType.ThreeDS2Challenge, {\n                    challengeToken: resultObject.token,\n                    onComplete: (challengeData: ThreeDS2OnComplete) => {\n                        const challengePaymentPayload = {\n                            ...challengeData.data,\n                            paymentData: resultObject.payment_data,\n                        };\n\n                        const paymentPayload = {\n                            methodId: paymentMethodId,\n                            paymentData: {\n                                nonce: JSON.stringify(challengePaymentPayload),\n                            },\n                        };\n\n                        resolve(paymentPayload);\n                    },\n                    onError: (error: AdyenError) => reject(error),\n                    size: this._getThreeDS2ChallengeWidgetSize(),\n                });\n\n            const threeDS2Container = this._getAdyenV2PaymentInitializeOptions().threeDS2ContainerId;\n\n            threeDS2Component.mount(`#${threeDS2Container}`);\n        });\n    }\n\n    private _handle3DS2Fingerprint(resultObject: ThreeDS2Result, paymentMethodId: string): Promise<Payment> {\n        return new Promise((resolve, reject) => {\n            if (!this._adyenCheckout) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const threeDS2Component = this._adyenCheckout\n                .create(ThreeDS2ComponentType.ThreeDS2DeviceFingerprint, {\n                    fingerprintToken: resultObject.token,\n                    onComplete: (fingerprintData: ThreeDS2OnComplete) => {\n                        const fingerprintPaymentPayload = {\n                            ...fingerprintData.data,\n                            paymentData: resultObject.payment_data,\n                        };\n\n                        const paymentPayload = {\n                            methodId: paymentMethodId,\n                            paymentData: {\n                                nonce: JSON.stringify(fingerprintPaymentPayload),\n                            },\n                        };\n\n                        resolve(paymentPayload);\n                    },\n                    onError: (error: AdyenError) => reject(error),\n                });\n\n            const threeDS2Container = this._getAdyenV2PaymentInitializeOptions().threeDS2ContainerId;\n\n            threeDS2Component.mount(`#${threeDS2Container}`);\n        });\n    }\n\n    private _updateStateContainer(newState: AdyenCardState) {\n        if (newState.isValid) {\n            const state = {\n                ...newState.data.paymentMethod,\n                origin: window.location.origin,\n            };\n\n            this._stateContainer = JSON.stringify(state);\n        }\n    }\n}\n","export enum OrderIncludes {\n    DigitalItemsCategories = 'lineItems.digitalItems.categories',\n    PhysicalItemsCategories = 'lineItems.physicalItems.categories',\n}\n\nexport default interface OrderParams {\n    include?: OrderIncludes[];\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport {\n    AdyenCheckout,\n    AdyenConfiguration,\n    AdyenHostWindow\n} from './adyenv2';\n\nexport default class AdyenV2ScriptLoader {\n    private _stylesheets: { [key: string]: Promise<Event> } = {};\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: AdyenHostWindow = window\n    ) {}\n\n    load(configuration: AdyenConfiguration): Promise<AdyenCheckout> {\n        return Promise.all([\n            this._loadStylesheet(`https://checkoutshopper-${configuration.environment}.adyen.com/checkoutshopper/sdk/3.0.0/adyen.css`),\n            this._scriptLoader.loadScript(`https://checkoutshopper-${configuration.environment}.adyen.com/checkoutshopper/sdk/3.0.0/adyen.js`),\n        ])\n        .then(() => {\n            if (!this._window.AdyenCheckout) {\n                throw new PaymentMethodClientUnavailableError();\n            }\n\n            return new this._window.AdyenCheckout(configuration);\n        })\n        .catch(() => {\n            throw new PaymentMethodClientUnavailableError();\n        });\n\n    }\n\n    private _loadStylesheet(src: string): Promise<Event> {\n        if (!this._stylesheets[src]) {\n            this._stylesheets[src] = new Promise((resolve, reject) => {\n                const stylesheet = document.createElement('link');\n\n                stylesheet.onload = event => {\n                    resolve(event);\n                };\n                stylesheet.onerror = event => {\n                    delete this._stylesheets[src];\n                    reject(event);\n                };\n                stylesheet.type = 'text/css';\n                stylesheet.rel = 'stylesheet';\n                stylesheet.href = src;\n\n                document.head.appendChild(stylesheet);\n            });\n        }\n\n        return this._stylesheets[src];\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import { LineItemCategory } from '../../../cart/line-item';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { AmountTransformer } from '../../../common/utility';\nimport { Order, OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { OrderIncludes } from '../../../order/order-params';\nimport { Consignment } from '../../../shipping';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Affirm, AffirmAddress, AffirmDiscount, AffirmFailResponse, AffirmItem, AffirmRequestData, AffirmSuccessResponse } from './affirm';\nimport AffirmScriptLoader from './affirm-script-loader';\n\nexport default class AffirmPaymentStrategy implements PaymentStrategy {\n    private _affirm?: Affirm;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _affirmScriptLoader: AffirmScriptLoader\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { config: { testMode }, clientToken: publicKey } = paymentMethod;\n\n                return this._affirmScriptLoader.load(publicKey, testMode);\n            })\n            .then(affirm => {\n                this._affirm = affirm;\n\n                return this._store.getState();\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const methodId = payload.payment && payload.payment.methodId;\n        const { useStoreCredit } = payload;\n        const { _affirm } = this;\n\n        if (!_affirm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        const requestOptions = {\n            ...options,\n            params: {\n                include: [\n                    OrderIncludes.PhysicalItemsCategories,\n                    OrderIncludes.DigitalItemsCategories,\n                ],\n            },\n        };\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, requestOptions))\n            .then<AffirmSuccessResponse>(() => {\n                _affirm.checkout(this._getCheckoutInformation());\n\n                return new Promise((resolve, reject) => {\n                    _affirm.checkout.open({\n                        onFail: (failObject: AffirmFailResponse) => {\n                            failObject.reason === 'canceled' ? reject(new PaymentMethodCancelledError()) : reject(new PaymentMethodInvalidError());\n                        },\n                        onSuccess: successObject => { resolve(successObject); },\n                    });\n                    _affirm.ui.error.on('close', () => {\n                        reject(new PaymentMethodCancelledError());\n                    });\n                });\n            })\n            .then(result => {\n                const paymentPayload = {\n                    methodId,\n                    paymentData: { nonce: result.checkout_token },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._affirm) {\n            this._affirm = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getCheckoutInformation(): AffirmRequestData {\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const consignments = state.consignments.getConsignments();\n        const order = state.order.getOrder();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const amountTransformer = new AmountTransformer(order.currency.decimalPlaces);\n        const billingAddress = this._getBillingAddress();\n\n        return {\n            merchant: {\n                user_confirmation_url: config.links.checkoutLink,\n                user_cancel_url: config.links.checkoutLink,\n                user_confirmation_url_action: 'POST',\n            },\n            shipping: this._getShippingAddress() || billingAddress,\n            billing: billingAddress,\n            items: this._getItems(amountTransformer, order),\n            metadata: {\n                shipping_type: this._getShippingType(consignments),\n                mode: 'modal',\n                platform_type: 'BigCommerce',\n                platform_version: '',\n                platform_affirm: '',\n            },\n            discounts: this._getDiscounts(amountTransformer, order),\n            order_id: order.orderId ? order.orderId.toString() : '',\n            shipping_amount: amountTransformer.toInteger(order.shippingCostTotal),\n            tax_amount: amountTransformer.toInteger(order.taxTotal),\n            total: amountTransformer.toInteger(order.orderAmount),\n        };\n    }\n\n    private _getShippingType(consignments?: Consignment[]): string {\n        if (!consignments) {\n            return '';\n        }\n\n        const consignment = consignments[0];\n\n        return consignment && consignment.selectedShippingOption ?\n            consignment.selectedShippingOption.type : '';\n    }\n\n    private _getBillingAddress(): AffirmAddress {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const billingInformation = {\n            name: {\n                first: billingAddress.firstName,\n                last: billingAddress.lastName,\n                full: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            },\n            address: {\n                line1: billingAddress.address1,\n                line2: billingAddress.address2,\n                city: billingAddress.city,\n                state: billingAddress.stateOrProvinceCode,\n                zipcode: billingAddress.postalCode,\n                country: billingAddress.countryCode,\n            },\n            phone_number: billingAddress.phone,\n            email: billingAddress.email,\n        };\n\n        return billingInformation;\n    }\n\n    private _getShippingAddress(): AffirmAddress | undefined {\n        const state = this._store.getState();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n\n        if (!shippingAddress) {\n            return;\n        }\n\n        const shippingInformation = {\n            name: {\n                first: shippingAddress.firstName,\n                last: shippingAddress.lastName,\n                full: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            },\n            address: {\n                line1: shippingAddress.address1,\n                line2: shippingAddress.address2,\n                city: shippingAddress.city,\n                state: shippingAddress.stateOrProvinceCode,\n                zipcode: shippingAddress.postalCode,\n                country: shippingAddress.countryCode,\n            },\n            phone_number: shippingAddress.phone,\n        };\n\n        return shippingInformation;\n    }\n\n    private _getItems(amountTransformer: AmountTransformer, order: Order): AffirmItem[] {\n        const items: AffirmItem[] = [];\n\n        for (const item of order.lineItems.physicalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.digitalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.giftCertificates) {\n            items.push({\n                display_name: item.name,\n                sku: '',\n                unit_price: amountTransformer.toInteger(item.amount),\n                qty: 1,\n                item_image_url: '',\n                item_url: '',\n            });\n        }\n\n        if (order.lineItems.customItems) {\n            for (const item of order.lineItems.customItems) {\n                items.push({\n                    display_name: item.name,\n                    sku: item.sku,\n                    unit_price: amountTransformer.toInteger(item.listPrice),\n                    qty: item.quantity,\n                    item_image_url: '',\n                    item_url: '',\n                });\n            }\n        }\n\n        return items;\n    }\n\n    private _getDiscounts(amountTransformer: AmountTransformer, order: Order): AffirmDiscount {\n        const discounts: AffirmDiscount = {};\n\n        for (const line of order.coupons) {\n            if (line.discountedAmount > 0) {\n                discounts[line.code] = {\n                    discount_amount: amountTransformer.toInteger(line.discountedAmount),\n                    discount_display_name: line.displayName,\n                };\n            }\n        }\n\n        if (order.discountAmount > 0) {\n            discounts.DISCOUNTED_AMOUNT = {\n                discount_amount: amountTransformer.toInteger(order.discountAmount),\n                discount_display_name: 'discount',\n            };\n        }\n\n        return discounts;\n    }\n\n    private _getCategories(categories?: LineItemCategory[][]): string[][] {\n        if (!categories) {\n            return[[]];\n        }\n\n        return categories.map(categoryTree => categoryTree.map(category => category.name));\n    }\n}\n","/**\n * Used this approach as Affirm uses snipped for initializing. Please refer to Affirm documentation in: https://docs.affirm.com/Integrate_Affirm/Direct_API#1._Add_Affirm.js\n */\nexport default Function(`\n'use strict';\nreturn function loadAffirmJS(apiKey, scriptURL) {\n    var _affirm_config = {\n        public_api_key:  apiKey,\n        script:          scriptURL\n    };\n    (function(l,g,m,e,a,f,b){var d,c=l[m]||{},h=document.createElement(f),n=document.getElementsByTagName(f)[0],k=function(a,b,c){return function(){a[b]._.push([c,arguments])}};c[e]=k(c,e,\"set\");d=c[e];c[a]={};c[a]._=[];d._=[];c[a][b]=k(c,a,b);a=0;for(b=\"set add save post open empty reset on off trigger ready setProduct\".split(\" \");a<b.length;a++)d[b[a]]=k(c,e,b[a]);a=0;for(b=[\"get\",\"token\",\"url\",\"items\"];a<b.length;a++)d[b[a]]=function(){};h.async=!0;h.src=g[f];n.parentNode.insertBefore(h,n);delete g[f];d(g);l[m]=c})(window,_affirm_config,\"affirm\",\"checkout\",\"ui\",\"script\",\"ready\");\n}`)();\n","import { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Affirm, AffirmHostWindow, AffirmScripts } from './affirm';\nimport loadAffirmJS from './affirmJs';\n\nexport default class AffirmScriptLoader {\n    constructor(\n        public _window: AffirmHostWindow = window\n    ) { }\n\n    load(apikey?: string, testMode?: boolean): Promise<Affirm> {\n        const scriptURI = this._getScriptURI(testMode);\n\n        loadAffirmJS(apikey, scriptURI);\n\n        if (!this._window.affirm) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return Promise.resolve(this._window.affirm);\n    }\n\n    private _getScriptURI(testMode: boolean = false): string {\n        const SCRIPTS_DEFAULT: AffirmScripts = {\n            PROD: '//cdn1.affirm.com/js/v2/affirm.js',\n            SANDBOX: '//cdn1-sandbox.affirm.com/js/v2/affirm.js',\n        };\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { StoreCreditActionCreator } from '../../../store-credit';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy implements PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._afterpaySdk = await this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName));\n\n        return this._store.getState();\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        let state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n        const { useStoreCredit } = payload;\n\n        if (useStoreCredit !== undefined) {\n            state = await this._store.dispatch(\n                this._storeCreditActionCreator.applyStoreCredit(useStoreCredit)\n            );\n        }\n\n        await this._checkoutValidator.validate(state.checkout.getCheckout(), options);\n\n        state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n        );\n\n        await this._redirectToAfterpay(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId));\n\n        // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n        return new Promise<never>(() => {});\n    }\n\n    async finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n        const config = state.config.getContextConfig();\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config || !config.payment.token) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const paymentPayload = {\n            methodId: payment.providerId,\n            paymentData: { nonce: config.payment.token },\n        };\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder({}, options));\n\n        return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n    }\n\n    private _redirectToAfterpay(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.redirect({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as unknown as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (_: any, key: string) => isPrivate(key));\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { noop } from 'lodash';\n\nimport {\n    isInternalAddressEqual,\n    mapFromInternalAddress,\n    mapToInternalAddress\n} from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    RequestError\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayConfirmationFlow from './amazon-pay-confirmation-flow';\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayPaymentInitializeOptions from './amazon-pay-payment-initialize-options';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n    private _isPaymentMethodSelected: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n        this._isPaymentMethodSelected = false;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._walletOptions = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const sellerId = this._getMerchantId();\n\n        if (!referenceId || !sellerId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        if (!this._isPaymentMethodSelected) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        if (options && this._paymentMethod && this._paymentMethod.config.is3dsEnabled) {\n            return this._processPaymentWith3ds(\n                sellerId,\n                referenceId,\n                paymentPayload.methodId,\n                useStoreCredit,\n                options\n            );\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _getOrderReferenceIdFromInitializationData(): string | undefined {\n        return this._paymentMethod ? this._paymentMethod.initializationData.orderReferenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId() || this._getOrderReferenceIdFromInitializationData();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => {\n                            this._isPaymentMethodSelected = true;\n                            onPaymentSelect(orderReference);\n                        })\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!this._getOrderReferenceId()) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n\n    private _processPaymentWith3ds(sellerId: string, referenceId: string, methodId: string, useStoreCredit: boolean, options: PaymentRequestOptions): Promise<never> {\n        return new Promise((_, reject) => {\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            return this._window.OffAmazonPayments.initConfirmationFlow(\n                sellerId,\n                referenceId,\n                (confirmationFlow: AmazonPayConfirmationFlow) => {\n                    return this._store.dispatch(\n                        this._orderActionCreator.submitOrder({useStoreCredit}, options)\n                    )\n                        .then(() => this._store.dispatch(\n                            this._remoteCheckoutActionCreator.initializePayment(methodId, {\n                                referenceId,\n                                useStoreCredit,\n                            }))\n                        )\n                        .then(() => {\n                            confirmationFlow.success();\n\n                            return new Promise<never>(() => {});\n                        })\n                        .catch(error => {\n                            confirmationFlow.error();\n\n                            return reject(error);\n                        });\n                }\n            );\n        });\n    }\n}\n","export interface OverlayOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n}\n\nexport interface OverlayShowOptions {\n    onClick?(event: MouseEvent): void;\n}\n\nexport default class Overlay {\n    private _element: HTMLElement;\n    private _unregisterClick?: () => void;\n\n    constructor(options?: OverlayOptions) {\n        this._element = this._createElement(options);\n    }\n\n    show(options?: OverlayShowOptions): void {\n        if (this._element.parentElement) {\n            return;\n        }\n\n        this._registerClick(options);\n\n        document.body.appendChild(this._element);\n\n        // Fade In\n        setTimeout(() => this._element.style.opacity = '1');\n    }\n\n    remove(): void {\n        if (!this._element.parentElement) {\n            return;\n        }\n\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        this._removeAfterTransition();\n\n        setTimeout(() => this._element.style.opacity = '0');\n    }\n\n    private _createElement(options?: OverlayOptions): HTMLElement {\n        const element = document.createElement('div');\n        const {\n            background = 'rgba(0, 0, 0, 0.8)',\n            id = null,\n            transitionDuration = 400,\n        } = options || {};\n\n        element.style.background = background;\n        element.style.display = 'block';\n        element.style.height = '100%';\n        element.style.left = '0px';\n        element.style.opacity = '0';\n        element.style.position = 'fixed';\n        element.style.top = '0px';\n        element.style.transition = `opacity ${transitionDuration}ms ease-out`;\n        element.style.width = '100%';\n        element.style.zIndex = '2147483647';\n\n        if (id) {\n            element.id = id;\n        }\n\n        return element;\n    }\n\n    private _registerClick(options?: OverlayShowOptions): void {\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        if (options && options.onClick) {\n            const { onClick } = options;\n\n            this._element.addEventListener('click', onClick);\n\n            this._unregisterClick = () => {\n                this._element.removeEventListener('click', onClick);\n                this._unregisterClick = undefined;\n            };\n        }\n    }\n\n    private _removeAfterTransition(): void {\n        const handeTransition: (event: Event) => void = event => {\n            // NOTE: `event` is not correctly typed in this version of TS\n            if ((event as TransitionEvent).propertyName !== 'opacity') {\n                return;\n            }\n\n            if (this._element.parentElement) {\n                this._element.parentElement.removeChild(this._element);\n            }\n\n            this._element.removeEventListener('transitionend', handeTransition);\n        };\n\n        this._element.addEventListener('transitionend', handeTransition);\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((_, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { Overlay } from '../../../common/overlay';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _overlay: Overlay\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => {\n                this._overlay.show({\n                    onClick: () => paypal.focusWindow(),\n                });\n\n                return paypal.tokenize({\n                    amount,\n                    currency,\n                    enableShippingAddress: true,\n                    flow: 'checkout',\n                    locale: storeLanguage,\n                    offerCredit,\n                    useraction: 'commit',\n                });\n            })\n            .then(response => {\n                this._overlay.remove();\n\n                return response;\n            })\n            .catch(error => {\n                this._overlay.remove();\n\n                throw error;\n            });\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed because the client library of a payment method has thrown an unexpected error.');\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodFailedError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy implements PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return this._store.getState();\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new PaymentMethodFailedError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const order = state.order.getOrder();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, order.orderAmount) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","export const CardinalSignatureValidationErrors = [100004, 1010, 1011, 1020];\n\nexport interface CardinalSDK {\n    configure(params: CardinalConfiguration): void;\n    on(params: CardinalEventType, callback: CardinalEventMap[CardinalEventType]): void;\n    off(params: CardinalEventType): void;\n    setup<K extends keyof CardinalInitializationDataMap>(initializationType: K, initializationData: CardinalInitializationDataMap[K]): void;\n    trigger(event: CardinalTriggerEvents, data?: string): Promise<CardinalBinProcessResponse | void>;\n    continue(paymentBrand: CardinalPaymentBrand, continueObject: CardinalContinue, order: CardinalPartialOrder): void;\n    start(paymentBrand: CardinalPaymentBrand, order: CardinalPartialOrder, jwt?: string): void;\n}\n\nexport interface CardinalWindow extends Window {\n    Cardinal?: CardinalSDK;\n}\n\nexport interface CardinalEventMap {\n    [CardinalEventType.SetupCompleted](setupCompleteData: CardinalSetupCompletedData): void;\n    [CardinalEventType.Validated](data: CardinalValidatedData, jwt?: string): void;\n}\n\nexport type CardinalConfiguration = Partial<{\n    logging: {\n        level: string;\n    };\n    payment: {\n        view: string;\n        framework: string;\n        displayLoading: boolean;\n    };\n}>;\n\nexport interface CardinalSetupCompletedData {\n    sessionId: string;\n    modules: CardinalModuleState[];\n}\n\nexport interface CardinalModuleState {\n    loaded: boolean;\n    module: string;\n}\n\nexport enum CardinalInitializationType {\n    Init = 'init',\n    Complete = 'complete',\n    Confirm = 'confirm',\n}\n\nexport interface CardinalInitializationDataMap {\n    [CardinalInitializationType.Init]: CardinalInitTypeData;\n    [CardinalInitializationType.Complete]: CardinalCompleteTypeData;\n    [CardinalInitializationType.Confirm]: CardinalConfirmTypeData;\n}\n\nexport interface CardinalInitTypeData {\n    jwt: string;\n}\n\nexport interface CardinalCompleteTypeData {\n    Status: string;\n}\n\nexport interface CardinalConfirmTypeData {\n    jwt: string;\n    cardinalResponseJwt: string;\n}\n\nexport interface CardinalValidatedData {\n    ActionCode?: CardinalValidatedAction;\n    ErrorDescription: string;\n    ErrorNumber: number;\n    Validated: boolean;\n    Payment?: CardinalPayment;\n}\n\nexport interface CardinalPayment {\n    ExtendedData?: CardinalCCAExtendedData;\n    ProcessorTransactionId: string;\n    Type: CardinalPaymentType;\n}\n\nexport interface CardinalBinProcessResponse {\n    Status: boolean;\n}\n\nexport interface CardinalContinue {\n    AcsUrl: string;\n    Payload: string;\n}\n\nexport interface CardinalPartialOrder {\n    OrderDetails: CardinalOrderDetails;\n    Consumer?: CardinalConsumer;\n}\n\nexport interface CardinalConsumer {\n    Email1?: string;\n    Email2?: string;\n    ShippingAddress?: CardinalAddress;\n    BillingAddress?: CardinalAddress;\n    Account?: CardinalAccount;\n}\n\nexport interface CardinalAccount {\n    AccountNumber: number;\n    ExpirationMonth: number;\n    ExpirationYear: number;\n    NameOnAccount: string;\n    CardCode: number;\n}\n\nexport interface CardinalAddress {\n    FullName?: string;\n    FirstName: string;\n    MiddleName?: string;\n    LastName: string;\n    Address1: string;\n    Address2?: string;\n    Address3?: string;\n    City: string;\n    State: string;\n    PostalCode: string;\n    CountryCode: string;\n    Phone1?: string;\n    Phone2?: string;\n}\n\nexport interface CardinalOrderDetails {\n    OrderNumber: string;\n    Amount: number;\n    CurrencyCode: string;\n    OrderDescription?: string;\n    OrderChannel: string;\n    TransactionId?: string;\n}\n\nexport type CardinalCCAExtendedData = Partial<{\n    CAVV: string;\n    ECIFlag: string;\n    PAResStatus: string;\n    SignatureVerification: string;\n    XID: string;\n    UCAFIndicator: string;\n}>;\n\nexport enum CardinalEventType {\n    SetupCompleted = 'payments.setupComplete',\n    Validated = 'payments.validated',\n}\n\nexport enum CardinalValidatedAction {\n    Success = 'SUCCESS',\n    NoAction = 'NOACTION',\n    Failure = 'FAILURE',\n    Error = 'ERROR',\n}\n\nexport enum CardinalPaymentType {\n    CCA = 'CCA',\n    Paypal = 'Paypal',\n    Wallet = 'Wallet',\n    VisaCheckout = 'VisaCheckout',\n    ApplePay = 'ApplePay',\n    DiscoverWallet = 'DiscoverWallet',\n}\n\nexport enum CardinalTriggerEvents {\n    BinProcess = 'bin.process',\n}\n\nexport enum CardinalPaymentBrand {\n    CCA = 'cca',\n}\n\nexport enum CardinalSignatureVerification {\n    Yes = 'Y',\n    No = 'N',\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError, PaymentMethodFailedError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeError } from './braintree';\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport isBraintreeError from './is-braintree-error';\n\nexport default class BraintreePaypalPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => this._store.getState())\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment, order.useStoreCredit) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: BraintreeError | Error): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        if (error.code === 'PAYPAL_POPUP_CLOSED') {\n            throw new PaymentMethodCancelledError(error.message);\n        }\n\n        throw new PaymentMethodFailedError(error.message);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody, useStoreCredit?: boolean): Promise<Payment> {\n        const state = this._store.getState();\n        const grandTotal = state.checkout.getOutstandingBalance(useStoreCredit);\n        const config = state.config.getStoreConfig();\n\n        if (!grandTotal) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","import { BraintreeError } from './braintree';\n\nexport default function isBraintreeError(error: BraintreeError | Error): error is BraintreeError {\n    return error.name === 'BraintreeError';\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodFailedError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\nimport VisaCheckoutScriptLoader from './visacheckout-script-loader';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (_, error) => onError(error));\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new PaymentMethodFailedError(error.message);\n        }\n\n        throw error;\n    }\n}\n","import { find, some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    RequestError\n} from '../../../common/error/errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    CardinalClient,\n    CardinalOrderData,\n    CardinalSupportedPaymentInstrument\n} from './index';\n\nexport default class CardinalThreeDSecureFlow {\n    private _paymentMethod?: PaymentMethod;\n    private _clientToken?: string;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _cardinalClient: CardinalClient\n    ) {}\n\n    prepare(methodId: string): Promise<void> {\n        if (this._clientToken) {\n            return Promise.resolve();\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._cardinalClient.initialize(methodId, this._paymentMethod.config.testMode);\n            })\n            .then(() => {\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._clientToken = this._paymentMethod.clientToken;\n\n                return this._cardinalClient.configure(this._clientToken);\n            });\n    }\n\n    start(payment: Payment): Promise<InternalCheckoutSelectors> {\n        if (!payment.paymentData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        if (!isCreditCardLike(payment.paymentData) && !isVaultedInstrument(payment.paymentData)) {\n            throw new InvalidArgumentError();\n        }\n\n        const paymentData = payment.paymentData;\n\n        return this._cardinalClient.runBinProcess(this._getBinNumber(paymentData))\n            .then(() => {\n                if (!this._clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                payment = {\n                    ...payment,\n                    paymentData: {\n                        ...paymentData,\n                        threeDSecure: { token: this._clientToken },\n                    },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            })\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, {code: 'three_d_secure_required'})) {\n                    return Promise.reject(error);\n                }\n\n                return this._cardinalClient.getThreeDSecureData(\n                    error.body.three_ds_result,\n                    this._getOrderData(paymentData)\n                )\n                .then(threeDSecure =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({\n                        ...payment,\n                        paymentData: {\n                            ...paymentData,\n                            threeDSecure,\n                        },\n                    }))\n                );\n            });\n    }\n\n    private _getBinNumber(payment: CardinalSupportedPaymentInstrument): string {\n        if (isVaultedInstrument(payment)) {\n            const instruments = this._store.getState().instruments.getInstruments();\n\n            const { instrumentId } = payment;\n\n            const entry = find(instruments, { bigpayToken: instrumentId });\n\n            return entry && entry.iin || '';\n        }\n\n        return payment.ccNumber;\n    }\n\n    private _getOrderData(paymentData: CardinalSupportedPaymentInstrument): CardinalOrderData {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const checkout = state.checkout.getCheckout();\n        const order = state.order.getOrder();\n\n        if (!billingAddress || !billingAddress.email) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        const payment: CardinalOrderData = {\n            billingAddress,\n            shippingAddress,\n            currencyCode: checkout.cart.currency.code,\n            id: order.orderId.toString(),\n            amount: checkout.cart.cartAmount,\n        };\n\n        if (isCreditCardLike(paymentData)) {\n            payment.paymentData = paymentData;\n        }\n\n        return payment;\n    }\n}\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethodFailedError } from '../../errors';\nimport { CreditCardInstrument, ThreeDSecureToken, VaultedInstrument } from '../../payment';\nimport { ThreeDsResult } from '../../payment-response-body';\n\nimport {\n    CardinalAccount,\n    CardinalAddress,\n    CardinalConsumer,\n    CardinalEventType,\n    CardinalInitializationType,\n    CardinalPartialOrder,\n    CardinalPaymentBrand,\n    CardinalScriptLoader,\n    CardinalSignatureValidationErrors,\n    CardinalSignatureVerification,\n    CardinalSDK,\n    CardinalTriggerEvents,\n    CardinalValidatedAction,\n    CardinalValidatedData\n} from './index';\n\nexport type CardinalSupportedPaymentInstrument = CreditCardInstrument | VaultedInstrument;\n\nexport interface CardinalOrderData {\n    billingAddress: BillingAddress;\n    shippingAddress?: Address;\n    currencyCode: string;\n    id: string;\n    amount: number;\n    paymentData?: CreditCardInstrument;\n}\n\nexport default class CardinalClient {\n    private _sdk?: Promise<CardinalSDK>;\n\n    constructor(\n        private _scriptLoader: CardinalScriptLoader\n    ) {}\n\n    initialize(provider: string, testMode?: boolean): Promise<void> {\n        if (!this._sdk) {\n            this._sdk = this._scriptLoader.load(provider, testMode);\n        }\n\n        return this._sdk.then(() => {});\n    }\n\n    configure(clientToken: string): Promise<void> {\n        return this._getClientSDK()\n            .then(client => new Promise<void>((resolve, reject) => {\n                client.on(CardinalEventType.SetupCompleted, () => {\n                    client.off(CardinalEventType.SetupCompleted);\n                    client.off(CardinalEventType.Validated);\n\n                    resolve();\n                });\n\n                client.on(CardinalEventType.Validated, (data: CardinalValidatedData) => {\n                    client.off(CardinalEventType.SetupCompleted);\n                    client.off(CardinalEventType.Validated);\n\n                    switch (data.ActionCode) {\n                        case CardinalValidatedAction.Error:\n                            if (includes(CardinalSignatureValidationErrors, data.ErrorNumber)) {\n                                reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n                            }\n                            reject(new PaymentMethodFailedError(data.ErrorDescription));\n                            break;\n                    }\n                });\n\n                client.setup(CardinalInitializationType.Init, {\n                    jwt: clientToken,\n                });\n            }));\n    }\n\n    runBinProcess(binNumber: string): Promise<void> {\n        return this._getClientSDK()\n            .then(client => client.trigger(CardinalTriggerEvents.BinProcess, binNumber).catch(() => {}))\n            .then(result => {\n                if (!result || !result.Status) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n            });\n    }\n\n    getThreeDSecureData(threeDSecureData: ThreeDsResult, orderData: CardinalOrderData): Promise<ThreeDSecureToken> {\n        return this._getClientSDK()\n            .then(client => {\n                return new Promise<ThreeDSecureToken>((resolve, reject) => {\n                    client.on(CardinalEventType.Validated, (data: CardinalValidatedData, jwt?: string) => {\n                        client.off(CardinalEventType.Validated);\n                        if (!jwt) {\n                            return reject(new PaymentMethodFailedError(data.ErrorDescription ? data.ErrorDescription : 'An error was encountered while processing the transaction.'));\n                        }\n\n                        if (!data.ActionCode) {\n                            return resolve({ token: jwt });\n                        }\n\n                        switch (data.ActionCode) {\n                            case CardinalValidatedAction.Success:\n                                return resolve({ token: jwt });\n                            case CardinalValidatedAction.NoAction:\n                                if (data.ErrorNumber > 0) {\n                                    return reject(new PaymentMethodFailedError(data.ErrorDescription));\n                                } else if (!data.Payment || !data.Payment.ExtendedData || data.Payment.ExtendedData.SignatureVerification !== CardinalSignatureVerification.Yes) {\n                                    return reject(new PaymentMethodFailedError('Transaction signature could not be validated.'));\n                                }\n\n                                return resolve({ token: jwt });\n                            case CardinalValidatedAction.Failure:\n                                return reject(new PaymentMethodFailedError('User failed authentication or an error was encountered while processing the transaction.'));\n                            case CardinalValidatedAction.Error:\n                                return reject(new PaymentMethodFailedError(data.ErrorDescription));\n                        }\n                    });\n\n                    const continueObject = {\n                        AcsUrl: threeDSecureData.acs_url,\n                        Payload: threeDSecureData.merchant_data,\n                    };\n\n                    const partialOrder = this._mapToPartialOrder(orderData, threeDSecureData.payer_auth_request);\n\n                    client.continue(CardinalPaymentBrand.CCA, continueObject, partialOrder);\n                });\n            });\n    }\n\n    private _mapToPartialOrder(orderData: CardinalOrderData, transactionId: string): CardinalPartialOrder {\n        const consumer: CardinalConsumer = {\n            BillingAddress: this._mapToCardinalAddress(orderData.billingAddress),\n        };\n\n        if (orderData.paymentData) {\n            consumer.Account = this._mapToCardinalAccount(orderData.paymentData);\n        }\n\n        if (orderData.billingAddress.email) {\n            consumer.Email1 = orderData.billingAddress.email;\n        }\n\n        if (orderData.shippingAddress) {\n            consumer.ShippingAddress = this._mapToCardinalAddress(orderData.shippingAddress);\n        }\n\n        return  {\n            Consumer: consumer,\n            OrderDetails: {\n                OrderNumber: orderData.id,\n                Amount: orderData.amount,\n                CurrencyCode: orderData.currencyCode,\n                OrderChannel: 'S',\n                TransactionId: transactionId,\n            },\n        };\n    }\n\n    private _mapToCardinalAccount(paymentData: CreditCardInstrument): CardinalAccount {\n        return {\n            AccountNumber: Number(paymentData.ccNumber),\n            ExpirationMonth: Number(paymentData.ccExpiry.month),\n            ExpirationYear: Number(paymentData.ccExpiry.year),\n            NameOnAccount: paymentData.ccName,\n            CardCode: Number(paymentData.ccCvv),\n        };\n    }\n\n    private _mapToCardinalAddress(address: Address): CardinalAddress {\n        const cardinalAddress: CardinalAddress = {\n            FirstName: address.firstName,\n            LastName: address.lastName,\n            Address1: address.address1,\n            City: address.city,\n            State: address.stateOrProvince,\n            PostalCode: address.postalCode,\n            CountryCode: address.countryCode,\n        };\n\n        if (address.address2) {\n            cardinalAddress.Address2 = address.address2;\n        }\n\n        if (address.phone) {\n            cardinalAddress.Phone1 = address.phone;\n        }\n\n        return cardinalAddress;\n    }\n\n    private _getClientSDK(): Promise<CardinalSDK> {\n        if (!this._sdk) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._sdk;\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n\nexport interface ChasePayInitializeOptions {\n    /**\n     * This container is used to host the chasepay branding logo.\n     * It should be an HTML element.\n     */\n    logoContainer: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the ChasePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { CardinalSDK, CardinalWindow } from './cardinal';\n\nconst SDK_TEST_URL = 'https://songbirdstag.cardinalcommerce.com/edge/v1/songbird.js';\nconst SDK_PROD_URL = 'https://songbird.cardinalcommerce.com/edge/v1/songbird.js';\n\nexport default class CardinalScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: CardinalWindow = window\n    ) {}\n\n    load(provider: string, testMode?: boolean): Promise<CardinalSDK> {\n        const url = testMode ? SDK_TEST_URL : SDK_PROD_URL;\n\n        return this._scriptLoader\n            .loadScript(url + '?v=' + provider)\n            .then(() => {\n                if (!this._window.Cardinal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.Cardinal;\n            });\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy implements PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$\n                    .pipe(take(1))\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            },\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport type SquarePaymentFormConstructor = new(options: SquareFormOptions) => SquarePaymentForm;\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class ConvergePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: FormPoster\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(_options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(_options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(_options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport { CardinalThreeDSecureFlow } from '../cardinal';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CyberSourcePaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _threeDSecureFlow: CardinalThreeDSecureFlow\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!this._paymentMethod.config.is3dsEnabled) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._threeDSecureFlow.prepare(methodId)\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._paymentMethod.config.is3dsEnabled ?\n                    this._threeDSecureFlow.start(payment) :\n                    this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { GooglePaymentData, PaymentMethodData } from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\n\nexport default class GooglePayPaymentStrategy implements PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => {\n                this._googlePayOptions = this._getGooglePayOptions(options);\n\n                if (!this._googlePayOptions) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n                }\n\n                const walletButton = this._googlePayOptions.walletButton && document.getElementById(this._googlePayOptions.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return Promise.resolve(this._getPayment())\n            .then(payment => {\n                if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n                    // TODO: Find a way to share the code with _handleWalletButtonClick method\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                        .then(() => onPaymentSelect())\n                        .then(() => this._getPayment())\n                        .catch(error => {\n                            if (error.statusCode !== 'CANCELED') {\n                                onError(error);\n                            }\n                        });\n                }\n\n                return payment;\n            })\n            .then(() =>\n                this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit: payload.useStoreCredit }, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(this._getPayment())))\n            );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        return this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n    }\n\n    private _getGooglePayOptions(options: PaymentInitializeOptions): GooglePayPaymentInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _getPayment(): PaymentMethodData {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce: paymentMethod.initializationData.nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<InternalCheckoutSelectors> {\n        event.preventDefault();\n\n        if (!this._methodId || !this._googlePayOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.displayWallet()\n                .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                .then(() => onPaymentSelect())\n                .catch(error => {\n                    if (error.statusCode !== 'CANCELED') {\n                        onError(error);\n                    }\n                });\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n}\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport BillingAddress from '../../../billing/billing-address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaAddress, KlarnaLoadResponse, KlarnaUpdateSessionParams } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy implements PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n    private _supportedEUCountries = ['AT', 'DE', 'DK', 'FI', 'GB', 'NL', 'NO', 'SE', 'CH'];\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    state => {\n                        if (state.paymentStrategies.isInitialized(options.methodId)) {\n                            this._loadWidget(options);\n                        }\n                    },\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.outstandingBalance;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>(resolve => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n                    resolve(response);\n                });\n            }));\n    }\n\n    private _getUpdateSessionData(billingAddress: BillingAddress, shippingAddress?: Address): KlarnaUpdateSessionParams {\n        if (!includes(this._supportedEUCountries, billingAddress.countryCode)) {\n            return {};\n        }\n\n        const data: KlarnaUpdateSessionParams = {\n            billing_address: this._mapToKlarnaAddress(billingAddress, billingAddress.email),\n        };\n\n        if (shippingAddress) {\n            data.shipping_address = this._mapToKlarnaAddress(shippingAddress, billingAddress.email);\n        }\n\n        return data;\n    }\n\n    private _mapToKlarnaAddress(address: Address, email?: string): KlarnaAddress {\n        const klarnaAddress: KlarnaAddress = {\n            street_address: address.address1,\n            city: address.city,\n            country: address.countryCode,\n            given_name: address.firstName,\n            family_name: address.lastName,\n            postal_code: address.postalCode,\n            region: address.stateOrProvince,\n            email,\n        };\n\n        if (address.address2) {\n            klarnaAddress.street_address2 = address.address2;\n        }\n\n        if (address.phone) {\n            klarnaAddress.phone = address.phone;\n        }\n\n        return klarnaAddress;\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n            const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n            if (!billingAddress) {\n                throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n            }\n\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const updateSessionData = this._getUpdateSessionData(billingAddress, shippingAddress);\n\n            this._klarnaCredit.authorize(updateSessionData, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as unknown as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class LegacyPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport getCallbackUrl from './get-callback-url';\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy implements PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.masterpass\" argument is not provided.');\n                }\n\n                const walletButton  = options.masterpass.walletButton && document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = payload;\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.gateway) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData })));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('checkout'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OfflinePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OffsitePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment(payment.methodId, payment.gatewayId))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport { CardinalThreeDSecureFlow } from '../cardinal';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _threeDSecureFlow: CardinalThreeDSecureFlow\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!this._paymentMethod.config.is3dsEnabled) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._threeDSecureFlow.prepare(methodId)\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._paymentMethod.config.is3dsEnabled ?\n                    this._threeDSecureFlow.start(payment) :\n                    this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy implements PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n    private _useRedirectFlow: boolean = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader,\n        private _window: PaypalHostWindow = window\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n        this._useRedirectFlow = (options.paypalexpress && options.paypalexpress.useRedirectFlow) === true;\n\n        if (!this._isInContextEnabled()) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled() || this._useRedirectFlow) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        this._window.top.location.href = redirectUrl;\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class SagePayPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if the shopper is using a browser version that is not\n * supported by us or any third party provider we use.\n */\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\nimport { noop } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { NonceInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport SquarePaymentForm, {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\nimport SquareScriptLoader from './square-script-loader';\n\nexport default class SquarePaymentStrategy implements PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact\n    ): void {\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n        const onPaymentSelect = this._squareOptions && this._squareOptions.onPaymentSelect || noop;\n\n        if (errors) {\n            onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(\n                this._paymentMethod.id,\n                nonce,\n                cardData,\n                billingContact,\n                shippingContact\n            )\n                .then(onPaymentSelect)\n                .catch(onError);\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (nonce && !errors) {\n            this._deferredRequestNonce.resolve({ nonce });\n\n            return;\n        }\n\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n\n        onError(errors);\n\n        this._deferredRequestNonce.reject(errors);\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            },\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as unknown as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { some } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    RequestError\n} from '../../../common/error/errors';\nimport { Customer } from '../../../customer';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodFailedError } from '../../errors';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { HostedInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport {\n    StripeAddress,\n    StripeBillingDetails,\n    StripeCardElement,\n    StripeHandleCardPaymentOptions,\n    StripePaymentMethodData,\n    StripeShippingDetails,\n    StripeV3Client\n} from './stripev3';\nimport StripeV3ScriptLoader from './stripev3-script-loader';\n\nexport default class StripeV3PaymentStrategy implements PaymentStrategy {\n    private _stripeV3Client?: StripeV3Client;\n    private _cardElement?: StripeCardElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _stripeScriptLoader: StripeV3ScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const stripeOptions = options.stripev3;\n\n        if (!stripeOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.stripev3\" argument is not provided.');\n        }\n\n        const paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._stripeScriptLoader.load(paymentMethod.initializationData.stripePublishableKey)\n            .then(stripeJs => {\n                this._stripeV3Client = stripeJs;\n                const elements = this._stripeV3Client.elements();\n                const cardElement = elements.create('card', {\n                    style: stripeOptions.style,\n                });\n\n                cardElement.mount(`#${stripeOptions.containerId}`);\n\n                this._cardElement = cardElement;\n\n                return Promise.resolve(this._store.getState());\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const shouldSaveInstrument = Boolean(paymentData && (paymentData as HostedInstrument).shouldSaveInstrument);\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (paymentData && isVaultedInstrument(paymentData)) {\n                    return this._store.dispatch(this._paymentActionCreator.submitPayment({...payment, paymentData}))\n                        .catch(error => {\n                            if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                                return Promise.reject(error);\n                            }\n\n                            return this._getStripeJs().handleCardPayment(error.body.three_ds_result.token)\n                                .then(stripeResponse => {\n                                    if (stripeResponse.error || !stripeResponse.paymentIntent.id) {\n                                        throw new PaymentMethodFailedError(stripeResponse.error && stripeResponse.error.message);\n                                    }\n\n                                    const paymentPayload = {\n                                        methodId: payment.methodId,\n                                        paymentData: {\n                                            nonce: stripeResponse.paymentIntent.id,\n                                        },\n                                    };\n\n                                    return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n                                });\n                        });\n                }\n\n                return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId))\n                    .then(state => {\n                        const paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n                        const paymentIntent = paymentMethod && paymentMethod.clientToken;\n\n                        if (!this._cardElement) {\n                            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                        }\n\n                        return this._getStripeJs().createPaymentMethod('card', this._cardElement, this._mapStripePaymentMethodOptions())\n                            .then(stripePaymentMethod => {\n                                if (stripePaymentMethod.error || !stripePaymentMethod.paymentMethod.id) {\n                                    throw new PaymentMethodFailedError(stripePaymentMethod.error && stripePaymentMethod.error.message);\n                                }\n\n                                if (!paymentIntent) {\n                                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                                }\n\n                                const stripeCardPaymentOptions = {\n                                    ...this._mapStripeCardPaymentOptions(shouldSaveInstrument),\n                                    payment_method: stripePaymentMethod.paymentMethod.id,\n                                };\n\n                                return this._getStripeJs().handleCardPayment(paymentIntent, stripeCardPaymentOptions);\n                            })\n                            .then(stripeResponse => {\n                                if (stripeResponse.error || !stripeResponse.paymentIntent.id) {\n                                    throw new PaymentMethodFailedError(stripeResponse.error && stripeResponse.error.message);\n                                }\n\n                                const paymentPayload = {\n                                    methodId: payment.methodId,\n                                    paymentData: {\n                                        nonce: stripeResponse.paymentIntent.id,\n                                        shouldSaveInstrument,\n                                    },\n                                };\n\n                                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n                            });\n                    });\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._cardElement) {\n            this._cardElement.unmount();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _getStripeJs(): StripeV3Client {\n        if (!this._stripeV3Client) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._stripeV3Client;\n    }\n\n    private _mapStripeBillingAddress(billingAddress: BillingAddress | undefined): StripeAddress | undefined {\n        if (!billingAddress) {\n            return undefined;\n        }\n\n        return {\n            city: billingAddress.city,\n            country: billingAddress.countryCode,\n            line1: billingAddress.address1,\n            line2: billingAddress.address2,\n            postal_code: billingAddress.postalCode,\n            state: billingAddress.stateOrProvinceCode,\n        };\n    }\n\n    private _mapStripeShippingAddress(shippingAddress: Address | undefined): StripeAddress {\n        if (!shippingAddress) {\n            return { };\n        }\n\n        return {\n            city: shippingAddress.city,\n            country: shippingAddress.countryCode,\n            line1: shippingAddress.address1,\n            line2: shippingAddress.address2,\n            postal_code: shippingAddress.postalCode,\n            state: shippingAddress.stateOrProvinceCode,\n        };\n    }\n\n    private _mapStripeBillingDetails({ billingAddress, customer }: { billingAddress?: BillingAddress; customer?: Customer } = {}): StripeBillingDetails {\n        const stripeBillingDetails = {\n            address: this._mapStripeBillingAddress(billingAddress),\n        };\n\n        if (customer) {\n            return {\n                ...stripeBillingDetails,\n                email: customer.email,\n                name: `${customer.firstName} ${customer.lastName}`,\n            };\n        }\n\n        if (billingAddress) {\n            return {\n                ...stripeBillingDetails,\n                email: billingAddress.email,\n                name: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            };\n        }\n\n        return {\n            name: 'Guest',\n        };\n    }\n\n    private _mapStripeShippingDetails({ shippingAddress, customer }: { shippingAddress?: Address ; customer?: Customer } = {}): StripeShippingDetails {\n        const stripeShippingDetails = {\n            address: this._mapStripeShippingAddress(shippingAddress),\n        };\n\n        if (customer) {\n            return {\n                ...stripeShippingDetails,\n                name: `${customer.firstName} ${customer.lastName}`,\n            };\n        }\n\n        if (shippingAddress) {\n            return {\n                ...stripeShippingDetails,\n                name: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            };\n        }\n\n        return {\n            ...stripeShippingDetails,\n            name: 'Guest',\n        };\n    }\n\n    private _getCustomer(): Customer | undefined {\n        const customer = this._store.getState().customer.getCustomer();\n\n        if (customer) {\n            if (customer.firstName === '' || customer.lastName === '' || customer.email === '') {\n                return undefined;\n            }\n        }\n\n        return customer;\n    }\n\n    private _mapStripeCardPaymentOptions(shouldSaveInstrument: boolean): StripeHandleCardPaymentOptions {\n        const customer = this._getCustomer();\n        const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n        const shippingDetails = {\n            shipping: this._mapStripeShippingDetails({ shippingAddress, customer }),\n        };\n\n        if (customer) {\n            return {\n                ...shippingDetails,\n                receipt_email: customer.email,\n                save_payment_method: shouldSaveInstrument,\n            };\n        } else {\n            return {\n                ...shippingDetails,\n            };\n        }\n    }\n\n    private _mapStripePaymentMethodOptions(): StripePaymentMethodData {\n        const customer = this._getCustomer();\n        const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        return {\n            billing_details: this._mapStripeBillingDetails({ billingAddress, customer }),\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { StripeHostWindow, StripeV3Client } from './stripev3';\n\nexport default class StripeV3ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: StripeHostWindow = window\n    ) {}\n\n    load(publishableKey: string): Promise<StripeV3Client> {\n        return this._scriptLoader\n            .loadScript('https://js.stripe.com/v3/')\n            .then(() => {\n                if (!this._window.Stripe) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.Stripe(publishableKey, {\n                    betas: ['payment_intent_beta_3'],\n                });\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as unknown as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card/credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if a payment method explicitly returns a declined error and\n * the shopper has to choose a different payment method if they wish to continue\n * their checkout process.\n */\nexport default class PaymentMethodDeclinedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'The selected payment method was declined. Please select another payment method.');\n\n        this.name = 'PaymentMethodDeclinedError';\n        this.type = 'payment_declined';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { ContentType, INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { StoreCreditActionCreator } from '../../../store-credit';\nimport { PaymentMethodCancelledError, PaymentMethodDeclinedError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Zip, ZipModalEvent } from './zip';\nimport ZipScriptLoader from './zip-script-loader';\n\nexport default class ZipPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _zipClient?: Zip;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _zipScriptLoader: ZipScriptLoader,\n        private _requestSender: RequestSender\n    ) { }\n\n    async initialize(): Promise<InternalCheckoutSelectors> {\n        const zip = await this._zipScriptLoader.load();\n        this._zipClient = zip;\n\n        return this._store.getState();\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n        this._zipClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const { _zipClient: zipClient } = this;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!zipClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n\n        const { useStoreCredit } = payload;\n\n        if (useStoreCredit !== undefined) {\n            await this._store.dispatch(this._storeCreditActionCreator.applyStoreCredit(useStoreCredit));\n        }\n\n        const state = await this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId, options));\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const nonce = await new Promise<string | undefined>((resolve, reject) => {\n            zipClient.Checkout.init({\n                onComplete: async ({ checkoutId, state }) => {\n                    if (state === ZipModalEvent.CancelCheckout) {\n                        return reject(new PaymentMethodCancelledError());\n                    }\n\n                    if (state === ZipModalEvent.CheckoutReferred && checkoutId) {\n                        await this._prepareForReferredRegistration(payment.methodId, checkoutId);\n\n                        return resolve();\n                    }\n\n                    if (state === ZipModalEvent.CheckoutApproved && checkoutId) {\n                        return resolve(checkoutId);\n                    }\n\n                    if (state === ZipModalEvent.CheckoutDeclined) {\n                        return reject(new PaymentMethodDeclinedError('Unfortunately your application was declined. Please select another payment method.'));\n                    }\n\n                    reject(new PaymentMethodInvalidError());\n                },\n                onCheckout: openModal => {\n                    if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    openModal(JSON.parse(this._paymentMethod.clientToken));\n                },\n            });\n        });\n\n        if (nonce !== undefined) {\n            return this._store.dispatch(this._paymentActionCreator.submitPayment({\n                methodId: payment.methodId,\n                paymentData: { nonce },\n            }));\n        }\n\n        return this._store.getState();\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _prepareForReferredRegistration(provider: string, externalId: string): Promise<Response> {\n        const url = `/api/storefront/payment/${provider}/save-external-id`;\n        const options = {\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n            body: {\n                externalId,\n                provider,\n            },\n        };\n\n        return this._requestSender.post(url, options);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { Zip, ZipHostWindow } from '../zip/zip';\n\nexport default class ZipScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ZipHostWindow = window\n    ) {}\n\n    load(): Promise<Zip> {\n        return this._scriptLoader\n            .loadScript(`//static.zipmoney.com.au/checkout/checkout-v1.min.js`)\n            .then(() => {\n                if (!this._window.Zip) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.Zip;\n            });\n    }\n}\n","import { createAction, createDataStore, Action, DataStore, ReadableDataStore } from '@bigcommerce/data-store';\n\nenum ProjectionActionType {\n    Synchronize = 'SYNCHRONIZE',\n}\n\ninterface SynchronizeAction<TState> extends Action<TState> {\n    type: ProjectionActionType.Synchronize;\n    payload: TState;\n}\n\nexport interface DataStoreProjection<TTransformedState> extends ReadableDataStore<TTransformedState> {\n    notifyState(): void;\n}\n\nexport default function createDataStoreProjection<TState, TTransformedState = TState>(\n    store: DataStore<any, Action, TState>,\n    stateTransformer: (state: TState) => TTransformedState\n): DataStoreProjection<TTransformedState> {\n    const projection = createDataStore<TState | undefined, SynchronizeAction<TState>, TTransformedState>(\n        (state, action) => action.type === ProjectionActionType.Synchronize ?\n            action.payload :\n            state,\n        store.getState(),\n        { stateTransformer }\n    );\n\n    store.subscribe(state => {\n        projection.dispatch(createAction(ProjectionActionType.Synchronize, state) as SynchronizeAction<TState>);\n    }, { initial: false });\n\n    return projection;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport { DeleteInstrumentAction, InstrumentActionType, LoadInstrumentsAction } from './instrument-actions';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<LoadInstrumentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadInstrumentsAction>) => {\n            observer.next(createAction(InstrumentActionType.LoadInstrumentsRequested));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(\n                                InstrumentActionType.LoadInstrumentsSucceeded,\n                                body,\n                                currentToken\n                            ));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.LoadInstrumentsFailed, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<DeleteInstrumentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteInstrumentAction>) => {\n            observer.next(createAction(InstrumentActionType.DeleteInstrumentRequested, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({\n                        ...session,\n                        authToken: currentToken.vaultAccessToken,\n                    }, instrumentId)\n                        .then(({ body }) => {\n                            observer.next(createAction(InstrumentActionType.DeleteInstrumentSucceeded, body, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.DeleteInstrumentFailed, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token) ?\n            Promise.resolve(token) :\n            this._instrumentRequestSender.getVaultAccessToken().then(({ body }) => body);\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n        const { code } = config.shopperCurrency.isTransactional ? config.shopperCurrency : config.currency;\n\n        return {\n            customerId,\n            storeId,\n            currencyCode: code,\n        };\n    }\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentResponse from '../payment-response';\n\nimport Instrument, { VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    InternalInstrument,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n    InternalVaultAccessTokenResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(\n        response: PaymentResponse<InternalInstrumentsResponseBody>\n    ): Response<InstrumentsResponseBody> {\n        const { body, ...payload } = this._transformResponse(response);\n\n        return {\n            ...payload,\n            body: {\n                vaultedInstruments: this._transformVaultedInstruments(body.vaulted_instruments),\n            },\n        };\n    }\n\n    transformErrorResponse(\n        response: PaymentResponse<InternalInstrumentErrorResponseBody>\n    ): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    transformVaultAccessResponse(\n        response: Response<InternalVaultAccessTokenResponseBody>\n    ): Response<VaultAccessToken> {\n        return {\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        };\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: InternalInstrument[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            defaultInstrument: instrument.default_instrument,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse<T>(response: PaymentResponse<T>): Response<T> {\n        const { data: body, ...payload } = response;\n\n        return {\n            ...payload,\n            body,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\nimport PaymentResponse from '../payment-response';\n\nimport { InstrumentRequestContext, VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken(\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<VaultAccessToken>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout }).then(response => ({\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        }));\n    }\n\n    loadInstruments(\n        requestContext: InstrumentRequestContext,\n        shippingAddress?: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(\n        requestContext: InstrumentRequestContext,\n        instrumentId: string\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) =>  errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstruments(\n        requestContext: InstrumentRequestContext\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(\n                requestContext, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstrumentsWithAddress(\n        requestContext: InstrumentRequestContext,\n        shippingAddress: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ShippingCountryActionType.LoadShippingCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: Partial<AddressRequestBody>, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            if (methodId && state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            if (methodId && !state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport { ShippingStrategyActionType } from '../../shipping-strategy-actions';\nimport ShippingStrategy from '../shipping-strategy';\n\nimport AmazonPayShippingInitializeOptions from './amazon-pay-shipping-initialize-options';\n\nexport default class AmazonPayShippingStrategy implements ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    updateAddress(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","import { AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingRequestOptions } from '../../shipping-request-options';\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class DefaultShippingStrategy implements ShippingStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { memoize } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\n\nconst cloneDeep = memoize(<T>(input: T): T => {\n    if (Array.isArray(input)) {\n        return input.map((value: T[keyof T]) => (\n            cloneDeepSafe(value)\n        )) as any;\n    }\n\n    if (isPlainObject(input)) {\n        return (Object.keys(input) as Array<keyof T>)\n            .reduce((result, key) => ({\n                ...result,\n                [key]: cloneDeepSafe(input[key]),\n            }), {}) as T;\n    }\n\n    return input;\n});\n\n// Use WeakMap as the MapCache, this allows for better garbage collection\n// There's a deprecated `clear` method in the lodash implementation\n// of MapCache, hence the `any`\ncloneDeep.cache = new WeakMap() as any;\n\n/**\n * This is a wrapper function for `cloneDeep`. We need it because `cloneDeep` is\n * a memoized function using an instance of `WeakMap` as its cache. Without this\n * wrapper, the memoized function will throw an error if it is called with a\n * non-object argument.\n */\nconst cloneDeepSafe = <T>(input: T): T => {\n    return typeof input === 'object' && input !== null ?\n        cloneDeep(input) :\n        input;\n};\n\n/**\n * Clone the return value of a function. If the result is the same as previous\n * calls, return the previous clone instead of cloning it again.\n */\nexport default function cloneResult<T extends Func>(fn: T): T {\n    return ((...args: any[]) => cloneDeepSafe(fn(...args))) as T;\n}\n\nexport type Func = (...args: any[]) => any;\n","import { createSelectorCreator, defaultMemoize } from 'reselect';\nimport * as shallowEqual from 'shallowequal';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\nconst createShallowEqualSelector = createSelectorCreator(\n    defaultMemoize,\n    (a: any, b: any) => shallowEqual(a, b)\n);\n\nexport default withMemoizedCombiner(createShallowEqualSelector);\n","import {\n    createCheckoutStoreErrorSelectorFactory,\n    createCheckoutStoreSelectorFactory,\n    createCheckoutStoreStatusSelectorFactory,\n    CheckoutSelectors,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport type CheckoutSelectorsFactory = (selectors: InternalCheckoutSelectors) => CheckoutSelectors;\n\nexport function createCheckoutSelectorsFactory(): CheckoutSelectorsFactory {\n    const createCheckoutStoreSelector = createCheckoutStoreSelectorFactory();\n    const createCheckoutStoreErrorSelector = createCheckoutStoreErrorSelectorFactory();\n    const createCheckoutStoreStatusSelector = createCheckoutStoreStatusSelectorFactory();\n\n    return (selectors: InternalCheckoutSelectors) => {\n        const data = createCheckoutStoreSelector(selectors);\n        const errors = createCheckoutStoreErrorSelector(selectors);\n        const statuses = createCheckoutStoreStatusSelector(selectors);\n\n        return {\n            data,\n            errors,\n            statuses,\n        };\n    };\n}\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    return createCheckoutSelectorsFactory()(selectors);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { Address } from '../address';\nimport { BillingAddress } from '../billing';\nimport { Cart } from '../cart';\nimport { createSelector } from '../common/selector';\nimport { cloneResult as clone } from '../common/utility';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, GiftCertificate } from '../coupon';\nimport { Customer } from '../customer';\nimport { FormField } from '../form';\nimport { Country } from '../geography';\nimport { Order } from '../order';\nimport { PaymentMethod } from '../payment';\nimport { Instrument } from '../payment/instrument';\nimport { Consignment, ShippingOption } from '../shipping';\n\nimport Checkout from './checkout';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\nexport default interface CheckoutStoreSelector {\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined;\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined;\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined;\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined;\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined;\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined;\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined;\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined;\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): BillingAddress | undefined;\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined;\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined;\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined;\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined;\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined;\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined;\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined;\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean;\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined;\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[];\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[];\n}\n\nexport type CheckoutStoreSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreSelector;\n\nexport function createCheckoutStoreSelectorFactory(): CheckoutStoreSelectorFactory {\n    const getCheckout = createSelector(\n        ({ checkout }: InternalCheckoutSelectors) => checkout.getCheckout,\n        getCheckout => clone(getCheckout)\n    );\n\n    const getOrder = createSelector(\n        ({ order }: InternalCheckoutSelectors) => order.getOrder,\n        getOrder => clone(getOrder)\n    );\n\n    const getConfig = createSelector(\n        ({ config }: InternalCheckoutSelectors) => config.getStoreConfig,\n        getStoreConfig => clone(getStoreConfig)\n    );\n\n    const getShippingAddress = createSelector(\n        ({ shippingAddress }: InternalCheckoutSelectors) => shippingAddress.getShippingAddress,\n        ({ config }: InternalCheckoutSelectors) => config.getContextConfig,\n        (getShippingAddress, getContextConfig) => clone(() => {\n            const shippingAddress = getShippingAddress();\n            const context = getContextConfig();\n\n            if (!shippingAddress) {\n                if (!context || !context.geoCountryCode) {\n                    return;\n                }\n\n                return {\n                    firstName: '',\n                    lastName: '',\n                    company: '',\n                    address1: '',\n                    address2: '',\n                    city: '',\n                    stateOrProvince: '',\n                    stateOrProvinceCode: '',\n                    postalCode: '',\n                    country: '',\n                    phone: '',\n                    customFields: [],\n                    countryCode: context.geoCountryCode,\n                };\n            }\n\n            return shippingAddress;\n        })\n    );\n\n    const getShippingOptions = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(() => {\n            const consignments = getConsignments();\n\n            if (consignments && consignments.length) {\n                return consignments[0].availableShippingOptions;\n            }\n        })\n    );\n\n    const getConsignments = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(getConsignments)\n    );\n\n    const getSelectedShippingOption = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(() => {\n            const consignments = getConsignments();\n\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return consignments[0].selectedShippingOption;\n        })\n    );\n\n    const getShippingCountries = createSelector(\n        ({ shippingCountries }: InternalCheckoutSelectors) => shippingCountries.getShippingCountries,\n        getShippingCountries => clone(getShippingCountries)\n    );\n\n    const getBillingAddress = createSelector(\n        ({ billingAddress }: InternalCheckoutSelectors) => billingAddress.getBillingAddress,\n        getBillingAddress => clone(getBillingAddress)\n    );\n\n    const getBillingCountries = createSelector(\n        ({ countries }: InternalCheckoutSelectors) => countries.getCountries,\n        getCountries => clone(getCountries)\n    );\n\n    const getPaymentMethods = createSelector(\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethods,\n        getPaymentMethods => clone(getPaymentMethods)\n    );\n\n    const getPaymentMethod = createSelector(\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        getPaymentMethod => clone(getPaymentMethod)\n    );\n\n    const getSelectedPaymentMethod = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.getPaymentId,\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        (getPaymentId, getPaymentMethod) => clone(() => {\n            const payment = getPaymentId();\n\n            return payment && getPaymentMethod(payment.providerId, payment.gatewayId);\n        })\n    );\n\n    const getCart = createSelector(\n        ({ cart }: InternalCheckoutSelectors) => cart.getCart,\n        getCart => clone(getCart)\n    );\n\n    const getCoupons = createSelector(\n        ({ coupons }: InternalCheckoutSelectors) => coupons.getCoupons,\n        getCoupons => clone(getCoupons)\n    );\n\n    const getGiftCertificates = createSelector(\n        ({ giftCertificates }: InternalCheckoutSelectors) => giftCertificates.getGiftCertificates,\n        getGiftCertificates => clone(getGiftCertificates)\n    );\n\n    const getCustomer = createSelector(\n        ({ customer }: InternalCheckoutSelectors) => customer.getCustomer,\n        getCustomer => clone(getCustomer)\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.isPaymentDataRequired,\n        isPaymentDataRequired => clone(isPaymentDataRequired)\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.isPaymentDataSubmitted,\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        (isPaymentDataSubmitted, getPaymentMethod) => clone((methodId: string, gatewayId?: string) => {\n            return isPaymentDataSubmitted(getPaymentMethod(methodId, gatewayId));\n        })\n    );\n\n    const getInstruments = createSelector(\n        ({ instruments }: InternalCheckoutSelectors) => instruments.getInstruments,\n        getInstruments => clone(getInstruments)\n    );\n\n    const getBillingAddressFields = createSelector(\n        ({ form }: InternalCheckoutSelectors) => form.getBillingAddressFields,\n        ({ countries }: InternalCheckoutSelectors) => countries.getCountries,\n        (getBillingAddressFields, getCountries) => clone((countryCode: string) => {\n            return getBillingAddressFields(getCountries(), countryCode);\n        })\n    );\n\n    const getShippingAddressFields = createSelector(\n        ({ form }: InternalCheckoutSelectors) => form.getShippingAddressFields,\n        ({ shippingCountries }: InternalCheckoutSelectors) => shippingCountries.getShippingCountries,\n        (getShippingAddressFields, getShippingCountries) => clone((countryCode: string) => {\n            return getShippingAddressFields(getShippingCountries(), countryCode);\n        })\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreSelector => {\n        return {\n            getCheckout: getCheckout(state),\n            getOrder: getOrder(state),\n            getConfig: getConfig(state),\n            getShippingAddress: getShippingAddress(state),\n            getShippingOptions: getShippingOptions(state),\n            getConsignments: getConsignments(state),\n            getSelectedShippingOption: getSelectedShippingOption(state),\n            getShippingCountries: getShippingCountries(state),\n            getBillingAddress: getBillingAddress(state),\n            getBillingCountries: getBillingCountries(state),\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getSelectedPaymentMethod: getSelectedPaymentMethod(state),\n            getCart: getCart(state),\n            getCoupons: getCoupons(state),\n            getGiftCertificates: getGiftCertificates(state),\n            getCustomer: getCustomer(state),\n            isPaymentDataRequired: isPaymentDataRequired(state),\n            isPaymentDataSubmitted: isPaymentDataSubmitted(state),\n            getInstruments: getInstruments(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n            getShippingAddressFields: getShippingAddressFields(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector, createShallowEqualSelector } from '../common/selector';\nimport { Omit } from '../common/types';\n\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\nexport default interface CheckoutStoreErrorSelector {\n    getError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to apply store credit.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyStoreCreditError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined;\n}\n\nexport type CheckoutStoreErrorSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreErrorSelector;\n\nexport function createCheckoutStoreErrorSelectorFactory(): CheckoutStoreErrorSelectorFactory {\n    const getError = createShallowEqualSelector(\n        (selector: Omit<CheckoutStoreErrorSelector, 'getError'>) => selector,\n        selector => () => {\n            for (const key of Object.keys(selector) as Array<keyof Omit<CheckoutStoreErrorSelector, 'getError'>>) {\n                const error = selector[key]();\n\n                if (error) {\n                    return error;\n                }\n            }\n        }\n    );\n\n    const getSelectShippingOptionError = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.getSelectOptionError,\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getUpdateShippingOptionError,\n        (getSelectOptionError, getUpdateShippingOptionError) => (consignmentId?: string) => {\n            return (\n                getSelectOptionError() ||\n                getUpdateShippingOptionError(consignmentId)\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreErrorSelector => {\n        const selector = {\n            getLoadCheckoutError: state.checkout.getLoadError,\n            getUpdateCheckoutError: state.checkout.getUpdateError,\n            getSubmitOrderError: state.paymentStrategies.getExecuteError,\n            getFinalizeOrderError: state.paymentStrategies.getFinalizeError,\n            getLoadOrderError: state.order.getLoadError,\n            getLoadCartError: state.cart.getLoadError,\n            getLoadBillingCountriesError: state.countries.getLoadError,\n            getLoadShippingCountriesError: state.shippingCountries.getLoadError,\n            getLoadPaymentMethodsError: state.paymentMethods.getLoadError,\n            getLoadPaymentMethodError: state.paymentMethods.getLoadMethodError,\n            getInitializePaymentError: state.paymentStrategies.getInitializeError,\n            getSignInError: state.customerStrategies.getSignInError,\n            getSignOutError: state.customerStrategies.getSignOutError,\n            getInitializeCustomerError: state.customerStrategies.getInitializeError,\n            getLoadShippingOptionsError: state.consignments.getLoadShippingOptionsError,\n            getSelectShippingOptionError: getSelectShippingOptionError(state),\n            getContinueAsGuestError: state.billingAddress.getContinueAsGuestError,\n            getUpdateBillingAddressError: state.billingAddress.getUpdateError,\n            getUpdateShippingAddressError: state.shippingStrategies.getUpdateAddressError,\n            getDeleteConsignmentError: state.consignments.getDeleteError,\n            getUpdateConsignmentError: state.consignments.getUpdateError,\n            getCreateConsignmentsError: state.consignments.getCreateError,\n            getInitializeShippingError: state.shippingStrategies.getInitializeError,\n            getApplyStoreCreditError: state.storeCredit.getApplyError,\n            getApplyCouponError: state.coupons.getApplyError,\n            getRemoveCouponError: state.coupons.getRemoveError,\n            getApplyGiftCertificateError: state.giftCertificates.getApplyError,\n            getRemoveGiftCertificateError: state.giftCertificates.getRemoveError,\n            getLoadInstrumentsError: state.instruments.getLoadError,\n            getDeleteInstrumentError: state.instruments.getDeleteError,\n            getLoadConfigError: state.config.getLoadError,\n        };\n\n        return {\n            getError: getError(selector),\n            ...selector,\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector, createShallowEqualSelector } from '../common/selector';\nimport { Omit } from '../common/types';\n\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\nexport default interface CheckoutStoreStatusSelector {\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean;\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean;\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean;\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean;\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean;\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean;\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean;\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean;\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean;\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean;\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean;\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean;\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean;\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean;\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean;\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean;\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean;\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean;\n\n    /**\n     * Checks whether the current customer is applying store credit.\n     *\n     * @returns True if applying store credit, otherwise false.\n     */\n    isApplyingStoreCredit(): boolean;\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean;\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean;\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean;\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean;\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean;\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean;\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean;\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean;\n}\n\nexport type CheckoutStoreStatusSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreStatusSelector;\n\nexport function createCheckoutStoreStatusSelectorFactory(): CheckoutStoreStatusSelectorFactory {\n    const isPending = createShallowEqualSelector(\n        (selector: Omit<CheckoutStoreStatusSelector, 'isPending'>) => selector,\n        selector => () => {\n            return (Object.keys(selector) as Array<keyof Omit<CheckoutStoreStatusSelector, 'isPending'>>)\n                .some(key => selector[key]());\n        }\n    );\n\n    const isSelectingShippingOption = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.isSelectingOption,\n        ({ consignments }: InternalCheckoutSelectors) => consignments.isUpdatingShippingOption,\n        (isSelectingOption, isUpdatingShippingOption) => (consignmentId?: string) => {\n            return (\n                isSelectingOption() ||\n                isUpdatingShippingOption(consignmentId)\n            );\n        }\n    );\n\n    const isCustomerStepPending = createSelector(\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isInitializing,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isSigningIn,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isSigningOut,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isWidgetInteracting,\n        (isInitializing, isSigningIn, isSigningOut, isWidgetInteracting) => (methodId?: string) => {\n            return (\n                isInitializing(methodId) ||\n                isSigningIn(methodId) ||\n                isSigningOut(methodId) ||\n                isWidgetInteracting(methodId)\n            );\n        }\n    );\n\n    const isPaymentStepPending = createSelector(\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isInitializing,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isExecuting,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isFinalizing,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isWidgetInteracting,\n        (isInitializing, isExecuting, isFinalizing, isWidgetInteracting) => (methodId?: string) => {\n            return (\n                isInitializing(methodId) ||\n                isExecuting(methodId) ||\n                isFinalizing(methodId) ||\n                isWidgetInteracting(methodId)\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreStatusSelector => {\n        const selector = {\n            isLoadingCheckout: state.checkout.isLoading,\n            isUpdatingCheckout: state.checkout.isUpdating,\n            isSubmittingOrder: state.paymentStrategies.isExecuting,\n            isFinalizingOrder: state.paymentStrategies.isFinalizing,\n            isLoadingOrder: state.order.isLoading,\n            isLoadingCart: state.cart.isLoading,\n            isLoadingBillingCountries: state.countries.isLoading,\n            isLoadingShippingCountries: state.shippingCountries.isLoading,\n            isLoadingPaymentMethods: state.paymentMethods.isLoading,\n            isLoadingPaymentMethod: state.paymentMethods.isLoadingMethod,\n            isInitializingPayment: state.paymentStrategies.isInitializing,\n            isSigningIn: state.customerStrategies.isSigningIn,\n            isSigningOut: state.customerStrategies.isSigningOut,\n            isInitializingCustomer: state.customerStrategies.isInitializing,\n            isLoadingShippingOptions: state.consignments.isLoadingShippingOptions,\n            isSelectingShippingOption: isSelectingShippingOption(state),\n            isUpdatingBillingAddress: state.billingAddress.isUpdating,\n            isContinuingAsGuest: state.billingAddress.isContinuingAsGuest,\n            isUpdatingShippingAddress: state.shippingStrategies.isUpdatingAddress,\n            isUpdatingConsignment: state.consignments.isUpdating,\n            isDeletingConsignment: state.consignments.isDeleting,\n            isCreatingConsignments: state.consignments.isCreating,\n            isInitializingShipping: state.shippingStrategies.isInitializing,\n            isApplyingStoreCredit: state.storeCredit.isApplying,\n            isApplyingCoupon: state.coupons.isApplying,\n            isRemovingCoupon: state.coupons.isRemoving,\n            isApplyingGiftCertificate: state.giftCertificates.isApplying,\n            isRemovingGiftCertificate: state.giftCertificates.isRemoving,\n            isLoadingInstruments: state.instruments.isLoading,\n            isDeletingInstrument: state.instruments.isDeleting,\n            isLoadingConfig: state.config.isLoading,\n            isCustomerStepPending: isCustomerStepPending(state),\n            isPaymentStepPending: isPaymentStepPending(state),\n        };\n\n        return {\n            isPending: isPending(selector),\n            ...selector,\n        };\n    });\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { createDataStoreProjection, DataStoreProjection } from '../common/data-store';\nimport { ErrorActionCreator, ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { bindDecorator as bind } from '../common/utility';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { SpamProtectionActionCreator, SpamProtectionOptions } from '../order/spam-protection';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\nimport StoreCreditActionCreator from '../store-credit/store-credit-action-creator';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutParams from './checkout-params';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport { createCheckoutSelectorsFactory, CheckoutSelectorsFactory } from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\n@bind\nexport default class CheckoutService {\n    private _storeProjection: DataStoreProjection<CheckoutSelectors>;\n    private _errorTransformer: ErrorMessageTransformer;\n    private _selectorsFactory: CheckoutSelectorsFactory;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _errorActionCreator: ErrorActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator\n    ) {\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n        this._selectorsFactory = createCheckoutSelectorsFactory();\n        this._storeProjection = createDataStoreProjection(this._store, this._selectorsFactory);\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._storeProjection.getState();\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._storeProjection.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._storeProjection.subscribe(subscriber, ...filters);\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     payment: {\n     *         methodId: 'braintree',\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: Partial<AddressRequestBody>, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: Partial<BillingAddressRequestBody>, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies or removes customer's store credit code to the current checkout.\n     *\n     * Once the store credit gets applied, the outstanding balance will be adjusted accordingly.\n     *\n     * ```js\n     * const state = await service.applyStoreCredit(true);\n     *\n     * console.log(state.data.getCheckout().outstandingBalance);\n     * ```\n     *\n     * @param options - Options for applying store credit.\n     * @returns A promise that resolves to the current state.\n     */\n    applyStoreCredit(useStoreCredit: boolean, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._storeCreditActionCreator.applyStoreCredit(useStoreCredit, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Clear errors that have been collected from previous calls.\n     *\n     * ```js\n     * const state = await service.clearError(error);\n     *\n     * console.log(state.errors.getError());\n     * ```\n     *\n     * @param error - Specific error object to clear\n     * @returns A promise that resolves to the current state.\n     */\n    clearError(error: Error): Promise<CheckoutSelectors> {\n        const action = this._errorActionCreator.clearError(error);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the spam protection for order creation.\n     *\n     * With spam protection enabled, the customer has to be verified as\n     * a human. The order creation will fail if spam protection\n     * is enabled but verification fails.\n     *\n     * ```js\n     * await service.initializeSpamProtection({\n     *     containerId: 'spamProtectionContainer',\n     * });\n     * ```\n     *\n     * @param options - Options for initializing spam protection.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeSpamProtection(options: SpamProtectionOptions): Promise<CheckoutSelectors> {\n        const action = this._spamProtectionActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'spamProtection' });\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Action | Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { ErrorActionCreator } from '../common/error';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createSpamProtection, SpamProtectionActionCreator } from '../order/spam-protection';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\nimport { StoreCreditActionCreator, StoreCreditRequestSender } from '../store-credit';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * @remarks\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const spamProtection = createSpamProtection(createScriptLoader());\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(spamProtection);\n    const orderActionCreator = new OrderActionCreator(\n        orderRequestSender,\n        new CheckoutValidator(checkoutRequestSender),\n        spamProtectionActionCreator\n    );\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new ErrorActionCreator(),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender, spamProtection, locale),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender)),\n        spamProtectionActionCreator,\n        new StoreCreditActionCreator(new StoreCreditRequestSender(requestSender))\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { MutationObserverFactory } from '../../common/dom/mutation-observer';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport default function createSpamProtection(scriptLoader: ScriptLoader) {\n    return new GoogleRecaptcha(\n        new GoogleRecaptchaScriptLoader(scriptLoader),\n        new MutationObserverFactory()\n    );\n}\n","// tslint:disable-next-line:no-reference\n/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport {\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport { CustomerStrategy } from './strategies';\nimport { AmazonPayCustomerStrategy } from './strategies/amazon';\nimport { BraintreeVisaCheckoutCustomerStrategy } from './strategies/braintree';\nimport { ChasePayCustomerStrategy } from './strategies/chasepay';\nimport { DefaultCustomerStrategy } from './strategies/default';\nimport { GooglePayCustomerStrategy } from './strategies/googlepay';\nimport { MasterpassCustomerStrategy } from './strategies/masterpass';\nimport { SquareCustomerStrategy } from './strategies/square';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            ),\n            formPoster\n    )\n);\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { SpamProtectionActionCreator } from '../order/spam-protection';\nimport GoogleRecaptcha from '../order/spam-protection/google-recaptcha';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\nimport { StoreCreditActionCreator, StoreCreditRequestSender } from '../store-credit';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { AdyenV2PaymentStrategy, AdyenV2ScriptLoader } from './strategies/adyenv2';\nimport { AffirmPaymentStrategy, AffirmScriptLoader } from './strategies/affirm';\nimport { AfterpayPaymentStrategy, AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayPaymentStrategy, AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport {\n    createBraintreePaymentProcessor,\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    BraintreeVisaCheckoutPaymentStrategy,\n    VisaCheckoutScriptLoader\n} from './strategies/braintree';\nimport {\n    CardinalClient,\n    CardinalScriptLoader,\n    CardinalThreeDSecureFlow,\n} from './strategies/cardinal';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { ConvergePaymentStrategy } from './strategies/converge';\nimport { CreditCardPaymentStrategy } from './strategies/credit-card';\nimport { CyberSourcePaymentStrategy } from './strategies/cybersource/index';\nimport {\n    createGooglePayPaymentProcessor,\n    GooglePayBraintreeInitializer,\n    GooglePayPaymentStrategy,\n    GooglePayStripeInitializer\n} from './strategies/googlepay';\nimport { KlarnaPaymentStrategy, KlarnaScriptLoader } from './strategies/klarna';\nimport { LegacyPaymentStrategy } from './strategies/legacy';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { NoPaymentDataRequiredPaymentStrategy } from './strategies/no-payment';\nimport { OfflinePaymentStrategy } from './strategies/offline';\nimport { OffsitePaymentStrategy } from './strategies/offsite';\nimport { PaypalExpressPaymentStrategy, PaypalProPaymentStrategy, PaypalScriptLoader } from './strategies/paypal';\nimport { SagePayPaymentStrategy } from './strategies/sage-pay';\nimport { SquarePaymentStrategy, SquareScriptLoader } from './strategies/square';\nimport { StripeScriptLoader, StripeV3PaymentStrategy } from './strategies/stripev3';\nimport { WepayPaymentStrategy, WepayRiskClient } from './strategies/wepay';\nimport { ZipPaymentStrategy, ZipScriptLoader } from './strategies/zip';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender,\n    spamProtection: GoogleRecaptcha,\n    locale: string\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: PaymentStrategyType.CREDIT_CARD });\n    const scriptLoader = getScriptLoader();\n    const paymentRequestTransformer = new PaymentRequestTransformer();\n    const paymentRequestSender = new PaymentRequestSender(paymentClient);\n    const billingAddressActionCreator = new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender));\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(spamProtection);\n    const orderActionCreator = new OrderActionCreator(new OrderRequestSender(requestSender), checkoutValidator, spamProtectionActionCreator);\n    const storeCreditActionCreator = new StoreCreditActionCreator(new StoreCreditRequestSender(requestSender));\n    const paymentActionCreator = new PaymentActionCreator(paymentRequestSender, orderActionCreator, paymentRequestTransformer);\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender));\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n    const formPoster = createFormPoster();\n\n    registry.register(PaymentStrategyType.ADYENV2, () =>\n        new AdyenV2PaymentStrategy(\n            store,\n            paymentActionCreator,\n            orderActionCreator,\n            new AdyenV2ScriptLoader(scriptLoader),\n            formPoster,\n            locale\n        )\n    );\n\n    registry.register(PaymentStrategyType.AFFIRM, () =>\n        new AffirmPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new AffirmScriptLoader()\n        )\n    );\n\n    registry.register(PaymentStrategyType.AFTERPAY, () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            storeCreditActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.AMAZON, () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            billingAddressActionCreator,\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CREDIT_CARD, () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.CYBERSOURCE, () =>\n        new CyberSourcePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new CardinalThreeDSecureFlow(\n                store,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                new CardinalClient(new CardinalScriptLoader(scriptLoader))\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.KLARNA, () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.LEGACY, () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFLINE, () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFSITE, () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL, () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new CardinalThreeDSecureFlow(\n                store,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                new CardinalClient(new CardinalScriptLoader(scriptLoader))\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS_CREDIT, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.SAGE_PAY, () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n        )\n    );\n\n    registry.register(PaymentStrategyType.SQUARE, () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED, () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE, () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_VISA_CHECKOUT, () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CHASE_PAY, () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(scriptLoader),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.WE_PAY, () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.MASTERPASS, () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.STRIPE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.ZIP, () =>\n        new ZipPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            storeCreditActionCreator,\n            new ZipScriptLoader(scriptLoader),\n            requestSender\n        )\n    );\n\n    registry.register(PaymentStrategyType.CONVERGE, () =>\n        new ConvergePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n            )\n    );\n\n    registry.register(PaymentStrategyType.STRIPEV3, () =>\n        new StripeV3PaymentStrategy(\n            store,\n            paymentMethodActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            new StripeScriptLoader(scriptLoader)\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { Overlay } from '../../../common/overlay';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n    const overlay = new Overlay();\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator, overlay);\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { ShippingStrategy } from './strategies';\nimport { AmazonPayShippingStrategy } from './strategies/amazon';\nimport { DefaultShippingStrategy } from './strategies/default';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            consignmentActionCreator\n        )\n    );\n\n    return registry;\n}\n","import { EmbeddedCheckoutFrameLoadedEvent } from '../embedded-checkout-events';\n\nexport default function handleFrameLoadedEvent(message: EmbeddedCheckoutFrameLoadedEvent): void {\n    if (!message.payload || !message.payload.contentId) {\n        return;\n    }\n\n    const body = document.getElementById(message.payload.contentId);\n\n    if (!body || body.hasAttribute('data-iframe-height')) {\n        return;\n    }\n\n    body.setAttribute('data-iframe-height', '');\n}\n","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { isCustomError, CustomError } from '../../common/error/errors';\nimport { bindDecorator as bind } from '../../common/utility';\nimport EmbeddedCheckoutError from '../embedded-checkout-error';\nimport {\n    EmbeddedCheckoutCompleteEvent,\n    EmbeddedCheckoutErrorEvent,\n    EmbeddedCheckoutEvent,\n    EmbeddedCheckoutEventMap,\n    EmbeddedCheckoutEventType,\n    EmbeddedCheckoutFrameErrorEvent,\n    EmbeddedCheckoutFrameLoadedEvent,\n    EmbeddedCheckoutLoadedEvent,\n    EmbeddedCheckoutSignedOutEvent,\n} from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\nimport EmbeddedContentOptions from './embedded-content-options';\n\n@bind\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _untargetedMessagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _messageHandlers: EventCallbacks<EmbeddedCheckoutEventMap> = {}\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._postMessage(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        // Ideally, all messages should be targeted at a specific origin.\n        // However, for `FrameError` message, we have to post it in an\n        // untargeted fashion. This is because the error could be caused by a\n        // missing cart. That makes it not possible to determine of site origin\n        // of the parent window. Nevertheless, we still want to notify the\n        // parent window about the error.\n        this._postMessage(message, { untargeted: true });\n    }\n\n    postFrameLoaded(payload?: EmbeddedContentOptions): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n            payload,\n        };\n\n        this._postMessage(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._postMessage(message);\n    }\n\n    postSignedOut(): void {\n        const message: EmbeddedCheckoutSignedOutEvent = {\n            type: EmbeddedCheckoutEventType.SignedOut,\n        };\n\n        this._postMessage(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(EmbeddedContentEventType.StyleConfigured, ({ payload }) => {\n            handler(payload);\n        });\n    }\n\n    private _postMessage(message: EmbeddedCheckoutEvent, options?: { untargeted?: boolean }): void {\n        this._notifyMessageHandlers(message);\n\n        if (options && options.untargeted) {\n            return this._untargetedMessagePoster.post(message);\n        }\n\n        this._messagePoster.post(message);\n    }\n\n    private _notifyMessageHandlers(message: EmbeddedCheckoutEvent): void {\n        Object.keys(this._messageHandlers)\n            .forEach(key => {\n                const handler = this._messageHandlers[key as keyof EmbeddedCheckoutEventMap];\n\n                if (handler) {\n                    (handler as (event: EmbeddedCheckoutEvent) => void).call(null, message);\n                }\n            });\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n\nexport type EventCallbacks<TEventMap> = {\n    [key in keyof TEventMap]?: (event: TEventMap[key]) => void;\n};\n","import { bindDecorator as bind } from '../../common/utility';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\n@bind\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    postSignedOut(): void {}\n\n    receiveStyles(): void {}\n}\n","import { setupContentWindowForIframeResizer } from '../../common/iframe';\nimport { EmbeddedCheckoutEvent, EmbeddedCheckoutEventType } from '../embedded-checkout-events';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport handleFrameLoadedEvent from './handle-frame-loaded-event';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * @remarks\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * @alpha\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger {\n    setupContentWindowForIframeResizer();\n\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow),\n        new IframeEventPoster<EmbeddedCheckoutEvent>('*', parentWindow),\n        { [EmbeddedCheckoutEventType.FrameLoaded]: handleFrameLoadedEvent }\n    );\n}\n","import { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\n@bind\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * @remarks\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = (this._toFixed(positiveAmount, this._decimalPlaces)).split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        return [\n            parsedIntegerAmount,\n            decimalAmount,\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n\n    private _toFixed(value: number, precision: number): string {\n        return (+(Math.round(+(value + 'e' + precision)) + 'e' + -precision)).toFixed(precision);\n    }\n}\n","import { bindDecorator as bind } from '../common/utility';\nimport { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\n@bind\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * @alpha\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","export { createTimeout } from '@bigcommerce/request-sender';\n\nexport { createCheckoutService } from './checkout';\nexport { createCheckoutButtonInitializer } from './checkout-buttons';\nexport { embedCheckout } from './embedded-checkout';\nexport { createEmbeddedCheckoutMessenger } from './embedded-checkout/iframe-content';\nexport { createLanguageService } from './locale';\nexport { createCurrencyService } from './currency';\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: new(options: GooglePayPaymentOptions) => GooglePayClient;\n        };\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        };\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string;\n        nonce: string;\n        cardInformation: {\n            type: string;\n            number: string;\n        };\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: string;\n                phoneNumberRequired?: boolean;\n            };\n        };\n        tokenizationSpecification?: {\n            type: string;\n            parameters: {\n                gateway: string;\n                gatewayMerchantId?: string;\n                'braintree:apiVersion'?: string;\n                'braintree:clientKey'?: string;\n                'braintree:merchantId'?: string;\n                'braintree:sdkVersion'?: string;\n                'braintree:authorizationFingerprint'?: string;\n                'stripe:version'?: string;\n                'stripe:publishableKey'?: string;\n            };\n        };\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePaymentData,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    GooglePaySDK,\n    TokenizePayload\n} from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consigmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._postForm(this._googlePayInitializer.parseResponse(paymentData))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consigmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            },\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender)\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class UnableToContinueAsGuestError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to continue as a guest because the customer is already signed in.');\n\n        this.name = 'UnableToContinueAsGuestError';\n        this.type = 'unable_to_continue_as_guest';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\nimport { UnableToContinueAsGuestError } from './errors';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new UnableToContinueAsGuestError();\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import * as cookie from 'js-cookie';\n\nimport PayloadTransformer from './payload-transformer';\nimport RequestFactory from './request-factory';\nimport RequestSender from './request-sender';\nimport RequestSenderOptions from './request-sender-options';\n\nexport default function createRequestSender(options?: RequestSenderOptions): RequestSender {\n    return new RequestSender(\n        new RequestFactory(),\n        new PayloadTransformer(),\n        cookie,\n        options\n    );\n}\n","import Headers from './headers';\nimport RequestOptions from './request-options';\nimport Response from './response';\nimport toFormUrlEncoded from './to-form-url-encoded';\n\nconst JSON_CONTENT_TYPE_REGEXP = /application\\/(\\w+\\+)?json/;\nconst FORM_URLENCODED_CONTENT_TYPE_REGEXP = /application\\/x-www-form-urlencoded/;\n\nexport default class PayloadTransformer {\n    toRequestBody(options: RequestOptions): any {\n        const contentType = options.headers ? this._getHeader(options.headers, 'Content-Type') : '';\n\n        if (options.body) {\n            if (JSON_CONTENT_TYPE_REGEXP.test(contentType)) {\n                return JSON.stringify(options.body);\n            }\n\n            if (FORM_URLENCODED_CONTENT_TYPE_REGEXP.test(contentType)) {\n                return toFormUrlEncoded(options.body);\n            }\n        }\n\n        return options.body;\n    }\n\n    toResponse(xhr: XMLHttpRequest): Response {\n        const headers = this._parseResponseHeaders(xhr.getAllResponseHeaders());\n\n        // Using `responseText` to support legacy IE\n        const body = this._parseResponseBody(\n            'response' in xhr ? xhr.response : (xhr as any).responseText,\n            headers\n        );\n\n        return {\n            body,\n            headers,\n            status: xhr.status,\n            statusText: xhr.statusText,\n        };\n    }\n\n    private _parseResponseBody(body: string, headers: Headers): any {\n        const contentType = this._getHeader(headers, 'Content-Type');\n\n        if (body && JSON_CONTENT_TYPE_REGEXP.test(contentType)) {\n            return JSON.parse(body);\n        }\n\n        return body;\n    }\n\n    private _parseResponseHeaders(rawHeaders: string): Headers {\n        const lines = rawHeaders ? rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ').split(/\\r?\\n/) : [];\n\n        return lines.reduce((headers, line) => {\n            const parts = line.split(':');\n            const key = (parts.shift() || '').trim();\n\n            if (!key) {\n                return headers;\n            }\n\n            return {\n                ...headers,\n                [key.toLowerCase()]: parts.join(':').trim(),\n            };\n        }, {});\n    }\n\n    private _getHeader(headers: Headers, key: string): string {\n        if (!headers || !key) {\n            return '';\n        }\n\n        return headers[key] || headers[key.toLowerCase()] || '';\n    }\n}\n","export default function toFormUrlEncoded(data: any): string {\n    if (typeof data !== 'object' || data === null) {\n        return data;\n    }\n\n    return Object.keys(data)\n        .filter(key => data[key] !== undefined)\n        .map(key => {\n            const value = data[key];\n\n            if (typeof value === 'string') {\n                return `${key}=${encodeURIComponent(value)}`;\n            }\n\n            return `${key}=${encodeURIComponent(JSON.stringify(value) || '')}`;\n        })\n        .join('&');\n}\n","import * as queryString from 'query-string';\n\nimport Headers from './headers';\nimport RequestOptions from './request-options';\n\nexport default class RequestFactory {\n    createRequest(url: string, options?: RequestOptions): XMLHttpRequest {\n        const xhr = new XMLHttpRequest();\n\n        this._configureRequest(xhr, url, options);\n\n        return xhr;\n    }\n\n    private _configureRequest(xhr: XMLHttpRequest, url: string, options: RequestOptions = {}): void {\n        xhr.open(options.method || 'GET', this._formatUrl(url, options.params), true);\n\n        if (options.headers) {\n            this._configureRequestHeaders(xhr, options.headers);\n        }\n\n        if (typeof options.credentials === 'boolean') {\n            xhr.withCredentials = options.credentials;\n        }\n\n        if (typeof options.timeout === 'number') {\n            xhr.timeout = options.timeout;\n        }\n    }\n\n    private _configureRequestHeaders(xhr: XMLHttpRequest, headers: Headers): void {\n        Object.keys(headers).forEach(key => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n    }\n\n    private _formatUrl(url: string, params?: object): string {\n        if (!params || Object.keys(params).length === 0) {\n            return url;\n        }\n\n        return `${url}?${queryString.stringify(params)}`;\n    }\n}\n","'use strict';\nvar strictUriEncode = require('strict-uri-encode');\nvar objectAssign = require('object-assign');\nvar decodeComponent = require('decode-uri-component');\n\nfunction encoderForArrayFormat(opts) {\n\tswitch (opts.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn function (key, value, index) {\n\t\t\t\treturn value === null ? [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[',\n\t\t\t\t\tindex,\n\t\t\t\t\t']'\n\t\t\t\t].join('') : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[',\n\t\t\t\t\tencode(index, opts),\n\t\t\t\t\t']=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn function (key, value) {\n\t\t\t\treturn value === null ? encode(key, opts) : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[]=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn function (key, value) {\n\t\t\t\treturn value === null ? encode(key, opts) : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\t}\n}\n\nfunction parserForArrayFormat(opts) {\n\tvar result;\n\n\tswitch (opts.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tresult = /\\[(\\d*)\\]$/.exec(key);\n\n\t\t\t\tkey = key.replace(/\\[\\d*\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = {};\n\t\t\t\t}\n\n\t\t\t\taccumulator[key][result[1]] = value;\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tresult = /(\\[\\])$/.exec(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t} else if (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\t}\n}\n\nfunction encode(value, opts) {\n\tif (opts.encode) {\n\t\treturn opts.strict ? strictUriEncode(value) : encodeURIComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction keysSorter(input) {\n\tif (Array.isArray(input)) {\n\t\treturn input.sort();\n\t} else if (typeof input === 'object') {\n\t\treturn keysSorter(Object.keys(input)).sort(function (a, b) {\n\t\t\treturn Number(a) - Number(b);\n\t\t}).map(function (key) {\n\t\t\treturn input[key];\n\t\t});\n\t}\n\n\treturn input;\n}\n\nfunction extract(str) {\n\tvar queryStart = str.indexOf('?');\n\tif (queryStart === -1) {\n\t\treturn '';\n\t}\n\treturn str.slice(queryStart + 1);\n}\n\nfunction parse(str, opts) {\n\topts = objectAssign({arrayFormat: 'none'}, opts);\n\n\tvar formatter = parserForArrayFormat(opts);\n\n\t// Create an object with no prototype\n\t// https://github.com/sindresorhus/query-string/issues/47\n\tvar ret = Object.create(null);\n\n\tif (typeof str !== 'string') {\n\t\treturn ret;\n\t}\n\n\tstr = str.trim().replace(/^[?#&]/, '');\n\n\tif (!str) {\n\t\treturn ret;\n\t}\n\n\tstr.split('&').forEach(function (param) {\n\t\tvar parts = param.replace(/\\+/g, ' ').split('=');\n\t\t// Firefox (pre 40) decodes `%3D` to `=`\n\t\t// https://github.com/sindresorhus/query-string/pull/37\n\t\tvar key = parts.shift();\n\t\tvar val = parts.length > 0 ? parts.join('=') : undefined;\n\n\t\t// missing `=` should be `null`:\n\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t\tval = val === undefined ? null : decodeComponent(val);\n\n\t\tformatter(decodeComponent(key), val, ret);\n\t});\n\n\treturn Object.keys(ret).sort().reduce(function (result, key) {\n\t\tvar val = ret[key];\n\t\tif (Boolean(val) && typeof val === 'object' && !Array.isArray(val)) {\n\t\t\t// Sort object keys, not values\n\t\t\tresult[key] = keysSorter(val);\n\t\t} else {\n\t\t\tresult[key] = val;\n\t\t}\n\n\t\treturn result;\n\t}, Object.create(null));\n}\n\nexports.extract = extract;\nexports.parse = parse;\n\nexports.stringify = function (obj, opts) {\n\tvar defaults = {\n\t\tencode: true,\n\t\tstrict: true,\n\t\tarrayFormat: 'none'\n\t};\n\n\topts = objectAssign(defaults, opts);\n\n\tif (opts.sort === false) {\n\t\topts.sort = function () {};\n\t}\n\n\tvar formatter = encoderForArrayFormat(opts);\n\n\treturn obj ? Object.keys(obj).sort(opts.sort).map(function (key) {\n\t\tvar val = obj[key];\n\n\t\tif (val === undefined) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (val === null) {\n\t\t\treturn encode(key, opts);\n\t\t}\n\n\t\tif (Array.isArray(val)) {\n\t\t\tvar result = [];\n\n\t\t\tval.slice().forEach(function (val2) {\n\t\t\t\tif (val2 === undefined) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresult.push(formatter(key, val2, result.length));\n\t\t\t});\n\n\t\t\treturn result.join('&');\n\t\t}\n\n\t\treturn encode(key, opts) + '=' + encode(val, opts);\n\t}).filter(function (x) {\n\t\treturn x.length > 0;\n\t}).join('&') : '';\n};\n\nexports.parseUrl = function (str, opts) {\n\treturn {\n\t\turl: str.split('?')[0] || '',\n\t\tquery: parse(extract(str), opts)\n\t};\n};\n","export default function isPromise(promise: any): promise is PromiseLike<any> {\n    return !!promise &&\n        (typeof promise === 'object' || typeof promise === 'function') &&\n        typeof promise.then === 'function';\n}\n","import Timeout from './timeout';\n\nexport default function createTimeout(delay?: number): Timeout {\n    return new Timeout(delay);\n}\n","import { Subscribable, SubscribableOrPromise } from 'rxjs';\n\nimport Action from './action';\nimport { DispatchableAction } from './dispatchable-data-store';\n\nexport default function isObservableActionLike<TAction extends Action = Action>(\n    action: DispatchableAction<TAction>\n): action is SubscribableOrPromise<TAction> {\n    return (\n        typeof (action as Subscribable<TAction>).subscribe === 'function' ||\n        typeof (action as PromiseLike<TAction>).then === 'function'\n    );\n}\n","import { Subscribable } from 'rxjs';\n\nimport Action from './action';\n\nexport default function noopActionTransformer<TAction extends Action, TTransformedAction extends Action = TAction>(\n    action: Subscribable<TAction>\n): Subscribable<TTransformedAction> {\n    return action as any as Subscribable<TTransformedAction>;\n}\n","export default function noopStateTransformer<TState, TTransformedState = TState>(\n    state: TState\n): TTransformedState {\n    return state as any as TTransformedState;\n}\n","import { curryRight, flowRight } from 'lodash';\nimport * as shallowEqual from 'shallowequal';\n\nimport Action from './action';\nimport Reducer from './reducer';\n\nexport default function composeReducers<TState, TStateA, TAction extends Action = Action>(\n    reducerA: (state: TStateA, action: TAction) => TState,\n    reducerB: (state: TState, action: TAction) => TStateA,\n    options?: ComposeReducersOptions\n): Reducer<TState, TAction>;\n\nexport default function composeReducers<TState, TStateA, TStateB, TAction extends Action = Action>(\n    reducerA: (state: TStateA, action: TAction) => TState,\n    reducerB: (state: TStateB, action: TAction) => TStateA,\n    reducerC: (state: TState, action: TAction) => TStateB,\n    options?: ComposeReducersOptions\n): Reducer<TState, TAction>;\n\nexport default function composeReducers<TState, TStateA, TStateB, TStateC, TAction extends Action = Action>(\n    reducerA: (state: TStateA, action: TAction) => TState,\n    reducerB: (state: TStateB, action: TAction) => TStateA,\n    reducerC: (state: TStateC, action: TAction) => TStateB,\n    reducerD: (state: TState, action: TAction) => TStateC,\n    options?: ComposeReducersOptions\n): Reducer<TState, TAction>;\n\nexport default function composeReducers<TState, TStateA, TStateB, TStateC, TStateD, TAction extends Action = Action>(\n    reducerA: (state: TStateA, action: TAction) => TState,\n    reducerB: (state: TStateB, action: TAction) => TStateA,\n    reducerC: (state: TStateC, action: TAction) => TStateB,\n    reducerD: (state: TStateD, action: TAction) => TStateC,\n    reducerE: (state: TState, action: TAction) => TStateD,\n    options?: ComposeReducersOptions\n): Reducer<TState, TAction>;\n\nexport default function composeReducers<TState, TAction extends Action = Action>(\n    ...args: any[]\n): Reducer<TState, TAction> {\n    let reducers: Array<Reducer<TState, TAction>> = args;\n    let options: ComposeReducersOptions = {};\n\n    if (typeof args[args.length - 1] === 'object') {\n        reducers = args.slice(0, -1);\n        options = { ...options, ...args[args.length - 1] };\n    }\n\n    const { equalityCheck = shallowEqual } = options;\n\n    return (state, action) => {\n        const newState = flowRight(\n            reducers\n                .filter(reducer => reducer.length === 2)\n                .map(reducer => curryRight(reducer)(action))\n        )(state);\n\n        return equalityCheck(state, newState) ? state : newState;\n    };\n}\n\nexport interface ComposeReducersOptions {\n    equalityCheck?(valueA: any, valueB: any): boolean;\n}\n","import Action from './action';\nimport combineReducers, { ReducerMap } from './combine-reducers';\nimport DataStore, { DataStoreOptions } from './data-store';\nimport Reducer from './reducer';\n\nexport default function createDataStore<TState, TAction extends Action = Action, TTransformedState = TState>(\n    reducer: Reducer<TState, TAction> | ReducerMap<TState, TAction>,\n    initialState?: Partial<TState>,\n    options?: Partial<DataStoreOptions<TState, TAction, TTransformedState>>\n): DataStore<TState, TAction, TTransformedState> {\n    if (typeof reducer === 'function') {\n        return new DataStore(reducer, initialState, options);\n    }\n\n    return new DataStore(\n        combineReducers(reducer, { equalityCheck: options && options.equalityCheck }),\n        initialState,\n        options\n    );\n}\n","import Action from './action';\nimport createAction from './create-action';\n\nexport default function createErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    payload?: TPayload,\n    meta?: TMeta\n): Action<TPayload, TMeta, TType> {\n    return {\n        ...createAction(type, payload, meta),\n        error: true,\n    };\n}\n","import lodashMemoize from 'lodash.memoize'; // tslint:disable-line:match-default-export-name\nimport shallowEqual from 'shallowequal';\n\nimport CacheKeyResolver from './cache-key-resolver';\nimport { Omit } from './types';\n\nexport interface MemoizeOptions {\n    maxSize?: number;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\nexport default function memoize<T extends (...args: any[]) => any>(\n    fn: T,\n    options?: MemoizeOptions\n) {\n    const { maxSize, isEqual } = { maxSize: 0, isEqual: shallowEqual, ...options };\n    const cache = new Map();\n    const resolver = new CacheKeyResolver({\n        isEqual,\n        maxSize,\n        onExpire: key => cache.delete(key),\n    });\n    const memoized = lodashMemoize(fn, (...args) => resolver.getKey(...args));\n\n    memoized.cache = cache;\n\n    return memoized;\n}\n\nexport function memoizeOne<T extends (...args: any[]) => any>(\n    fn: T,\n    options?: Omit<MemoizeOptions, 'maxSize'>\n) {\n    return memoize(fn, { ...options, maxSize: 1 });\n}\n","import { noop } from 'lodash';\nimport shallowEqual from 'shallowequal';\n\nimport {\n    isRootCacheKeyMap,\n    isTerminalCacheKeyMap,\n    ChildCacheKeyMap,\n    IntermediateCacheKeyMap,\n    RootCacheKeyMap,\n    TerminalCacheKeyMap\n} from './cache-key-maps';\n\nexport interface CacheKeyResolverOptions {\n    maxSize?: number;\n    onExpire?(key: string): void;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    map?: TerminalCacheKeyMap;\n}\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _map: RootCacheKeyMap = { maps: [] };\n    private _usedMaps: TerminalCacheKeyMap[] = [];\n    private _options: Required<CacheKeyResolverOptions>;\n\n    constructor(options?: CacheKeyResolverOptions) {\n        this._options = {\n            isEqual: shallowEqual,\n            maxSize: 0,\n            onExpire: noop,\n            ...options,\n        };\n    }\n\n    getKey(...args: any[]): string {\n        const result = this._resolveMap(...args);\n        const { index, parentMap } = result;\n        let { map } = result;\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n        } else {\n            map = this._generateMap(parentMap, args.slice(index));\n        }\n\n        // Keep track of the least used map so we can remove it if the size of\n        // the stack exceeds the maximum size.\n        this._removeLeastUsedMap(map);\n\n        return map.cacheKey;\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMap = this._map;\n\n        // Traverse the tree to find the linked list of maps that match the\n        // arguments of the call. Each intermediate or terminal map contains a\n        // value that could be used to match with the arguments. The last map in\n        // the list (the terminal) should contain a cache key. If it can does\n        // not exist, we will return a falsy value so that the caller could\n        // handle and generate a new cache key.\n        while (parentMap.maps.length) {\n            let isMatched = false;\n\n            for (let mapIndex = 0; mapIndex < parentMap.maps.length; mapIndex++) {\n                const map = parentMap.maps[mapIndex];\n\n                if (!this._options.isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                // Move the most recently used map to the top of the stack for\n                // quicker access\n                parentMap.maps.unshift(...parentMap.maps.splice(mapIndex, 1));\n\n                if ((args.length === 0 || index === args.length - 1) && isTerminalCacheKeyMap(map)) {\n                    return { index, map, parentMap };\n                }\n\n                isMatched = true;\n                parentMap = map;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMap };\n    }\n\n    private _generateMap(parent: RootCacheKeyMap | IntermediateCacheKeyMap, args: any[]): TerminalCacheKeyMap {\n        let index = 0;\n        let parentMap = parent;\n        let map: IntermediateCacheKeyMap;\n\n        do {\n            map = {\n                maps: [],\n                parentMap,\n                usedCount: 1,\n                value: args[index],\n            };\n\n            // Continue to build the tree of maps so that it could be resolved\n            // next time when the function is called with the same set of\n            // arguments.\n            parentMap.maps.unshift(map);\n\n            parentMap = map;\n            index++;\n        } while (index < args.length);\n\n        const terminalMap = map as TerminalCacheKeyMap;\n\n        terminalMap.cacheKey = `${++this._lastId}`;\n\n        return terminalMap;\n    }\n\n    private _removeLeastUsedMap(recentlyUsedMap: TerminalCacheKeyMap): void {\n        if (!this._options.maxSize) {\n            return;\n        }\n\n        const index = this._usedMaps.indexOf(recentlyUsedMap);\n\n        this._usedMaps.splice(\n            index === -1 ? 0 : index,\n            index === -1 ? 0 : 1,\n            recentlyUsedMap\n        );\n\n        if (this._usedMaps.length <= this._options.maxSize) {\n            return;\n        }\n\n        const map = this._usedMaps.pop();\n\n        if (!map) {\n            return;\n        }\n\n        this._removeMap(map);\n        this._options.onExpire(map.cacheKey);\n    }\n\n    private _removeMap(map: ChildCacheKeyMap): void {\n        if (!map.parentMap) {\n            return;\n        }\n\n        map.parentMap.maps.splice(map.parentMap.maps.indexOf(map), 1);\n\n        if (isRootCacheKeyMap(map.parentMap)) {\n            return;\n        }\n\n        this._removeMap(map.parentMap);\n    }\n}\n","export interface RootCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n}\n\nexport interface IntermediateCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    usedCount: number;\n    value: any;\n}\n\nexport interface TerminalCacheKeyMap extends IntermediateCacheKeyMap {\n    cacheKey: string;\n}\n\nexport type ChildCacheKeyMap = IntermediateCacheKeyMap | TerminalCacheKeyMap;\n\nexport function isTerminalCacheKeyMap(map: ChildCacheKeyMap): map is TerminalCacheKeyMap {\n    return map.hasOwnProperty('cacheKey');\n}\n\nexport function isRootCacheKeyMap(map: RootCacheKeyMap | ChildCacheKeyMap): map is RootCacheKeyMap {\n    return map.hasOwnProperty('parentMap');\n}\n","import createScriptLoader from './create-script-loader';\nimport ScriptLoader from './script-loader';\n\nlet instance: ScriptLoader;\n\nexport default function getScriptLoader(): ScriptLoader {\n    if (!instance) {\n        instance = createScriptLoader();\n    }\n\n    return instance;\n}\n","import FormBuilder from './form-builder';\nimport FormPoster from './form-poster';\nimport FormPosterOptions from './form-poster-options';\n\nexport default function createFormPoster(options?: FormPosterOptions): FormPoster {\n    const formBuilder = new FormBuilder();\n    const formPoster = new FormPoster(formBuilder, options);\n\n    return formPoster;\n}\n","export default class FormBuilder {\n    build(url: string, data: { [key: string]: any }): HTMLFormElement {\n        const form = document.createElement('form');\n\n        form.style.display = 'none';\n\n        form.setAttribute('action', url);\n        form.setAttribute('method', 'POST');\n        form.setAttribute('target', '_top');\n\n        Object.keys(data)\n            .forEach(key => {\n                const value = data[key];\n\n                form.appendChild(this._createInput(value, key));\n            });\n\n        return form;\n    }\n\n    private _createInput(value: any, key: string): HTMLInputElement {\n        const input = document.createElement('input');\n\n        input.setAttribute('name', key);\n        input.setAttribute('type', 'hidden');\n        input.setAttribute('value', value);\n\n        return input;\n    }\n}\n","export function isAbsoluteUrl(url: string): boolean {\n    return /^https?:\\/\\//.test(url);\n}\n\nexport function joinPaths(pathA: string, pathB: string): string {\n    return `${removeTrailingSlash(pathA)}/${removeLeadingSlash(pathB)}`;\n}\n\nfunction removeTrailingSlash(path: string): string {\n    return path.replace(/\\/$/, '');\n}\n\nfunction removeLeadingSlash(path: string): string {\n    return path.replace(/^\\//, '');\n}\n","import Client from './client/client';\n\n/**\n * @param {Object} [config]\n * @returns {Client}\n */\nexport function createClient(config) {\n    return Client.create(config);\n}\n","import objectAssign from 'object-assign';\nimport OffsitePaymentInitializer from '../payment/offsite-payment-initializer';\nimport PaymentSubmitter from '../payment/payment-submitter';\nimport ClientTokenGenerator from '../payment/client-token-generator';\nimport StoreRequestSender from '../store/store-request-sender';\nimport DEFAULT_CONFIG from './default-config';\n\nexport default class Client {\n    /**\n     * @param {Object} config\n     * @returns {Client}\n     */\n    static create(config) {\n        const clientConfig = objectAssign({}, DEFAULT_CONFIG, config);\n        const offsitePaymentInitializer = OffsitePaymentInitializer.create(clientConfig);\n        const paymentSubmitter = PaymentSubmitter.create(clientConfig);\n        const clientTokenGenerator = ClientTokenGenerator.create(clientConfig);\n        const storeRequestSender = StoreRequestSender.create(clientConfig);\n\n        return new Client(\n            clientConfig,\n            paymentSubmitter,\n            offsitePaymentInitializer,\n            clientTokenGenerator,\n            storeRequestSender\n        );\n    }\n\n    /**\n     * @param {Object} config\n     * @param {PaymentSubmitter} paymentSubmitter\n     * @param {OffsitePaymentInitializer} offsitePaymentInitializer\n     * @param {ClientTokenGenerator} clientTokenGenerator\n     * @param {StoreRequestSender} storeRequestSender\n     */\n    constructor(\n        config,\n        paymentSubmitter,\n        offsitePaymentInitializer,\n        clientTokenGenerator,\n        storeRequestSender\n    ) {\n        /**\n         * @private\n         * @type {Object}\n         */\n        this.config = config;\n\n        /**\n         * @private\n         * @type {PaymentSubmitter}\n         */\n        this.paymentSubmitter = paymentSubmitter;\n\n        /**\n         * @private\n         * @type {OffsitePaymentInitializer}\n         */\n        this.offsitePaymentInitializer = offsitePaymentInitializer;\n\n        /**\n         * @private\n         * @type {ClientTokenGenerator}\n         */\n        this.clientTokenGenerator = clientTokenGenerator;\n\n        /**\n         * @private\n         * @type {StoreRequestSender}\n         */\n        this.storeRequestSender = storeRequestSender;\n    }\n\n    /**\n     * @param {string} host\n     * @returns {void}\n     */\n    setHost(host) {\n        this.config.host = host;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @param {Function} [callback]\n     * @returns {void}\n     */\n    initializeOffsitePayment(data, callback) {\n        this.offsitePaymentInitializer.initializeOffsitePayment(data, callback);\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @param {Function} [callback]\n     * @returns {void}\n     */\n    submitPayment(data, callback) {\n        this.paymentSubmitter.submitPayment(data, callback);\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @param {Function} [callback]\n     * @returns {void}\n     */\n    generateClientToken(data, callback) {\n        this.clientTokenGenerator.generateClientToken(data, callback);\n    }\n\n    /**\n     * @param {Object} data\n     * @param {string} data.storeId\n     * @param {string} data.customerId\n     * @param {string} data.currencyCode\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    loadInstruments(data, callback) {\n        this.storeRequestSender.loadInstruments(data, callback);\n    }\n\n    /**\n     * @param {Object} data\n     * @param {string} data.storeId\n     * @param {string} data.customerId\n     * @param {string} data.currencyCode\n     * @param {AddressData} data.shippingAddress\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    loadInstrumentsWithAddress(data, callback) {\n        this.storeRequestSender.loadInstrumentsWithAddress(data, callback);\n    }\n\n    /**\n     * @param {Object} data\n     * @param {string} data.storeId\n     * @param {string} data.customerId\n     * @param {string} data.currencyCode\n     * @param {CreditCard} data.creditCard\n     * @param {AddressData} data.billingAddress\n     * @param {boolean} data.defaultInstrument\n     * @param {string} data.providerName\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    postShopperInstrument(data, callback) {\n        this.storeRequestSender.postShopperInstrument(data, callback);\n    }\n\n    /**\n     * @param {Object} data\n     * @param {string} data.storeId\n     * @param {string} data.customerId\n     * @param {string} data.instrumentId\n     * @param {string} data.currencyCode\n     * @param {Function} [callback]\n     * @return {void}\n     */\n    deleteShopperInstrument(data, callback) {\n        this.storeRequestSender.deleteShopperInstrument(data, callback);\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { HOSTED } from './payment-types';\nimport PayloadMapper from './offsite-payment-mappers/payload-mapper';\nimport UrlHelper from './url-helper';\n\nexport default class OffsitePaymentInitializer {\n    /**\n     * @param {Object} config\n     * @returns {OffsitePaymentInitializer}\n     */\n    static create(config) {\n        const urlHelper = UrlHelper.create(config);\n        const formPoster = createFormPoster();\n        const payloadMapper = PayloadMapper.create();\n\n        return new OffsitePaymentInitializer(urlHelper, formPoster, payloadMapper);\n    }\n\n    /**\n     * @param {UrlHelper} urlHelper\n     * @param {FormPoster} formPoster\n     * @param {PayloadMapper} payloadMapper\n     * @returns {void}\n     */\n    constructor(urlHelper, formPoster, payloadMapper) {\n        /**\n         * @private\n         * @type {UrlHelper}\n         */\n        this.urlHelper = urlHelper;\n\n        /**\n         * @private\n         * @type {FormPoster}\n         */\n        this.formPoster = formPoster;\n\n        /**\n         * @private\n         * @type {PayloadMapper}\n         */\n        this.payloadMapper = payloadMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @param {Function} [callback]\n     * @returns {void}\n     * @throws {Error}\n     */\n    initializeOffsitePayment(data, callback) {\n        const { paymentMethod = {} } = data;\n\n        if (paymentMethod.type !== HOSTED) {\n            throw new Error(`${paymentMethod.type} is not supported.`);\n        }\n\n        const payload = this.payloadMapper.mapToPayload(data);\n        const url = this.urlHelper.getOffsitePaymentUrl();\n\n        this.formPoster.postForm(url, payload, callback);\n    }\n}\n","import objectAssign from 'object-assign';\nimport { omitNil, toString } from '../../common/utils';\nimport AddressMapper from './address-mapper';\nimport CustomerMapper from './customer-mapper';\nimport MetaMapper from './meta-mapper';\nimport PaymentMethodIdMapper from '../payment-method-mappers/payment-method-id-mapper';\nimport StoreMapper from './store-mapper';\n\nexport default class PayloadMapper {\n    /**\n     * @returns {PayloadMapper}\n     */\n    static create() {\n        const addressMapper = AddressMapper.create();\n        const customerMapper = CustomerMapper.create();\n        const metaMapper = MetaMapper.create();\n        const paymentMethodIdMapper = PaymentMethodIdMapper.create();\n        const storeMapper = StoreMapper.create();\n\n        return new PayloadMapper(addressMapper, customerMapper, metaMapper, paymentMethodIdMapper, storeMapper);\n    }\n\n    /**\n     * @param {AddressMapper} addressMapper\n     * @param {CustomerMapper} customerMapper\n     * @param {MetaMapper} metaMapper\n     * @param {PaymentMethodIdMapper} paymentMethodIdMapper\n     * @param {StoreMapper} storeMapper\n     * @returns {Object}\n     */\n    constructor(addressMapper, customerMapper, metaMapper, paymentMethodIdMapper, storeMapper) {\n        /**\n         * @private\n         * @type {AddressMapper}\n         */\n        this.addressMapper = addressMapper;\n\n        /**\n         * @private\n         * @type {CustomerMapper}\n         */\n        this.customerMapper = customerMapper;\n\n        /**\n         * @private\n         * @type {MetaMapper}\n         */\n        this.metaMapper = metaMapper;\n\n        /**\n         * @private\n         * @type {PaymentMethodIdMapper}\n         */\n        this.paymentMethodIdMapper = paymentMethodIdMapper;\n\n        /**\n         * @private\n         * @type {StoreMapper}\n         */\n        this.storeMapper = storeMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToPayload(data) {\n        const { authToken, order = {}, paymentMethod = {} } = data;\n\n        const payload = objectAssign(\n            {\n                amount: order.grandTotal ? order.grandTotal.integerAmount : null,\n                bc_auth_token: authToken,\n                currency: order.currency,\n                gateway: this.paymentMethodIdMapper.mapToId(paymentMethod),\n                notify_url: order.callbackUrl,\n                order_id: order.orderId ? toString(order.orderId) : null,\n                page_title: document.title ? document.title : null,\n                payment_method_id: paymentMethod.id,\n                reference_id: order.orderId ? toString(order.orderId) : null,\n                return_url: paymentMethod.returnUrl || (order.payment ? order.payment.returnUrl : null),\n            },\n            this.addressMapper.mapToBillingAddress(data),\n            this.customerMapper.mapToCustomer(data),\n            this.metaMapper.mapToMeta(data),\n            this.addressMapper.mapToShippingAddress(data),\n            this.storeMapper.mapToStore(data)\n        );\n\n        return omitNil(payload);\n    }\n}\n","/**\n * @param {array|string} items\n * @param {array|string} item\n * @returns {boolean}\n */\nexport default function includes(items, item) {\n    if (!Array.isArray(items) && typeof items !== 'string') {\n        return false;\n    }\n\n    return items.indexOf(item) !== -1;\n}\n","import isEmptyStringOrNil from './is-emptystring-or-nil';\nimport omitProperty from './omit-property';\n\n/**\n * @param {Object} object\n * @returns {Object}\n */\nexport default function omitEmptyStringAndNil(object) {\n    return omitProperty(object, isEmptyStringOrNil);\n}\n","import isEmptyString from './is-empty-string';\nimport isNil from './is-nil';\n\n/**\n * @param {*} value\n * @returns {boolean}\n */\nexport default function isEmptyStringOrNil(value) {\n    return isEmptyString(value) || isNil(value);\n}\n","/**\n * @param {*} value\n * @returns {boolean}\n */\nexport default function isEmptyString(value) {\n    return value === '';\n}\n","import isNil from './is-nil';\nimport omitProperty from './omit-property';\n\n/**\n * @param {Object} object\n * @returns {Object}\n */\nexport default function omitNil(object) {\n    return omitProperty(object, isNil);\n}\n","/**\n * @param {*} value\n * @returns {number}\n */\nexport default function toNumber(value) {\n    return parseFloat(value) || 0;\n}\n","/**\n * @param {string} string\n * @returns {string}\n */\nexport default function toSnakeCase(string) {\n    if (typeof string !== 'string') {\n        return string;\n    }\n\n    return string.replace(/([a-z\\d])([A-Z]+)/g, '$1_$2')\n        .replace(/[-\\s]+/g, '_')\n        .toLowerCase();\n}\n","/**\n * @param {*} value\n * @returns {string}\n */\nexport default function toString(value) {\n    if (typeof value === 'string') {\n        return value;\n    }\n\n    if (typeof value === 'number' && !isNaN(value)) {\n        return value.toString();\n    }\n\n    return '';\n}\n","import { omitNil, toSnakeCase } from '../../common/utils';\n\nexport default class AddressMapper {\n    /**\n     * @returns {AddressMapper}\n     */\n    static create() {\n        return new AddressMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToBillingAddress(data) {\n        return this.mapToAddress(data, 'billingAddress');\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToShippingAddress(data) {\n        return this.mapToAddress(data, 'shippingAddress');\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @param {string} addressKey\n     * @returns {Object}\n     */\n    mapToAddress(data, addressKey) {\n        const address = data[addressKey] || {};\n        const formattedAddressKey = toSnakeCase(addressKey);\n\n        return omitNil({\n            [`${formattedAddressKey}_city`]: address.city,\n            [`${formattedAddressKey}_company`]: address.company,\n            [`${formattedAddressKey}_country_code`]: address.countryCode,\n            [`${formattedAddressKey}_country`]: address.country,\n            [`${formattedAddressKey}_first_name`]: address.firstName,\n            [`${formattedAddressKey}_last_name`]: address.lastName,\n            [`${formattedAddressKey}_phone`]: address.phone,\n            [`${formattedAddressKey}_state_code`]: address.provinceCode,\n            [`${formattedAddressKey}_state`]: address.province,\n            [`${formattedAddressKey}_street_1`]: address.addressLine1,\n            [`${formattedAddressKey}_street_2`]: address.addressLine2,\n            [`${formattedAddressKey}_zip`]: address.postCode,\n        });\n    }\n}\n","import { omitNil } from '../../common/utils';\n\nexport default class CustomerMapper {\n    /**\n     * @returns {CustomerMapper}\n     */\n    static create() {\n        return new CustomerMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToCustomer(data) {\n        const { customer = {}, quoteMeta = {}, store = {} } = data;\n\n        return omitNil({\n            customer_browser_info: navigator.userAgent,\n            customer_email: customer.email,\n            customer_first_name: customer.firstName,\n            customer_geo_ip_country_code: quoteMeta.request ? quoteMeta.request.geoCountryCode : null,\n            customer_last_name: customer.lastName,\n            customer_locale: store.storeLanguage,\n            customer_name: customer.name,\n            customer_phone: customer.phoneNumber,\n            customer_reference: customer.email,\n        });\n    }\n}\n","import { omitNil } from '../../common/utils';\n\nexport default class MetaMapper {\n    /**\n     * @returns {MetaMapper}\n     */\n    static create() {\n        return new MetaMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToMeta(data) {\n        const { source } = data;\n\n        return omitNil({\n            meta_referrer: document.referrer,\n            meta_source: source,\n            meta_user_agent: navigator.userAgent,\n        });\n    }\n}\n","export const CREDIT_CARD = 'credit-card';\nexport const MULTI_OPTION = 'multi-option';\n","export const BRAINTREE = 'braintree';\nexport const BRAINTREE_PAYPAL = 'braintreepaypal';\nexport const BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit';\nexport const BRAINTREE_VISACHECKOUT = 'braintreevisacheckout';\nexport const BRAINTREE_GOOGLEPAY = 'googlepaybraintree';\n","import { omitNil, toString } from '../../common/utils';\n\nexport default class StoreMapper {\n    /**\n     * @returns {StoreMapper}\n     */\n    static create() {\n        return new StoreMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToStore(data) {\n        const { store = {} } = data;\n\n        return omitNil({\n            store_hash: store.storeHash,\n            store_id: store.storeId ? toString(store.storeId) : null,\n        });\n    }\n}\n","import { API } from './payment-types';\nimport PayloadMapper from './v1/payment-mappers/payload-mapper';\nimport RequestSender from '../common/http-request/request-sender';\nimport UrlHelper from './url-helper';\n\nexport default class PaymentSubmitter {\n    /**\n     * @param {Object} config\n     * @returns {PaymentSubmitter}\n     */\n    static create(config) {\n        const urlHelper = UrlHelper.create(config);\n        const requestSender = RequestSender.create();\n        const payloadMapper = PayloadMapper.create();\n\n        return new PaymentSubmitter(urlHelper, requestSender, payloadMapper);\n    }\n\n    /**\n     * @param {UrlHelper} urlHelper\n     * @param {RequestSender} requestSender\n     * @param {PayloadMapper} payloadMapper\n     * @returns {void}\n     */\n    constructor(urlHelper, requestSender, payloadMapper) {\n        /**\n         * @private\n         * @type {UrlHelper}\n         */\n        this.urlHelper = urlHelper;\n\n        /**\n         * @private\n         * @type {RequestSender}\n         */\n        this.requestSender = requestSender;\n\n        /**\n         * @private\n         * @type {PayloadMapper}\n         */\n        this.payloadMapper = payloadMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @param {Function} [callback]\n     * @returns {void}\n     * @throws {Error}\n     */\n    submitPayment(data, callback) {\n        const { paymentMethod = {} } = data;\n\n        if (paymentMethod.type !== API) {\n            throw new Error(`${paymentMethod.type} is not supported.`);\n        }\n\n        const payload = this.payloadMapper.mapToPayload(data);\n        const url = this.urlHelper.getPaymentUrl();\n        const options = {\n            headers: this.payloadMapper.mapToHeaders(data),\n        };\n\n        this.requestSender.postRequest(url, payload, options, callback);\n    }\n}\n","import { omitNil } from '../../../common/utils';\nimport CustomerMapper from './customer-mapper';\nimport OrderMapper from './order-mapper';\nimport PaymentMapper from './payment-mapper';\nimport StoreMapper from './store-mapper';\n\nexport default class PayloadMapper {\n    /**\n     * @returns {PayloadMapper}\n     */\n    static create() {\n        const customerMapper = CustomerMapper.create();\n        const orderMapper = OrderMapper.create();\n        const paymentMapper = PaymentMapper.create();\n        const storeMapper = StoreMapper.create();\n\n        return new PayloadMapper(customerMapper, orderMapper, paymentMapper, storeMapper);\n    }\n\n    /**\n     * @param {CustomerMapper} customerMapper\n     * @param {OrderMapper} orderMapper\n     * @param {PaymentMapper} paymentMapper\n     * @param {StoreMapper} storeMapper\n     */\n    constructor(customerMapper, orderMapper, paymentMapper, storeMapper) {\n        /**\n         * @private\n         * @type {CustomerMapper}\n         */\n        this.customerMapper = customerMapper;\n\n        /**\n         * @private\n         * @type {OrderMapper}\n         */\n        this.orderMapper = orderMapper;\n\n        /**\n         * @private\n         * @type {PaymentMapper}\n         */\n        this.paymentMapper = paymentMapper;\n\n        /**\n         * @private\n         * @type {StoreMapper}\n         */\n        this.storeMapper = storeMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToPayload(data) {\n        const { order = {} } = data;\n\n        return omitNil({\n            customer: this.customerMapper.mapToCustomer(data),\n            notify_url: order.callbackUrl,\n            order: this.orderMapper.mapToOrder(data),\n            payment: this.paymentMapper.mapToPayment(data),\n            store: this.storeMapper.mapToStore(data),\n        });\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToHeaders(data) {\n        const { authToken } = data;\n\n        return omitNil({\n            Authorization: authToken,\n        });\n    }\n}\n","import { omitNil, toString } from '../../../common/utils';\n\nexport default class CustomerMapper {\n    /**\n     * @returns {CustomerMapper}\n     */\n    static create() {\n        return new CustomerMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToCustomer(data) {\n        const { customer = {}, quoteMeta = {} } = data;\n\n        return omitNil({\n            customer_group: customer.customerGroupName ? { name: customer.customerGroupName } : null,\n            geo_ip_country_code: quoteMeta.request ? quoteMeta.request.geoCountryCode : null,\n            id: customer.customerId ? toString(customer.customerId) : null,\n            session_token: quoteMeta.request ? quoteMeta.request.sessionHash : null,\n        });\n    }\n}\n","import { omitEmptyStringAndNil, omitNil, toString } from '../../../common/utils';\n\nexport default class OrderMapper {\n    /**\n     * @returns {OrderMapper}\n     */\n    static create() {\n        return new OrderMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToOrder(data) {\n        const { order = {} } = data;\n\n        return omitNil({\n            billing_address: this.mapToBillingAddress(data),\n            coupons: this.mapToCoupons(data),\n            currency: order.currency,\n            id: order.orderId ? toString(order.orderId) : null,\n            items: this.mapToItems(data),\n            shipping: this.mapToShipping(data),\n            shipping_address: this.mapToShippingAddress(data),\n            token: order.token,\n            totals: this.mapToOrderTotals(data),\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToBillingAddress(data) {\n        const { customer = {} } = data;\n        const address = this.mapToAddress(data, 'billingAddress');\n\n        if (customer.email) {\n            address.email = customer.email;\n        }\n\n        return address;\n    }\n\n    /**\n     * @private\n     * @param  {PaymentRequestData} data\n     * @return {Shipping[]}\n     */\n    mapToShipping(data) {\n        const { description } = data.shippingOption || {};\n\n        if (description) {\n            return [{\n                method: description,\n            }];\n        }\n\n        return [];\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Coupon[]}\n     */\n    mapToCoupons({ order = {} }) {\n        if (order.coupon && order.coupon.coupons) {\n            return order.coupon.coupons.map(({ code }) => ({ code }));\n        }\n\n        return [];\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToShippingAddress(data) {\n        return this.mapToAddress(data, 'shippingAddress');\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @param {string} addressKey\n     * @returns {Object}\n     */\n    mapToAddress(data, addressKey) {\n        const address = data[addressKey] || {};\n\n        return omitEmptyStringAndNil({\n            city: address.city,\n            company: address.company,\n            country_code: address.countryCode,\n            country: address.country,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone: address.phone,\n            state_code: address.provinceCode,\n            state: address.province,\n            street_1: address.addressLine1,\n            street_2: address.addressLine2,\n            zip: address.postCode,\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToItems(data) {\n        const { cart = { items: [] } } = data;\n\n        return cart.items.map(itemData => omitNil({\n            code: itemData.id,\n            variant_id: itemData.variantId,\n            name: itemData.name,\n            price: itemData.integerAmount,\n            quantity: itemData.quantity,\n            sku: itemData.sku,\n        }));\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToOrderTotals(data) {\n        const { order = {} } = data;\n\n        return omitNil({\n            grand_total: order.grandTotal ? order.grandTotal.integerAmount : null,\n            handling: order.handling ? order.handling.integerAmount : null,\n            shipping: order.shipping ? order.shipping.integerAmount : null,\n            subtotal: order.subtotal ? order.subtotal.integerAmount : null,\n            tax: order.taxTotal ? order.taxTotal.integerAmount : null,\n        });\n    }\n}\n","import objectAssign from 'object-assign';\nimport PaymentMethodIdMapper from '../../payment-method-mappers/payment-method-id-mapper';\nimport { omitNil, toNumber } from '../../../common/utils';\n\nexport default class PaymentMapper {\n    /**\n     * @param {PaymentMethodIdMapper} paymentMethodIdMapper\n     * @returns {PaymentMapper}\n     */\n    static create() {\n        const paymentMethodIdMapper = PaymentMethodIdMapper.create();\n\n        return new PaymentMapper(paymentMethodIdMapper);\n    }\n\n    /**\n     * @param {PaymentMethodIdMapper} paymentMethodIdMapper\n     * @returns {void}\n     */\n    constructor(paymentMethodIdMapper) {\n        /**\n         * @private\n         * @type {PaymentMethodIdMapper}\n         */\n        this.paymentMethodIdMapper = paymentMethodIdMapper;\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToPayment(data) {\n        const {\n            order = {},\n            orderMeta = {},\n            payment = {},\n            paymentMethod = {},\n        } = data;\n\n        const payload = {\n            device_info: payment.deviceSessionId ? payment.deviceSessionId : null,\n            device: orderMeta.deviceFingerprint ? { fingerprint_id: orderMeta.deviceFingerprint } : null,\n            gateway: this.paymentMethodIdMapper.mapToId(paymentMethod),\n            notify_url: order.callbackUrl,\n            return_url: paymentMethod.returnUrl || (order.payment ? order.payment.returnUrl : null),\n            vault_payment_instrument: !payment.instrumentId ? payment.shouldSaveInstrument : null,\n        };\n\n        const method = paymentMethod.method;\n\n        if (method) {\n            objectAssign(payload, { method });\n        }\n\n        const nonce = payment.nonce || paymentMethod.nonce;\n\n        if (payment.instrumentId) {\n            objectAssign(payload, {\n                bigpay_token: this.mapToBigPayToken(data),\n            });\n        } else if (nonce) {\n            objectAssign(payload, {\n                credit_card_token: {\n                    token: nonce,\n                },\n            });\n        } else if (payment.cryptogramId) {\n            objectAssign(payload, {\n                credit_card_cryptogram: this.mapToCryptogram(data),\n            });\n        } else {\n            objectAssign(payload, {\n                credit_card: this.mapToCreditCard(data),\n            });\n        }\n\n        return omitNil(payload);\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToCreditCard(data) {\n        const { payment = {} } = data;\n\n        return omitNil({\n            account_name: payment.ccName,\n            month: payment.ccExpiry ? toNumber(payment.ccExpiry.month) : null,\n            number: payment.ccNumber,\n            verification_value: payment.ccCvv,\n            year: payment.ccExpiry ? toNumber(payment.ccExpiry.year) : null,\n            customer_code: payment.ccCustomerCode,\n            three_d_secure: payment.threeDSecure,\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @return {Object}\n     */\n    mapToBigPayToken({ payment }) {\n        return omitNil({\n            credit_card_number_confirmation: payment.ccNumber,\n            token: payment.instrumentId,\n            verification_value: payment.ccCvv,\n            three_d_secure: payment.threeDSecure,\n        });\n    }\n\n    /**\n     * @private\n     * @param {PaymentRequestData} data\n     * @return {Object}\n     */\n    mapToCryptogram({ payment }) {\n        return omitNil({\n            payment_cryptogram: payment.cryptogramId,\n            eci: payment.eci,\n            xid: payment.transactionId,\n            month: payment.ccExpiry ? toNumber(payment.ccExpiry.month) : null,\n            number: payment.ccNumber,\n            year: payment.ccExpiry ? toNumber(payment.ccExpiry.year) : null,\n            account_mask: payment.accountMask,\n        });\n    }\n}\n","import { omitNil, toString } from '../../../common/utils';\n\nexport default class StoreMapper {\n    /**\n     * @returns {StoreMapper}\n     */\n    static create() {\n        return new StoreMapper();\n    }\n\n    /**\n     * @param {PaymentRequestData} data\n     * @returns {Object}\n     */\n    mapToStore(data) {\n        const { store = {} } = data;\n\n        return omitNil({\n            hash: store.storeHash,\n            id: store.storeId ? toString(store.storeId) : null,\n            name: store.storeName,\n        });\n    }\n}\n","import { APPLICATION_JSON } from './content-types';\nimport { GET } from './method-types';\n\nconst DEFAULT_OPTIONS = {\n    headers: {\n        Accept: APPLICATION_JSON,\n        'Content-Type': APPLICATION_JSON,\n    },\n    method: GET,\n};\n\nexport default DEFAULT_OPTIONS;\n"],"sourceRoot":""}