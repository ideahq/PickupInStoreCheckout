{"version":3,"sources":["webpack://checkout/./src/app/billing/BillingForm.tsx","webpack://checkout/./src/app/billing/Billing.tsx"],"names":["BillingForm_BillingForm","_super","BillingForm","_this","apply","this","arguments","state","isResettingAddress","addressFormRef","Object","react","handleSelectAddress","address","tslib","_a","props","updateAddress","onUnhandledError","setState","_b","sent","e_1","handleUseNewAddress","prototype","render","googleMapsApiKey","billingAddress","countriesWithAutocomplete","addresses","customer","getFields","countries","isUpdating","setFieldValue","shouldShowOrderComments","values","hasAddresses","length","hasValidCustomerAddress","isValidCustomerAddress","countryCode","react_default","a","createElement","Form","autoComplete","Fieldset","id","ref","LoadingOverlay","isLoading","AddressSelect","onSelectAddress","onUseNewAddress","selectedAddress","undefined","AddressForm","formFields","OrderComments","className","Button","disabled","type","variant","Primary","TranslatedString","billing_BillingForm","withLanguage","dist","handleSubmit","onSubmit","mapPropsToValues","customerMessage","mapAddressToFormValues","orderComment","isInitialValid","language","getAddressValidationSchema","isValidSync","validationSchema","lib","enableReinitialize","Billing_Billing","Billing","addressValues","updateCheckout","navigateNextStep","promises","mapAddressFromFormValues","isEqualAddress","push","Promise","all","_c","error_1","componentDidMount","initialize","onReady","lodash","isInitializing","Legend","testId","unmountContentWhenLoading","__webpack_exports__","withCheckout","checkoutService","checkoutState","data","getCheckout","getConfig","getCart","getCustomer","getBillingAddress","getBillingAddressFields","getBillingCountries","statuses","isLoadingBillingCountries","isUpdatingBillingAddress","isUpdatingCheckout","config","checkout","cart","_d","checkoutSettings","enableOrderComments","features","emptyData","loadBillingAddressFields","getShippableItemsCount","updateBillingAddress"],"mappings":"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","file":"billing-41ef1682.js","sourcesContent":["import { Address, CheckoutSelectors, Country, Customer, FormField } from '@bigcommerce/checkout-sdk';\nimport { withFormik, FormikProps } from 'formik';\nimport React, { createRef, PureComponent, ReactNode, RefObject } from 'react';\nimport { lazy } from 'yup';\n\nimport { getAddressValidationSchema, isValidCustomerAddress, mapAddressToFormValues, AddressForm, AddressFormValues, AddressSelect } from '../address';\nimport { withLanguage, TranslatedString, WithLanguageProps } from '../locale';\nimport { OrderComments } from '../orderComments';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Form } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nexport type BillingFormValues = AddressFormValues & { orderComment: string };\n\nexport interface BillingFormProps {\n    billingAddress?: Address;\n    customer: Customer;\n    customerMessage: string;\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey: string;\n    isUpdating: boolean;\n    shouldShowOrderComments: boolean;\n    getFields(countryCode?: string): FormField[];\n    onUnhandledError(error: Error): void;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    onSubmit(values: BillingFormValues): void;\n}\n\ninterface BillingFormState {\n    isResettingAddress: boolean;\n}\n\nclass BillingForm extends PureComponent<BillingFormProps & WithLanguageProps & FormikProps<BillingFormValues>, BillingFormState> {\n    state: BillingFormState = {\n        isResettingAddress: false,\n    };\n\n    private addressFormRef: RefObject<HTMLFieldSetElement> = createRef();\n\n    render(): ReactNode {\n        const {\n            googleMapsApiKey,\n            billingAddress,\n            countriesWithAutocomplete,\n            customer: { addresses },\n            getFields,\n            countries,\n            isUpdating,\n            setFieldValue,\n            shouldShowOrderComments,\n            values,\n        } = this.props;\n\n        const { isResettingAddress } = this.state;\n        const hasAddresses = addresses && addresses.length > 0;\n        const hasValidCustomerAddress = billingAddress &&\n            isValidCustomerAddress(billingAddress, addresses, getFields(billingAddress.countryCode));\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset id=\"checkoutBillingAddress\" ref={ this.addressFormRef }>\n                    { hasAddresses &&\n                        <Fieldset id=\"billingAddresses\">\n                            <LoadingOverlay isLoading={ isResettingAddress }>\n                                <AddressSelect\n                                    addresses={ addresses }\n                                    onSelectAddress={ this.handleSelectAddress }\n                                    onUseNewAddress={ this.handleUseNewAddress }\n                                    selectedAddress={ hasValidCustomerAddress ? billingAddress : undefined }\n                                />\n                            </LoadingOverlay>\n                        </Fieldset> }\n\n                    { !hasValidCustomerAddress &&\n                        <LoadingOverlay isLoading={ isResettingAddress }>\n                            <AddressForm\n                                countries={ countries }\n                                countriesWithAutocomplete={ countriesWithAutocomplete }\n                                countryCode={ values.countryCode }\n                                formFields={ getFields(values.countryCode) }\n                                googleMapsApiKey={ googleMapsApiKey }\n                                setFieldValue={ setFieldValue }\n                            />\n                        </LoadingOverlay> }\n                </Fieldset>\n\n                { shouldShowOrderComments &&\n                    <OrderComments /> }\n\n                <div className=\"form-actions\">\n                    <Button\n                        disabled={ isUpdating || isResettingAddress }\n                        id=\"checkout-billing-continue\"\n                        isLoading={ isUpdating || isResettingAddress }\n                        type=\"submit\"\n                        variant={ ButtonVariant.Primary }\n                    >\n                        <TranslatedString id=\"common.continue_action\" />\n                    </Button>\n                </div>\n            </Form>\n        );\n    }\n\n    private handleSelectAddress: (address: Partial<Address>) => void = async address => {\n        const {\n            updateAddress,\n            onUnhandledError,\n        } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            await updateAddress(address);\n        } catch (e) {\n            onUnhandledError(e);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private handleUseNewAddress: () => void = () => {\n        this.handleSelectAddress({});\n    };\n}\n\nexport default withLanguage(withFormik<BillingFormProps & WithLanguageProps, BillingFormValues>({\n    handleSubmit: (values, { props: { onSubmit } }) => {\n        onSubmit(values);\n    },\n    mapPropsToValues: ({ getFields, customerMessage, billingAddress }) => (\n        {\n        ...mapAddressToFormValues(\n            getFields(billingAddress && billingAddress.countryCode),\n            billingAddress\n        ),\n        orderComment: customerMessage,\n    }),\n    isInitialValid: ({\n        billingAddress,\n        getFields,\n        language,\n    }) => (\n        !!billingAddress && getAddressValidationSchema({\n            language,\n            formFields: getFields(billingAddress.countryCode),\n        }).isValidSync(billingAddress)\n    ),\n    validationSchema: ({\n        language,\n        getFields,\n    }: BillingFormProps & WithLanguageProps) => (\n        lazy<Partial<AddressFormValues>>(values => getAddressValidationSchema({\n            language,\n            formFields: getFields(values && values.countryCode),\n        }))\n    ),\n    enableReinitialize: true,\n})(BillingForm));\n","import { Address, CheckoutRequestBody, CheckoutSelectors, Country, Customer, FormField } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { withCheckout, CheckoutContextProps } from '../checkout';\nimport { EMPTY_ARRAY } from '../common/utility';\nimport { TranslatedString } from '../locale';\nimport { getShippableItemsCount } from '../shipping';\nimport { Legend } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport BillingForm, { BillingFormValues } from './BillingForm';\n\nexport interface BillingProps {\n    navigateNextStep(): void;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n}\n\nexport interface WithCheckoutBillingProps {\n    billingAddress?: Address;\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isInitializing: boolean;\n    isUpdating: boolean;\n    shouldShowOrderComments: boolean;\n    getFields(countryCode?: string): FormField[];\n    initialize(): Promise<CheckoutSelectors>;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n}\n\nclass Billing extends Component<BillingProps & WithCheckoutBillingProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            onReady = noop,\n            onUnhandledError,\n        } = this.props;\n\n        try {\n            await initialize();\n            onReady();\n        } catch (e) {\n            onUnhandledError(e);\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            updateAddress,\n            isInitializing,\n            ...props\n        } = this.props;\n\n        return (\n            <div className=\"checkout-form\">\n                <div className=\"form-legend-container\">\n                    <Legend testId=\"billing-address-heading\">\n                        <TranslatedString id=\"billing.billing_address_heading\" />\n                    </Legend>\n                </div>\n\n                <LoadingOverlay\n                    isLoading={ isInitializing }\n                    unmountContentWhenLoading\n                >\n                    <BillingForm\n                        { ...props }\n                        onSubmit={ this.handleSubmit }\n                        updateAddress={ updateAddress }\n                    />\n                </LoadingOverlay>\n            </div>\n        );\n    }\n\n    private handleSubmit: (values: BillingFormValues) => void = async ({\n        orderComment,\n        ...addressValues\n    }) => {\n        const {\n            updateAddress,\n            updateCheckout,\n            customerMessage,\n            billingAddress,\n            navigateNextStep,\n            onUnhandledError,\n        } = this.props;\n\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n        const address = mapAddressFromFormValues(addressValues);\n\n        if (address && !isEqualAddress(address, billingAddress)) {\n            promises.push(updateAddress(address));\n        }\n\n        if (customerMessage !== orderComment) {\n            promises.push(updateCheckout({ customerMessage: orderComment }));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            navigateNextStep();\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n}\n\nfunction mapToBillingProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutBillingProps | null {\n    const {\n        data: {\n            getCheckout,\n            getConfig,\n            getCart,\n            getCustomer,\n            getBillingAddress,\n            getBillingAddressFields,\n            getBillingCountries,\n        },\n        statuses: {\n            isLoadingBillingCountries,\n            isUpdatingBillingAddress,\n            isUpdatingCheckout,\n        },\n    } = checkoutState;\n\n    const config = getConfig();\n    const customer = getCustomer();\n    const checkout = getCheckout();\n    const cart = getCart();\n\n    if (!config || !customer || !checkout || !cart) {\n        return null;\n    }\n\n    const {\n        enableOrderComments,\n        googleMapsApiKey,\n        features,\n    } = config.checkoutSettings;\n\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ'];\n\n    if (features['CHECKOUT-4183.checkout_google_address_autocomplete_uk']) {\n        countriesWithAutocomplete.push('GB');\n    }\n\n    return {\n        billingAddress: getBillingAddress(),\n        countries: getBillingCountries() || EMPTY_ARRAY,\n        countriesWithAutocomplete,\n        customer,\n        customerMessage: checkout.customerMessage,\n        getFields: getBillingAddressFields,\n        googleMapsApiKey,\n        initialize: checkoutService.loadBillingAddressFields,\n        isInitializing: isLoadingBillingCountries(),\n        isUpdating: isUpdatingBillingAddress() || isUpdatingCheckout(),\n        shouldShowOrderComments: enableOrderComments && getShippableItemsCount(cart) < 1,\n        updateAddress: checkoutService.updateBillingAddress,\n        updateCheckout: checkoutService.updateCheckout,\n    };\n}\n\nexport default withCheckout(mapToBillingProps)(Billing);\n"],"sourceRoot":""}